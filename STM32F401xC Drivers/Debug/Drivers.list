
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a9c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c30  08000c30  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c30  08000c30  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000c30  08000c30  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000c30  08000c30  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c30  08000c30  00001c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c34  08000c34  00001c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000c38  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000008  08000c40  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08000c40  00002080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018bd  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062d  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b5a  00000000  00000000  00003f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00004a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00004c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001253  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001139  00000000  00000000  0000602b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005ce3  00000000  00000000  00007164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ce47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f4  00000000  00000000  0000ce8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c18 	.word	0x08000c18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000c18 	.word	0x08000c18

080001d4 <Clock_Init>:
#include "stm32f401xc_gpio_driver.h"
#include "stm32f401xc_EXTI_driver.h"
#include "Led_Matrix_driver.h"
#include "SevenSegment_driver.h"

void Clock_Init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <Clock_Init+0x34>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <Clock_Init+0x34>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOB_CLK_EN();
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <Clock_Init+0x34>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <Clock_Init+0x34>)
 80001ea:	f043 0302 	orr.w	r3, r3, #2
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_SYSCFG_CLK_EN();
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <Clock_Init+0x34>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <Clock_Init+0x34>)
 80001f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001fa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800

0800020c <main>:
		    ~0x42,
		    ~0x42,
		    ~0x42,
		    ~0x7E};

int main(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b0c2      	sub	sp, #264	@ 0x108
 8000210:	af02      	add	r7, sp, #8
	RCC->CR |= (1 << 16);                 // HSE ON
 8000212:	4b6c      	ldr	r3, [pc, #432]	@ (80003c4 <main+0x1b8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a6b      	ldr	r2, [pc, #428]	@ (80003c4 <main+0x1b8>)
 8000218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800021c:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << 17)));       // Wait ready
 800021e:	bf00      	nop
 8000220:	4b68      	ldr	r3, [pc, #416]	@ (80003c4 <main+0x1b8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <main+0x14>
	RCC->CFGR &= ~(0x3 << 0);
 800022c:	4b65      	ldr	r3, [pc, #404]	@ (80003c4 <main+0x1b8>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a64      	ldr	r2, [pc, #400]	@ (80003c4 <main+0x1b8>)
 8000232:	f023 0303 	bic.w	r3, r3, #3
 8000236:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x1 << 0);              // SYSCLK = HSE
 8000238:	4b62      	ldr	r3, [pc, #392]	@ (80003c4 <main+0x1b8>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a61      	ldr	r2, [pc, #388]	@ (80003c4 <main+0x1b8>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6093      	str	r3, [r2, #8]
	while (((RCC->CFGR >> 2) & 0x3) != 0x1);
 8000244:	bf00      	nop
 8000246:	4b5f      	ldr	r3, [pc, #380]	@ (80003c4 <main+0x1b8>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	f003 030c 	and.w	r3, r3, #12
 800024e:	2b04      	cmp	r3, #4
 8000250:	d1f9      	bne.n	8000246 <main+0x3a>

	Clock_Init();
 8000252:	f7ff ffbf 	bl	80001d4 <Clock_Init>

	GPIO_PinConfig_t rows[8] = {
 8000256:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800025a:	2280      	movs	r2, #128	@ 0x80
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fcad 	bl	8000bbe <memset>
 8000264:	2301      	movs	r3, #1
 8000266:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800026a:	2301      	movs	r3, #1
 800026c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8000270:	2301      	movs	r3, #1
 8000272:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8000276:	2302      	movs	r3, #2
 8000278:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 800027c:	2301      	movs	r3, #1
 800027e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8000282:	2303      	movs	r3, #3
 8000284:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 8000288:	2301      	movs	r3, #1
 800028a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800028e:	2304      	movs	r3, #4
 8000290:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
 8000294:	2301      	movs	r3, #1
 8000296:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
 800029a:	2305      	movs	r3, #5
 800029c:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 80002a0:	2301      	movs	r3, #1
 80002a2:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 80002a6:	2306      	movs	r3, #6
 80002a8:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 80002ac:	2301      	movs	r3, #1
 80002ae:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 80002b2:	2307      	movs	r3, #7
 80002b4:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
 80002b8:	2301      	movs	r3, #1
 80002ba:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
			{.GPIO_PinNumber = GPIO_PIN_5, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW},
			{.GPIO_PinNumber = GPIO_PIN_6, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW},
			{.GPIO_PinNumber = GPIO_PIN_7, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW},
	};

	GPIO_PinConfig_t cols[8] = {
 80002be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80002c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80002c6:	4618      	mov	r0, r3
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	461a      	mov	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f000 fc76 	bl	8000bbe <memset>
 80002d2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80002d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80002da:	2201      	movs	r2, #1
 80002dc:	805a      	strh	r2, [r3, #2]
 80002de:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80002e2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80002e6:	2201      	movs	r2, #1
 80002e8:	821a      	strh	r2, [r3, #16]
 80002ea:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80002ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80002f2:	2201      	movs	r2, #1
 80002f4:	825a      	strh	r2, [r3, #18]
 80002f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80002fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80002fe:	2202      	movs	r2, #2
 8000300:	841a      	strh	r2, [r3, #32]
 8000302:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000306:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800030a:	2201      	movs	r2, #1
 800030c:	845a      	strh	r2, [r3, #34]	@ 0x22
 800030e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000312:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000316:	2203      	movs	r2, #3
 8000318:	861a      	strh	r2, [r3, #48]	@ 0x30
 800031a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800031e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000322:	2201      	movs	r2, #1
 8000324:	865a      	strh	r2, [r3, #50]	@ 0x32
 8000326:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800032a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800032e:	2204      	movs	r2, #4
 8000330:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8000334:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000338:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800033c:	2201      	movs	r2, #1
 800033e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 8000342:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000346:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800034a:	2205      	movs	r2, #5
 800034c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8000350:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000354:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000358:	2201      	movs	r2, #1
 800035a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800035e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000362:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000366:	2206      	movs	r2, #6
 8000368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800036c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000370:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000374:	2201      	movs	r2, #1
 8000376:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800037a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800037e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000382:	2207      	movs	r2, #7
 8000384:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8000388:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800038c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000390:	2201      	movs	r2, #1
 8000392:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
			{.GPIO_PinNumber = GPIO_PIN_5, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW},
			{.GPIO_PinNumber = GPIO_PIN_6, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW},
			{.GPIO_PinNumber = GPIO_PIN_7, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW},
	};

	HAL_LedMatrix_Init(GPIOA, GPIOB, rows, 8, cols, 8);
 8000396:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800039a:	2308      	movs	r3, #8
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	463b      	mov	r3, r7
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2308      	movs	r3, #8
 80003a4:	4908      	ldr	r1, [pc, #32]	@ (80003c8 <main+0x1bc>)
 80003a6:	4809      	ldr	r0, [pc, #36]	@ (80003cc <main+0x1c0>)
 80003a8:	f000 f83e 	bl	8000428 <HAL_LedMatrix_Init>

	// 10s (20ms * 500)
	HAL_LedMatrix_DisplayFrame(arr, 500);
 80003ac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003b0:	4807      	ldr	r0, [pc, #28]	@ (80003d0 <main+0x1c4>)
 80003b2:	f000 f895 	bl	80004e0 <HAL_LedMatrix_DisplayFrame>

	while(1){
		HAL_LedMatrix_DisplayFrame(arr, 500);
 80003b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003ba:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <main+0x1c4>)
 80003bc:	f000 f890 	bl	80004e0 <HAL_LedMatrix_DisplayFrame>
 80003c0:	e7f9      	b.n	80003b6 <main+0x1aa>
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40020000 	.word	0x40020000
 80003d0:	20000000 	.word	0x20000000

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	@ (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	@ (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	@ (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 fbe5 	bl	8000bd0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000406:	f7ff ff01 	bl	800020c <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000418:	08000c38 	.word	0x08000c38
  ldr r2, =_sbss
 800041c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000420:	20000080 	.word	0x20000080

08000424 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <HAL_LedMatrix_Init>:
GPIO_PinConfig_t *G_rows, *G_cols;
uint8_t G_rows_number, G_cols_number;

void HAL_LedMatrix_Init(GPIO_TypeDef *GPIOx_rows, GPIO_TypeDef *GPIOx_cols,
						GPIO_PinConfig_t *Rows, uint8_t row_number,
						GPIO_PinConfig_t *Cols, uint8_t Col_number){
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	70fb      	strb	r3, [r7, #3]

	G_GPIOx_rows = GPIOx_rows;
 8000436:	4a24      	ldr	r2, [pc, #144]	@ (80004c8 <HAL_LedMatrix_Init+0xa0>)
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	6013      	str	r3, [r2, #0]
	G_GPIOx_cols = GPIOx_cols;
 800043c:	4a23      	ldr	r2, [pc, #140]	@ (80004cc <HAL_LedMatrix_Init+0xa4>)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	6013      	str	r3, [r2, #0]
	G_rows = Rows;
 8000442:	4a23      	ldr	r2, [pc, #140]	@ (80004d0 <HAL_LedMatrix_Init+0xa8>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6013      	str	r3, [r2, #0]
	G_cols = Cols;
 8000448:	4a22      	ldr	r2, [pc, #136]	@ (80004d4 <HAL_LedMatrix_Init+0xac>)
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	6013      	str	r3, [r2, #0]
	G_rows_number = row_number;
 800044e:	4a22      	ldr	r2, [pc, #136]	@ (80004d8 <HAL_LedMatrix_Init+0xb0>)
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	7013      	strb	r3, [r2, #0]
	G_cols_number = Col_number;
 8000454:	4a21      	ldr	r2, [pc, #132]	@ (80004dc <HAL_LedMatrix_Init+0xb4>)
 8000456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800045a:	7013      	strb	r3, [r2, #0]

	for(uint8_t i = 0; i < G_rows_number; i++){
 800045c:	2300      	movs	r3, #0
 800045e:	75fb      	strb	r3, [r7, #23]
 8000460:	e00b      	b.n	800047a <HAL_LedMatrix_Init+0x52>
		MCAL_GPIO_Init(G_GPIOx_rows, &Rows[i]);
 8000462:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <HAL_LedMatrix_Init+0xa0>)
 8000464:	6818      	ldr	r0, [r3, #0]
 8000466:	7dfb      	ldrb	r3, [r7, #23]
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	4619      	mov	r1, r3
 8000470:	f000 fa88 	bl	8000984 <MCAL_GPIO_Init>
	for(uint8_t i = 0; i < G_rows_number; i++){
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	3301      	adds	r3, #1
 8000478:	75fb      	strb	r3, [r7, #23]
 800047a:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <HAL_LedMatrix_Init+0xb0>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	7dfa      	ldrb	r2, [r7, #23]
 8000480:	429a      	cmp	r2, r3
 8000482:	d3ee      	bcc.n	8000462 <HAL_LedMatrix_Init+0x3a>
	}

	for(uint8_t i = 0; i < G_cols_number; i++){
 8000484:	2300      	movs	r3, #0
 8000486:	75bb      	strb	r3, [r7, #22]
 8000488:	e00b      	b.n	80004a2 <HAL_LedMatrix_Init+0x7a>
		MCAL_GPIO_Init(G_GPIOx_cols, &Cols[i]);
 800048a:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <HAL_LedMatrix_Init+0xa4>)
 800048c:	6818      	ldr	r0, [r3, #0]
 800048e:	7dbb      	ldrb	r3, [r7, #22]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	6a3a      	ldr	r2, [r7, #32]
 8000494:	4413      	add	r3, r2
 8000496:	4619      	mov	r1, r3
 8000498:	f000 fa74 	bl	8000984 <MCAL_GPIO_Init>
	for(uint8_t i = 0; i < G_cols_number; i++){
 800049c:	7dbb      	ldrb	r3, [r7, #22]
 800049e:	3301      	adds	r3, #1
 80004a0:	75bb      	strb	r3, [r7, #22]
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <HAL_LedMatrix_Init+0xb4>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	7dba      	ldrb	r2, [r7, #22]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d3ee      	bcc.n	800048a <HAL_LedMatrix_Init+0x62>
	}

	// SysTick Init
	SysTick_Config_t SysTick_CFG;

	SysTick_CFG.SysTick_InterruptEnable = SysTick_Interrupt_DIS;
 80004ac:	2300      	movs	r3, #0
 80004ae:	753b      	strb	r3, [r7, #20]
	SysTick_CFG.SysTick_CLKSource = SysTick_CLK_AHB_8;
 80004b0:	2300      	movs	r3, #0
 80004b2:	757b      	strb	r3, [r7, #21]
	MCAL_SysTicK_Init(&SysTick_CFG);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 f9c3 	bl	8000844 <MCAL_SysTicK_Init>
}
 80004be:	bf00      	nop
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000024 	.word	0x20000024
 80004cc:	20000028 	.word	0x20000028
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000030 	.word	0x20000030
 80004d8:	20000034 	.word	0x20000034
 80004dc:	20000035 	.word	0x20000035

080004e0 <HAL_LedMatrix_DisplayFrame>:

void HAL_LedMatrix_DisplayFrame(uint8_t frame[], uint32_t FrameDelay){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	for(uint32_t j = 0; j < FrameDelay; j++){
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	e01d      	b.n	800052c <HAL_LedMatrix_DisplayFrame+0x4c>

		for(uint8_t i = 0; i < G_cols_number; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	72fb      	strb	r3, [r7, #11]
 80004f4:	e012      	b.n	800051c <HAL_LedMatrix_DisplayFrame+0x3c>

			// Set Row Value
			HAL_LedMatrix_SetRowValue(frame[i]);
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f83c 	bl	800057c <HAL_LedMatrix_SetRowValue>

			// Enable Current Col
			HAL_LedMatrix_EnableCurrentCol(i);
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f81c 	bl	8000544 <HAL_LedMatrix_EnableCurrentCol>

			MCAL_SysTicK_SetDelay_ms(ScanTime);
 800050c:	2002      	movs	r0, #2
 800050e:	f000 f9fb 	bl	8000908 <MCAL_SysTicK_SetDelay_ms>

			// Disable All Cols
			HAL_LedMatrix_DisableAllCol();
 8000512:	f000 f861 	bl	80005d8 <HAL_LedMatrix_DisableAllCol>
		for(uint8_t i = 0; i < G_cols_number; i++){
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	3301      	adds	r3, #1
 800051a:	72fb      	strb	r3, [r7, #11]
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <HAL_LedMatrix_DisplayFrame+0x60>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	429a      	cmp	r2, r3
 8000524:	d3e7      	bcc.n	80004f6 <HAL_LedMatrix_DisplayFrame+0x16>
	for(uint32_t j = 0; j < FrameDelay; j++){
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3301      	adds	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3dd      	bcc.n	80004f0 <HAL_LedMatrix_DisplayFrame+0x10>
		}
	}
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000035 	.word	0x20000035

08000544 <HAL_LedMatrix_EnableCurrentCol>:

static void HAL_LedMatrix_EnableCurrentCol(uint8_t col_number){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(G_GPIOx_cols, G_cols[G_cols_number].GPIO_PinNumber, 0);
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_LedMatrix_EnableCurrentCol+0x2c>)
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <HAL_LedMatrix_EnableCurrentCol+0x30>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_LedMatrix_EnableCurrentCol+0x34>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	4413      	add	r3, r2
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2200      	movs	r2, #0
 8000562:	4619      	mov	r1, r3
 8000564:	f000 fb06 	bl	8000b74 <MCAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	20000030 	.word	0x20000030
 8000578:	20000035 	.word	0x20000035

0800057c <HAL_LedMatrix_SetRowValue>:

static void HAL_LedMatrix_SetRowValue(uint8_t row_value){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< G_rows_number; i++){
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e015      	b.n	80005b8 <HAL_LedMatrix_SetRowValue+0x3c>
		MCAL_GPIO_WritePin(G_GPIOx_rows, G_rows[i].GPIO_PinNumber, GET_BIT(row_value,i));
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <HAL_LedMatrix_SetRowValue+0x50>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_LedMatrix_SetRowValue+0x54>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	4413      	add	r3, r2
 800059a:	8819      	ldrh	r1, [r3, #0]
 800059c:	79fa      	ldrb	r2, [r7, #7]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	fa42 f303 	asr.w	r3, r2, r3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	f000 fae1 	bl	8000b74 <MCAL_GPIO_WritePin>
	for(uint8_t i = 0; i< G_rows_number; i++){
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_LedMatrix_SetRowValue+0x58>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	7bfa      	ldrb	r2, [r7, #15]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d3e4      	bcc.n	800058c <HAL_LedMatrix_SetRowValue+0x10>
	}
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000024 	.word	0x20000024
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	20000034 	.word	0x20000034

080005d8 <HAL_LedMatrix_DisableAllCol>:

static void HAL_LedMatrix_DisableAllCol(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i< G_cols_number; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	e00e      	b.n	8000602 <HAL_LedMatrix_DisableAllCol+0x2a>
		MCAL_GPIO_WritePin(G_GPIOx_cols, G_cols[i].GPIO_PinNumber, 1);
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_LedMatrix_DisableAllCol+0x40>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_LedMatrix_DisableAllCol+0x44>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	4413      	add	r3, r2
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f000 fabc 	bl	8000b74 <MCAL_GPIO_WritePin>
	for(uint8_t i = 0; i< G_cols_number; i++){
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	3301      	adds	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <HAL_LedMatrix_DisableAllCol+0x48>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	79fa      	ldrb	r2, [r7, #7]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3eb      	bcc.n	80005e4 <HAL_LedMatrix_DisableAllCol+0xc>
	}
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028
 800061c:	20000030 	.word	0x20000030
 8000620:	20000035 	.word	0x20000035

08000624 <EXTI0_IRQHandler>:
/*
 * ===================================
 * 			 ISR  Functions
 * ===================================
 */
void EXTI0_IRQHandler(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 0);
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <EXTI0_IRQHandler+0x1c>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <EXTI0_IRQHandler+0x1c>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[0]();
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <EXTI0_IRQHandler+0x20>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4798      	blx	r3
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40013c00 	.word	0x40013c00
 8000644:	20000038 	.word	0x20000038

08000648 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 1);
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <EXTI1_IRQHandler+0x1c>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <EXTI1_IRQHandler+0x1c>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[1]();
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <EXTI1_IRQHandler+0x20>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40013c00 	.word	0x40013c00
 8000668:	20000038 	.word	0x20000038

0800066c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 2);
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <EXTI2_IRQHandler+0x1c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <EXTI2_IRQHandler+0x1c>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[2]();
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <EXTI2_IRQHandler+0x20>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	4798      	blx	r3
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40013c00 	.word	0x40013c00
 800068c:	20000038 	.word	0x20000038

08000690 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 3);
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <EXTI3_IRQHandler+0x1c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <EXTI3_IRQHandler+0x1c>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[3]();
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <EXTI3_IRQHandler+0x20>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4798      	blx	r3
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40013c00 	.word	0x40013c00
 80006b0:	20000038 	.word	0x20000038

080006b4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 4);
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <EXTI4_IRQHandler+0x1c>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <EXTI4_IRQHandler+0x1c>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[4]();
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <EXTI4_IRQHandler+0x20>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4798      	blx	r3
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40013c00 	.word	0x40013c00
 80006d4:	20000038 	.word	0x20000038

080006d8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 5 ) {	EXTI->PR |=  (1 << 5)    ; G_IRQ_CallBack[5]() ;   }
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <EXTI9_5_IRQHandler+0x22>
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <EXTI9_5_IRQHandler+0xa4>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4798      	blx	r3
	if (EXTI->PR & 1 << 6 ) {	EXTI->PR |=  (1 << 6)    ; G_IRQ_CallBack[6]() ;   }
 80006fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <EXTI9_5_IRQHandler+0x40>
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <EXTI9_5_IRQHandler+0xa4>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4798      	blx	r3
	if (EXTI->PR & 1 << 7 ) {	EXTI->PR |=  (1 << 7)    ; G_IRQ_CallBack[7]() ;   }
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000720:	2b00      	cmp	r3, #0
 8000722:	d008      	beq.n	8000736 <EXTI9_5_IRQHandler+0x5e>
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 800072a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072e:	6153      	str	r3, [r2, #20]
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <EXTI9_5_IRQHandler+0xa4>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4798      	blx	r3
	if (EXTI->PR & 1 << 8 ) {	EXTI->PR |=  (1 << 8)    ; G_IRQ_CallBack[8]() ;   }
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <EXTI9_5_IRQHandler+0x7c>
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <EXTI9_5_IRQHandler+0xa4>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4798      	blx	r3
	if (EXTI->PR & 1 << 9 ) {	EXTI->PR |=  (1 << 9)    ; G_IRQ_CallBack[9]() ;   }
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800075c:	2b00      	cmp	r3, #0
 800075e:	d008      	beq.n	8000772 <EXTI9_5_IRQHandler+0x9a>
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800076a:	6153      	str	r3, [r2, #20]
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <EXTI9_5_IRQHandler+0xa4>)
 800076e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000770:	4798      	blx	r3
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40013c00 	.word	0x40013c00
 800077c:	20000038 	.word	0x20000038

08000780 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 10 ) {	EXTI->PR |=  (1 << 10)    ; G_IRQ_CallBack[10]() ;   }
 8000784:	4b2d      	ldr	r3, [pc, #180]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <EXTI15_10_IRQHandler+0x22>
 8000790:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	4a29      	ldr	r2, [pc, #164]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800079a:	6153      	str	r3, [r2, #20]
 800079c:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <EXTI15_10_IRQHandler+0xc0>)
 800079e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007a0:	4798      	blx	r3
	if (EXTI->PR & 1 << 11 ) {	EXTI->PR |=  (1 << 11)    ; G_IRQ_CallBack[11]() ;   }
 80007a2:	4b26      	ldr	r3, [pc, #152]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d008      	beq.n	80007c0 <EXTI15_10_IRQHandler+0x40>
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a22      	ldr	r2, [pc, #136]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <EXTI15_10_IRQHandler+0xc0>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	4798      	blx	r3
	if (EXTI->PR & 1 << 12 ) {	EXTI->PR |=  (1 << 12)    ; G_IRQ_CallBack[12]() ;   }
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <EXTI15_10_IRQHandler+0x5e>
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007d6:	6153      	str	r3, [r2, #20]
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <EXTI15_10_IRQHandler+0xc0>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	4798      	blx	r3
	if (EXTI->PR & 1 << 13 ) {	EXTI->PR |=  (1 << 13)    ; G_IRQ_CallBack[13]() ;   }
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <EXTI15_10_IRQHandler+0x7c>
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a13      	ldr	r2, [pc, #76]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <EXTI15_10_IRQHandler+0xc0>)
 80007f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007fa:	4798      	blx	r3
	if (EXTI->PR & 1 << 14 ) {	EXTI->PR |=  (1 << 14)    ; G_IRQ_CallBack[14]() ;   }
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000804:	2b00      	cmp	r3, #0
 8000806:	d008      	beq.n	800081a <EXTI15_10_IRQHandler+0x9a>
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4a0b      	ldr	r2, [pc, #44]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000812:	6153      	str	r3, [r2, #20]
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <EXTI15_10_IRQHandler+0xc0>)
 8000816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000818:	4798      	blx	r3
	if (EXTI->PR & 1 << 15 ) {	EXTI->PR |=  (1 << 15)    ; G_IRQ_CallBack[15]() ;   }
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d008      	beq.n	8000838 <EXTI15_10_IRQHandler+0xb8>
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <EXTI15_10_IRQHandler+0xbc>)
 800082c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <EXTI15_10_IRQHandler+0xc0>)
 8000834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000836:	4798      	blx	r3
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013c00 	.word	0x40013c00
 8000840:	20000038 	.word	0x20000038

08000844 <MCAL_SysTicK_Init>:
#include "stm32f401xc_SysTick_driver.h"

static void(* GP_Function_CallBack)(void) = NULL;
static uint8_t G_SingleFlag = 0;

void MCAL_SysTicK_Init(SysTick_Config_t *SysTick_CFG){
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	// Clear SysTick Timer by clear Enable
	SysTick->CTRL &= ~(1 << 0);
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]

	/// Interrupt Enable/Disable
	if(SysTick_Interrupt_EN == (SysTick_CFG->SysTick_InterruptEnable)){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d106      	bne.n	800086e <MCAL_SysTicK_Init+0x2a>
		SysTick->CTRL |= (1 << 1);
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e005      	b.n	800087a <MCAL_SysTicK_Init+0x36>
	}
	else{
		SysTick->CTRL &= ~(1 << 1);
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000874:	f023 0302 	bic.w	r3, r3, #2
 8000878:	6013      	str	r3, [r2, #0]
	}

	// Select Clock source AHB or AHB/8
	if(SysTick_CLK_AHB == (SysTick_CFG->SysTick_CLKSource)){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <MCAL_SysTicK_Init+0x4c>
		SysTick->CTRL |= (1 << 2);
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6013      	str	r3, [r2, #0]
	}
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
		SysTick->CTRL &= ~(1 << 2);
	}
}
 800088e:	e009      	b.n	80008a4 <MCAL_SysTicK_Init+0x60>
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d105      	bne.n	80008a4 <MCAL_SysTicK_Init+0x60>
		SysTick->CTRL &= ~(1 << 2);
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <MCAL_SysTicK_Init+0x6c>)
 800089e:	f023 0304 	bic.w	r3, r3, #4
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <MCAL_SysTicK_StartTimer>:

void MCAL_SysTicK_StartTimer(uint32_t ReloadValue){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	// Load Timer with ReloadValue
	SysTick->LOAD = ReloadValue - 1;
 80008bc:	4a09      	ldr	r2, [pc, #36]	@ (80008e4 <MCAL_SysTicK_StartTimer+0x30>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	6053      	str	r3, [r2, #4]

	// Reset Timer
	SysTick->VAL = 0;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MCAL_SysTicK_StartTimer+0x30>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]

	// Start Timer
	SysTick->CTRL |= (1 << 0);
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MCAL_SysTicK_StartTimer+0x30>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <MCAL_SysTicK_StartTimer+0x30>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <MCAL_SysTicK_StopTimer>:

void MCAL_SysTicK_StopTimer(void){
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	// Stop SysTick Counter
	SysTick->CTRL &= ~(1 << 0);
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <MCAL_SysTicK_StopTimer+0x1c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <MCAL_SysTicK_StopTimer+0x1c>)
 80008f2:	f023 0301 	bic.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <MCAL_SysTicK_SetDelay_ms>:

void MCAL_SysTicK_SetDelay_ms(uint32_t Delay_Time_ms){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	// When Select  Clock Source = 25Mhz / 8
	uint32_t ticks = Delay_Time_ms * 3125;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	60fb      	str	r3, [r7, #12]

	// Reset Timer
	SysTick->VAL = 0;
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <MCAL_SysTicK_SetDelay_ms+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]

	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d010      	beq.n	800094a <MCAL_SysTicK_SetDelay_ms+0x42>
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800092e:	4293      	cmp	r3, r2
 8000930:	d20b      	bcs.n	800094a <MCAL_SysTicK_SetDelay_ms+0x42>
		MCAL_SysTicK_StartTimer(ticks);
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff ffbe 	bl	80008b4 <MCAL_SysTicK_StartTimer>

		// Wait till Timer Flag is raised
		while(0 == GET_BIT(SysTick->CTRL, COUNTFLAG));
 8000938:	bf00      	nop
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MCAL_SysTicK_SetDelay_ms+0x4c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f9      	beq.n	800093a <MCAL_SysTicK_SetDelay_ms+0x32>
		MCAL_SysTicK_StopTimer();
 8000946:	f7ff ffcf 	bl	80008e8 <MCAL_SysTicK_StopTimer>
	}
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	e000e010 	.word	0xe000e010

08000958 <SysTick_Handler>:
	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
		MCAL_SysTicK_StartTimer(ticks);
	}
}

void SysTick_Handler(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	if(GP_Function_CallBack != NULL){
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <SysTick_Handler+0x24>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <SysTick_Handler+0x12>
		GP_Function_CallBack();
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <SysTick_Handler+0x24>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4798      	blx	r3

	}

	if(1 == G_SingleFlag){
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <SysTick_Handler+0x28>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <SysTick_Handler+0x1e>
		MCAL_SysTicK_StopTimer();
 8000972:	f7ff ffb9 	bl	80008e8 <MCAL_SysTicK_StopTimer>
	}

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000078 	.word	0x20000078
 8000980:	2000007c 	.word	0x2000007c

08000984 <MCAL_GPIO_Init>:
  * @param [in] 	- pinConfig: pointer to GPIO_PinConfig_t structure that contains the config info for pin
  * @retval 		- none
  * Note 			- stm32f103xx have GPIO A,B,C,D,E but this package has only A and B fully and some of C and D
  */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
    uint32_t pin = PinConfig->GPIO_PinNumber;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	60fb      	str	r3, [r7, #12]

    // Clear old data from registers
    GPIOx->MODER   &= ~(0x3 << (2 * pin));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	2103      	movs	r1, #3
 800099e:	fa01 f202 	lsl.w	r2, r1, r2
 80009a2:	43d2      	mvns	r2, r2
 80009a4:	401a      	ands	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
    GPIOx->OTYPER  &= ~(1   << pin);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2101      	movs	r1, #1
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	fa01 f202 	lsl.w	r2, r1, r2
 80009b6:	43d2      	mvns	r2, r2
 80009b8:	401a      	ands	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	605a      	str	r2, [r3, #4]
    GPIOx->OSPEEDR &= ~(0x3 << (2 * pin));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	2103      	movs	r1, #3
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	609a      	str	r2, [r3, #8]
    GPIOx->PUPDR   &= ~(0x3 << (2 * pin));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	2103      	movs	r1, #3
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	43d2      	mvns	r2, r2
 80009e4:	401a      	ands	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	60da      	str	r2, [r3, #12]

    // Set new config
    switch (PinConfig->GPIO_MODE)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	f000 8096 	beq.w	8000b20 <MCAL_GPIO_Init+0x19c>
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	f300 80aa 	bgt.w	8000b4e <MCAL_GPIO_Init+0x1ca>
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d002      	beq.n	8000a04 <MCAL_GPIO_Init+0x80>
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d02e      	beq.n	8000a60 <MCAL_GPIO_Init+0xdc>
 8000a02:	e0a4      	b.n	8000b4e <MCAL_GPIO_Init+0x1ca>
    {
    case GPIO_MODE_OP:   // General purpose output
        GPIOx->MODER   |= (0x1 << (2 * pin));   // 01
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	8912      	ldrh	r2, [r2, #8]
 8000a20:	4611      	mov	r1, r2
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	8992      	ldrh	r2, [r2, #12]
 8000a36:	4611      	mov	r1, r2
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	8952      	ldrh	r2, [r2, #10]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	0052      	lsls	r2, r2, #1
 8000a54:	fa01 f202 	lsl.w	r2, r1, r2
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60da      	str	r2, [r3, #12]
        break;
 8000a5e:	e083      	b.n	8000b68 <MCAL_GPIO_Init+0x1e4>

        /* Still Need to be tested */
    case GPIO_MODE_AF:   // Alternate function
        GPIOx->MODER   |= (0x2 << (2 * pin));   // 10
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	0052      	lsls	r2, r2, #1
 8000a68:	2102      	movs	r1, #2
 8000a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	8912      	ldrh	r2, [r2, #8]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	8992      	ldrh	r2, [r2, #12]
 8000a92:	4611      	mov	r1, r2
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	0052      	lsls	r2, r2, #1
 8000a98:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	8952      	ldrh	r2, [r2, #10]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	0052      	lsls	r2, r2, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60da      	str	r2, [r3, #12]

        // Configure AF (AFRL [0..7], AFRH [8..15])
        if (pin < 8) {
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	d816      	bhi.n	8000aee <MCAL_GPIO_Init+0x16a>
            GPIOx->AFRL[0] &= ~(0xF << (4 * pin));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	210f      	movs	r1, #15
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	43d2      	mvns	r2, r2
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	621a      	str	r2, [r3, #32]
            GPIOx->AFRL[0] |= (PinConfig->GPIO_AF << (4 * pin));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a1a      	ldr	r2, [r3, #32]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	6859      	ldr	r1, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	621a      	str	r2, [r3, #32]
        } else {
            GPIOx->AFRH[1] &= ~(0xF << (4 * (pin - 8)));
            GPIOx->AFRH[1] |= (PinConfig->GPIO_AF << (4 * (pin - 8)));
        }
        break;
 8000aec:	e03c      	b.n	8000b68 <MCAL_GPIO_Init+0x1e4>
            GPIOx->AFRH[1] &= ~(0xF << (4 * (pin - 8)));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	3a08      	subs	r2, #8
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	210f      	movs	r1, #15
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	43d2      	mvns	r2, r2
 8000b00:	401a      	ands	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	645a      	str	r2, [r3, #68]	@ 0x44
            GPIOx->AFRH[1] |= (PinConfig->GPIO_AF << (4 * (pin - 8)));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3b08      	subs	r3, #8
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8000b1e:	e023      	b.n	8000b68 <MCAL_GPIO_Init+0x1e4>

    case GPIO_MODE_Analog:   // Analog
        GPIOx->MODER   |= (0x3 << (2 * pin));   // 11
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	2103      	movs	r1, #3
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	8952      	ldrh	r2, [r2, #10]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	fa01 f202 	lsl.w	r2, r1, r2
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60da      	str	r2, [r3, #12]
        break;
 8000b4c:	e00c      	b.n	8000b68 <MCAL_GPIO_Init+0x1e4>

    case GPIO_MODE_IP:   // Input
    default:
        // Input mode (00)
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	8952      	ldrh	r2, [r2, #10]
 8000b56:	4611      	mov	r1, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]
        break;
 8000b66:	bf00      	nop
    }
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <MCAL_GPIO_WritePin>:
  * @param [in]  	- pinNo: can be (0...15 depends on GPIOx) to select pin number
  * @param [in]  	- Value: the sate of the pin (can be two values based on @ref GPIO_PIN_state)
  * @retval 		- None
  * Note 			- None
  */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint16_t value){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	803b      	strh	r3, [r7, #0]
	if(value == GPIO_PIN_SET){
 8000b84:	883b      	ldrh	r3, [r7, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d109      	bne.n	8000b9e <MCAL_GPIO_WritePin+0x2a>
		// BSy: Port x Set bit y (y= 0 .. 15)
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
        GPIOx->ODR |= (1 << PinNumber);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	2101      	movs	r1, #1
 8000b92:	fa01 f202 	lsl.w	r2, r1, r2
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	615a      	str	r2, [r3, #20]
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bit
        GPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000b9c:	e009      	b.n	8000bb2 <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1 << PinNumber);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8000baa:	43d2      	mvns	r2, r2
 8000bac:	401a      	ands	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	615a      	str	r2, [r3, #20]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <memset>:
 8000bbe:	4402      	add	r2, r0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d100      	bne.n	8000bc8 <memset+0xa>
 8000bc6:	4770      	bx	lr
 8000bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8000bcc:	e7f9      	b.n	8000bc2 <memset+0x4>
	...

08000bd0 <__libc_init_array>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8000c08 <__libc_init_array+0x38>)
 8000bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8000c0c <__libc_init_array+0x3c>)
 8000bd6:	1b64      	subs	r4, r4, r5
 8000bd8:	10a4      	asrs	r4, r4, #2
 8000bda:	2600      	movs	r6, #0
 8000bdc:	42a6      	cmp	r6, r4
 8000bde:	d109      	bne.n	8000bf4 <__libc_init_array+0x24>
 8000be0:	4d0b      	ldr	r5, [pc, #44]	@ (8000c10 <__libc_init_array+0x40>)
 8000be2:	4c0c      	ldr	r4, [pc, #48]	@ (8000c14 <__libc_init_array+0x44>)
 8000be4:	f000 f818 	bl	8000c18 <_init>
 8000be8:	1b64      	subs	r4, r4, r5
 8000bea:	10a4      	asrs	r4, r4, #2
 8000bec:	2600      	movs	r6, #0
 8000bee:	42a6      	cmp	r6, r4
 8000bf0:	d105      	bne.n	8000bfe <__libc_init_array+0x2e>
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf8:	4798      	blx	r3
 8000bfa:	3601      	adds	r6, #1
 8000bfc:	e7ee      	b.n	8000bdc <__libc_init_array+0xc>
 8000bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c02:	4798      	blx	r3
 8000c04:	3601      	adds	r6, #1
 8000c06:	e7f2      	b.n	8000bee <__libc_init_array+0x1e>
 8000c08:	08000c30 	.word	0x08000c30
 8000c0c:	08000c30 	.word	0x08000c30
 8000c10:	08000c30 	.word	0x08000c30
 8000c14:	08000c34 	.word	0x08000c34

08000c18 <_init>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr

08000c24 <_fini>:
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	bf00      	nop
 8000c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2a:	bc08      	pop	{r3}
 8000c2c:	469e      	mov	lr, r3
 8000c2e:	4770      	bx	lr
