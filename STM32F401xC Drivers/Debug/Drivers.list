
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c40  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012f58  08000dd4  08000dd4  00001dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d2c  08013d2c  00015004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08013d2c  08013d2c  00015004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08013d2c  08013d2c  00015004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d2c  08013d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d30  08013d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08013d34  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000004  08013d38  00015004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08013d38  00015070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001879  00000000  00000000  00015034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000637  00000000  00000000  000168ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000ae6  00000000  00000000  00016ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  000179d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  00017ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001276  00000000  00000000  00017d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010c2  00000000  00000000  00018f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005cbe  00000000  00000000  0001a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001fd0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c8  00000000  00000000  0001fd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000dbc 	.word	0x08000dbc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000dbc 	.word	0x08000dbc

080001d4 <Clock_Init>:
#include "Led_Matrix_driver.h"
#include "SevenSegment_driver.h"
#include "DAC_driver.h"
#include "sound.h"

void Clock_Init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <Clock_Init+0x34>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <Clock_Init+0x34>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOB_CLK_EN();
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <Clock_Init+0x34>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <Clock_Init+0x34>)
 80001ea:	f043 0302 	orr.w	r3, r3, #2
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_SYSCFG_CLK_EN();
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <Clock_Init+0x34>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <Clock_Init+0x34>)
 80001f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001fa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800

0800020c <GPIO_Init>:

void GPIO_Init(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b0a0      	sub	sp, #128	@ 0x80
 8000210:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t sound_pins[8] = {
 8000212:	463b      	mov	r3, r7
 8000214:	2280      	movs	r2, #128	@ 0x80
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fda3 	bl	8000d64 <memset>
 800021e:	2301      	movs	r3, #1
 8000220:	807b      	strh	r3, [r7, #2]
 8000222:	2301      	movs	r3, #1
 8000224:	823b      	strh	r3, [r7, #16]
 8000226:	2301      	movs	r3, #1
 8000228:	827b      	strh	r3, [r7, #18]
 800022a:	2302      	movs	r3, #2
 800022c:	843b      	strh	r3, [r7, #32]
 800022e:	2301      	movs	r3, #1
 8000230:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000232:	2303      	movs	r3, #3
 8000234:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000236:	2301      	movs	r3, #1
 8000238:	867b      	strh	r3, [r7, #50]	@ 0x32
 800023a:	2304      	movs	r3, #4
 800023c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000240:	2301      	movs	r3, #1
 8000242:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8000246:	2305      	movs	r3, #5
 8000248:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800024c:	2301      	movs	r3, #1
 800024e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8000252:	2306      	movs	r3, #6
 8000254:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000258:	2301      	movs	r3, #1
 800025a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800025e:	2307      	movs	r3, #7
 8000260:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 8000264:	2301      	movs	r3, #1
 8000266:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
			{.GPIO_PinNumber = GPIO_PIN_5, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW, .GPIO_PU_PD = GPIO__PU_PD_NONE},
			{.GPIO_PinNumber = GPIO_PIN_6, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW, .GPIO_PU_PD = GPIO__PU_PD_NONE},
			{.GPIO_PinNumber = GPIO_PIN_7, .GPIO_MODE = GPIO_MODE_OP, .GPIO_TYPE = GPIO_TYPE_PP, .GPIO_Output_Speed = GPIO_SPEED_LOW, .GPIO_PU_PD = GPIO__PU_PD_NONE},
	};

	HAL_DAC_Init(GPIOA, sound_pins, 8);
 800026a:	463b      	mov	r3, r7
 800026c:	2208      	movs	r2, #8
 800026e:	4619      	mov	r1, r3
 8000270:	4803      	ldr	r0, [pc, #12]	@ (8000280 <GPIO_Init+0x74>)
 8000272:	f000 f8b9 	bl	80003e8 <HAL_DAC_Init>
}
 8000276:	bf00      	nop
 8000278:	3780      	adds	r7, #128	@ 0x80
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020000 	.word	0x40020000

08000284 <EXTI_DAC_Handler>:

void EXTI_DAC_Handler(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000288:	2107      	movs	r1, #7
 800028a:	480d      	ldr	r0, [pc, #52]	@ (80002c0 <EXTI_DAC_Handler+0x3c>)
 800028c:	f000 fd55 	bl	8000d3a <MCAL_GPIO_TogglePin>

	static uint32_t iterator = 0;

	HAL_DAC_SendAudioSample(test_raw, iterator);
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <EXTI_DAC_Handler+0x40>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4619      	mov	r1, r3
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <EXTI_DAC_Handler+0x44>)
 8000298:	f000 f8d2 	bl	8000440 <HAL_DAC_SendAudioSample>

	if (iterator < test_raw_len){
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <EXTI_DAC_Handler+0x40>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <EXTI_DAC_Handler+0x48>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d205      	bcs.n	80002b4 <EXTI_DAC_Handler+0x30>
		iterator++;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <EXTI_DAC_Handler+0x40>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <EXTI_DAC_Handler+0x40>)
 80002b0:	6013      	str	r3, [r2, #0]
	}
	else{
		iterator = 0;
	}
}
 80002b2:	e002      	b.n	80002ba <EXTI_DAC_Handler+0x36>
		iterator = 0;
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <EXTI_DAC_Handler+0x40>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400
 80002c4:	20000020 	.word	0x20000020
 80002c8:	08000de0 	.word	0x08000de0
 80002cc:	20000000 	.word	0x20000000

080002d0 <EXTI_GPIOInit>:

void EXTI_GPIOInit(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
	EXTI_PinConfig_t EXTI_PinConf;

	EXTI_PinConf.EXTI_PIN = EXTI6_PB6;
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <EXTI_GPIOInit+0x30>)
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80002de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_PinConf.EXTI_Enable = EXTI_IRQ_EN;
 80002e2:	2301      	movs	r3, #1
 80002e4:	763b      	strb	r3, [r7, #24]
	EXTI_PinConf.EXTI_EdgeSelect = EXTI_TRIGGER_RISING;
 80002e6:	2300      	movs	r3, #0
 80002e8:	767b      	strb	r3, [r7, #25]
	EXTI_PinConf.P_IRQ_CallBack = EXTI_DAC_Handler;
 80002ea:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <EXTI_GPIOInit+0x34>)
 80002ec:	61fb      	str	r3, [r7, #28]
	MCAL_EXTI_GPIO_Init(&EXTI_PinConf);
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fa8a 	bl	800080c <MCAL_EXTI_GPIO_Init>
}
 80002f8:	bf00      	nop
 80002fa:	3720      	adds	r7, #32
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08000dd4 	.word	0x08000dd4
 8000304:	08000285 	.word	0x08000285

08000308 <TestLed_Init>:

void TestLed_Init(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t test_led;

	test_led.GPIO_PinNumber = GPIO_PIN_7;
 800030e:	2307      	movs	r3, #7
 8000310:	803b      	strh	r3, [r7, #0]
	test_led.GPIO_MODE = GPIO_MODE_OP;
 8000312:	2301      	movs	r3, #1
 8000314:	807b      	strh	r3, [r7, #2]
	test_led.GPIO_TYPE = GPIO_TYPE_PP;
 8000316:	2300      	movs	r3, #0
 8000318:	813b      	strh	r3, [r7, #8]
	test_led.GPIO_Output_Speed = GPIO_SPEED_LOW;
 800031a:	2300      	movs	r3, #0
 800031c:	81bb      	strh	r3, [r7, #12]
	test_led.GPIO_PU_PD = GPIO__PU_PD_NONE;
 800031e:	2300      	movs	r3, #0
 8000320:	817b      	strh	r3, [r7, #10]

	MCAL_GPIO_Init(GPIOB, &test_led);
 8000322:	463b      	mov	r3, r7
 8000324:	4619      	mov	r1, r3
 8000326:	4803      	ldr	r0, [pc, #12]	@ (8000334 <TestLed_Init+0x2c>)
 8000328:	f000 fbea 	bl	8000b00 <MCAL_GPIO_Init>
}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40020400 	.word	0x40020400

08000338 <main>:

int main(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	// Select AHB / 8 temporary until i make driver or it
	RCC->CR |= (1 << 16);
 800033c:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <main+0x58>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <main+0x58>)
 8000342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000346:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << 17)));
 8000348:	bf00      	nop
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <main+0x58>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f9      	beq.n	800034a <main+0x12>
	RCC->CFGR &= ~(0x3 << 0);
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <main+0x58>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <main+0x58>)
 800035c:	f023 0303 	bic.w	r3, r3, #3
 8000360:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x1 << 0);
 8000362:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <main+0x58>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <main+0x58>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6093      	str	r3, [r2, #8]
	while (((RCC->CFGR >> 2) & 0x3) != 0x1);
 800036e:	bf00      	nop
 8000370:	4b07      	ldr	r3, [pc, #28]	@ (8000390 <main+0x58>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f003 030c 	and.w	r3, r3, #12
 8000378:	2b04      	cmp	r3, #4
 800037a:	d1f9      	bne.n	8000370 <main+0x38>

	Clock_Init();
 800037c:	f7ff ff2a 	bl	80001d4 <Clock_Init>
	GPIO_Init();
 8000380:	f7ff ff44 	bl	800020c <GPIO_Init>
	EXTI_GPIOInit();
 8000384:	f7ff ffa4 	bl	80002d0 <EXTI_GPIOInit>
	TestLed_Init();
 8000388:	f7ff ffbe 	bl	8000308 <TestLed_Init>

	while(1);
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <main+0x54>
 8000390:	40023800 	.word	0x40023800

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	@ (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	@ (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	@ (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 fcd7 	bl	8000d74 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003c6:	f7ff ffb7 	bl	8000338 <main>

080003ca <LoopForever>:

LoopForever:
  b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d8:	08013d34 	.word	0x08013d34
  ldr r2, =_sbss
 80003dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e0:	20000070 	.word	0x20000070

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <HAL_DAC_Init>:

#include "DAC_driver.h"

GPIO_TypeDef *G_GPIOx;

void HAL_DAC_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t sound_pins[], uint8_t pins_number){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	4613      	mov	r3, r2
 80003f4:	71fb      	strb	r3, [r7, #7]
	G_GPIOx = GPIOx;
 80003f6:	4a11      	ldr	r2, [pc, #68]	@ (800043c <HAL_DAC_Init+0x54>)
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6013      	str	r3, [r2, #0]

	for(uint8_t i = 0; i < pins_number; i++){
 80003fc:	2300      	movs	r3, #0
 80003fe:	75fb      	strb	r3, [r7, #23]
 8000400:	e00a      	b.n	8000418 <HAL_DAC_Init+0x30>
		MCAL_GPIO_Init(GPIOx, &sound_pins[i]);
 8000402:	7dfb      	ldrb	r3, [r7, #23]
 8000404:	011b      	lsls	r3, r3, #4
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	4413      	add	r3, r2
 800040a:	4619      	mov	r1, r3
 800040c:	68f8      	ldr	r0, [r7, #12]
 800040e:	f000 fb77 	bl	8000b00 <MCAL_GPIO_Init>
	for(uint8_t i = 0; i < pins_number; i++){
 8000412:	7dfb      	ldrb	r3, [r7, #23]
 8000414:	3301      	adds	r3, #1
 8000416:	75fb      	strb	r3, [r7, #23]
 8000418:	7dfa      	ldrb	r2, [r7, #23]
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	429a      	cmp	r2, r3
 800041e:	d3f0      	bcc.n	8000402 <HAL_DAC_Init+0x1a>
	}

	SysTick_Config_t SysTick_cfg;

	SysTick_cfg.SysTick_InterruptEnable = SysTick_Interrupt_EN;
 8000420:	2301      	movs	r3, #1
 8000422:	753b      	strb	r3, [r7, #20]
	SysTick_cfg.SysTick_CLKSource = SysTick_CLK_AHB_8;
 8000424:	2300      	movs	r3, #0
 8000426:	757b      	strb	r3, [r7, #21]

	MCAL_SysTicK_Init(&SysTick_cfg);
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fb09 	bl	8000a44 <MCAL_SysTicK_Init>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000024 	.word	0x20000024

08000440 <HAL_DAC_SendAudioSample>:

void HAL_DAC_SendAudioSample(const uint8_t audio_arr[], uint32_t index){
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < SamplingPins; i++){
 800044a:	2300      	movs	r3, #0
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	e015      	b.n	800047c <HAL_DAC_SendAudioSample+0x3c>
		MCAL_GPIO_WritePin(G_GPIOx, i, GET_BIT(audio_arr[index], i));
 8000450:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <HAL_DAC_SendAudioSample+0x4c>)
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	b299      	uxth	r1, r3
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	461a      	mov	r2, r3
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	fa42 f303 	asr.w	r3, r2, r3
 8000468:	b29b      	uxth	r3, r3
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	b29b      	uxth	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	f000 fc3d 	bl	8000cf0 <MCAL_GPIO_WritePin>
	for(uint8_t i = 0; i < SamplingPins; i++){
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	3301      	adds	r3, #1
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d9e6      	bls.n	8000450 <HAL_DAC_SendAudioSample+0x10>
	}
}
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000024 	.word	0x20000024

08000490 <Enable_NVIC>:
/*
 * =======================================================
 * 					  Helper Functions
 * =======================================================
 */
void Enable_NVIC(uint16_t IRQ){
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800049a:	88fb      	ldrh	r3, [r7, #6]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d854      	bhi.n	800054a <Enable_NVIC+0xba>
 80004a0:	a201      	add	r2, pc, #4	@ (adr r2, 80004a8 <Enable_NVIC+0x18>)
 80004a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a6:	bf00      	nop
 80004a8:	080004e9 	.word	0x080004e9
 80004ac:	080004f7 	.word	0x080004f7
 80004b0:	08000505 	.word	0x08000505
 80004b4:	08000513 	.word	0x08000513
 80004b8:	08000521 	.word	0x08000521
 80004bc:	0800052f 	.word	0x0800052f
 80004c0:	0800052f 	.word	0x0800052f
 80004c4:	0800052f 	.word	0x0800052f
 80004c8:	0800052f 	.word	0x0800052f
 80004cc:	0800052f 	.word	0x0800052f
 80004d0:	0800053d 	.word	0x0800053d
 80004d4:	0800053d 	.word	0x0800053d
 80004d8:	0800053d 	.word	0x0800053d
 80004dc:	0800053d 	.word	0x0800053d
 80004e0:	0800053d 	.word	0x0800053d
 80004e4:	0800053d 	.word	0x0800053d
		case 0:	 NVIC_IRQ6_EXTI0_EN()  	 	; break;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <Enable_NVIC+0xc8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000558 <Enable_NVIC+0xc8>)
 80004ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004f2:	6013      	str	r3, [r2, #0]
 80004f4:	e029      	b.n	800054a <Enable_NVIC+0xba>
		case 1:  NVIC_IRQ7_EXTI1_EN()  	 	; break;
 80004f6:	4b18      	ldr	r3, [pc, #96]	@ (8000558 <Enable_NVIC+0xc8>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <Enable_NVIC+0xc8>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000500:	6013      	str	r3, [r2, #0]
 8000502:	e022      	b.n	800054a <Enable_NVIC+0xba>
		case 2:	 NVIC_IRQ8_EXTI2_EN() 		; break;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <Enable_NVIC+0xc8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <Enable_NVIC+0xc8>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	e01b      	b.n	800054a <Enable_NVIC+0xba>
		case 3:	 NVIC_IRQ9_EXTI3_EN()    	; break;
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <Enable_NVIC+0xc8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <Enable_NVIC+0xc8>)
 8000518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e014      	b.n	800054a <Enable_NVIC+0xba>
		case 4:	 NVIC_IRQ10_EXTI4_EN() 	    ; break;
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <Enable_NVIC+0xc8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <Enable_NVIC+0xc8>)
 8000526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	e00d      	b.n	800054a <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EXTI_5_9_EN()   ; break;
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <Enable_NVIC+0xc8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <Enable_NVIC+0xc8>)
 8000534:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000538:	6013      	str	r3, [r2, #0]
 800053a:	e006      	b.n	800054a <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI_10_15_EN() ; break;
 800053c:	4b07      	ldr	r3, [pc, #28]	@ (800055c <Enable_NVIC+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a06      	ldr	r2, [pc, #24]	@ (800055c <Enable_NVIC+0xcc>)
 8000542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	bf00      	nop
	}
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000e100 	.word	0xe000e100
 800055c:	e000e104 	.word	0xe000e104

08000560 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d854      	bhi.n	800061a <Disable_NVIC+0xba>
 8000570:	a201      	add	r2, pc, #4	@ (adr r2, 8000578 <Disable_NVIC+0x18>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	080005b9 	.word	0x080005b9
 800057c:	080005c7 	.word	0x080005c7
 8000580:	080005d5 	.word	0x080005d5
 8000584:	080005e3 	.word	0x080005e3
 8000588:	080005f1 	.word	0x080005f1
 800058c:	080005ff 	.word	0x080005ff
 8000590:	080005ff 	.word	0x080005ff
 8000594:	080005ff 	.word	0x080005ff
 8000598:	080005ff 	.word	0x080005ff
 800059c:	080005ff 	.word	0x080005ff
 80005a0:	0800060d 	.word	0x0800060d
 80005a4:	0800060d 	.word	0x0800060d
 80005a8:	0800060d 	.word	0x0800060d
 80005ac:	0800060d 	.word	0x0800060d
 80005b0:	0800060d 	.word	0x0800060d
 80005b4:	0800060d 	.word	0x0800060d
		case 0:	 NVIC_IRQ6_EXTI0_DIS()  	 ; break;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <Disable_NVIC+0xc8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000628 <Disable_NVIC+0xc8>)
 80005be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	e029      	b.n	800061a <Disable_NVIC+0xba>
		case 1:  NVIC_IRQ7_EXTI1_DIS()  	 ; break;
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <Disable_NVIC+0xc8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a17      	ldr	r2, [pc, #92]	@ (8000628 <Disable_NVIC+0xc8>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e022      	b.n	800061a <Disable_NVIC+0xba>
		case 2:	 NVIC_IRQ8_EXTI2_DIS() 		 ; break;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <Disable_NVIC+0xc8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a13      	ldr	r2, [pc, #76]	@ (8000628 <Disable_NVIC+0xc8>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	e01b      	b.n	800061a <Disable_NVIC+0xba>
		case 3:	 NVIC_IRQ9_EXTI3_DIS()    	 ; break;
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <Disable_NVIC+0xc8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <Disable_NVIC+0xc8>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e014      	b.n	800061a <Disable_NVIC+0xba>
		case 4:	 NVIC_IRQ10_EXTI4_DIS() 	 ; break;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <Disable_NVIC+0xc8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <Disable_NVIC+0xc8>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e00d      	b.n	800061a <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EXTI_5_9_DIS()   ; break;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <Disable_NVIC+0xc8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <Disable_NVIC+0xc8>)
 8000604:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000608:	6013      	str	r3, [r2, #0]
 800060a:	e006      	b.n	800061a <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI_10_15_DIS() ; break;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <Disable_NVIC+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <Disable_NVIC+0xcc>)
 8000612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	bf00      	nop
	}
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e180 	.word	0xe000e180
 800062c:	e000e184 	.word	0xe000e184

08000630 <Set_EXTI>:

void Set_EXTI(EXTI_PinConfig_t *EXTI_PinConfig){
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	// Configure EXTI Pin to be AF IP Floating
	GPIO_PinConfig_t EXTI_Pin;
	EXTI_Pin.GPIO_PinNumber = EXTI_PinConfig->EXTI_PIN.GPIO_PinNumber;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	891b      	ldrh	r3, [r3, #8]
 800063c:	81bb      	strh	r3, [r7, #12]
	EXTI_Pin.GPIO_MODE = GPIO_MODE_IP;
 800063e:	2300      	movs	r3, #0
 8000640:	81fb      	strh	r3, [r7, #14]
	EXTI_Pin.GPIO_PU_PD = GPIO__PU_PD_NONE;
 8000642:	2300      	movs	r3, #0
 8000644:	82fb      	strh	r3, [r7, #22]
	MCAL_GPIO_Init((EXTI_PinConfig->EXTI_PIN.GPIOx), &EXTI_Pin);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fa55 	bl	8000b00 <MCAL_GPIO_Init>

	// Update SYSCFG to route EXTI between port A B C
	uint8_t SYSCFG_EXTI_Index = (EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber) / 4;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	089b      	lsrs	r3, r3, #2
 800065c:	b29b      	uxth	r3, r3
 800065e:	77fb      	strb	r3, [r7, #31]
	uint8_t SYSCFG_EXTI_Position = ((EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber) % 4) * 4;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	77bb      	strb	r3, [r7, #30]

	// Clear the 4-bits before set
	SYSCFG->EXTICR[SYSCFG_EXTI_Index] &= ~(0xF << SYSCFG_EXTI_Position);
 8000670:	4a5f      	ldr	r2, [pc, #380]	@ (80007f0 <Set_EXTI+0x1c0>)
 8000672:	7ffb      	ldrb	r3, [r7, #31]
 8000674:	3302      	adds	r3, #2
 8000676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	210f      	movs	r1, #15
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	495a      	ldr	r1, [pc, #360]	@ (80007f0 <Set_EXTI+0x1c0>)
 8000688:	7ffb      	ldrb	r3, [r7, #31]
 800068a:	4002      	ands	r2, r0
 800068c:	3302      	adds	r3, #2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[SYSCFG_EXTI_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_PinConfig->EXTI_PIN.GPIOx) & 0xF) << SYSCFG_EXTI_Position);
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <Set_EXTI+0x1c0>)
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	3302      	adds	r3, #2
 8000698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	4954      	ldr	r1, [pc, #336]	@ (80007f4 <Set_EXTI+0x1c4>)
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d016      	beq.n	80006d4 <Set_EXTI+0xa4>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	4953      	ldr	r1, [pc, #332]	@ (80007f8 <Set_EXTI+0x1c8>)
 80006ac:	428b      	cmp	r3, r1
 80006ae:	d00f      	beq.n	80006d0 <Set_EXTI+0xa0>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4951      	ldr	r1, [pc, #324]	@ (80007fc <Set_EXTI+0x1cc>)
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d008      	beq.n	80006cc <Set_EXTI+0x9c>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4950      	ldr	r1, [pc, #320]	@ (8000800 <Set_EXTI+0x1d0>)
 80006c0:	428b      	cmp	r3, r1
 80006c2:	d101      	bne.n	80006c8 <Set_EXTI+0x98>
 80006c4:	2303      	movs	r3, #3
 80006c6:	e006      	b.n	80006d6 <Set_EXTI+0xa6>
 80006c8:	230f      	movs	r3, #15
 80006ca:	e004      	b.n	80006d6 <Set_EXTI+0xa6>
 80006cc:	2302      	movs	r3, #2
 80006ce:	e002      	b.n	80006d6 <Set_EXTI+0xa6>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <Set_EXTI+0xa6>
 80006d4:	2300      	movs	r3, #0
 80006d6:	7fb9      	ldrb	r1, [r7, #30]
 80006d8:	408b      	lsls	r3, r1
 80006da:	4618      	mov	r0, r3
 80006dc:	4944      	ldr	r1, [pc, #272]	@ (80007f0 <Set_EXTI+0x1c0>)
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	4302      	orrs	r2, r0
 80006e2:	3302      	adds	r3, #2
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Update Trigger selection
	// Clear them before set
	EXTI->RTSR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80006e8:	4b46      	ldr	r3, [pc, #280]	@ (8000804 <Set_EXTI+0x1d4>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	408a      	lsls	r2, r1
 80006f6:	43d2      	mvns	r2, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a42      	ldr	r2, [pc, #264]	@ (8000804 <Set_EXTI+0x1d4>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000700:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <Set_EXTI+0x1d4>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	8812      	ldrh	r2, [r2, #0]
 8000708:	4611      	mov	r1, r2
 800070a:	2201      	movs	r2, #1
 800070c:	408a      	lsls	r2, r1
 800070e:	43d2      	mvns	r2, r2
 8000710:	4611      	mov	r1, r2
 8000712:	4a3c      	ldr	r2, [pc, #240]	@ (8000804 <Set_EXTI+0x1d4>)
 8000714:	400b      	ands	r3, r1
 8000716:	60d3      	str	r3, [r2, #12]

	if(EXTI_TRIGGER_RISING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b5b      	ldrb	r3, [r3, #13]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d10b      	bne.n	8000738 <Set_EXTI+0x108>
		EXTI->RTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000720:	4b38      	ldr	r3, [pc, #224]	@ (8000804 <Set_EXTI+0x1d4>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	8812      	ldrh	r2, [r2, #0]
 8000728:	4611      	mov	r1, r2
 800072a:	2201      	movs	r2, #1
 800072c:	408a      	lsls	r2, r1
 800072e:	4611      	mov	r1, r2
 8000730:	4a34      	ldr	r2, [pc, #208]	@ (8000804 <Set_EXTI+0x1d4>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6093      	str	r3, [r2, #8]
 8000736:	e029      	b.n	800078c <Set_EXTI+0x15c>
	}
	else if(EXTI_TRIGGER_FALLING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7b5b      	ldrb	r3, [r3, #13]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d10b      	bne.n	8000758 <Set_EXTI+0x128>
		EXTI->FTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000740:	4b30      	ldr	r3, [pc, #192]	@ (8000804 <Set_EXTI+0x1d4>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	8812      	ldrh	r2, [r2, #0]
 8000748:	4611      	mov	r1, r2
 800074a:	2201      	movs	r2, #1
 800074c:	408a      	lsls	r2, r1
 800074e:	4611      	mov	r1, r2
 8000750:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <Set_EXTI+0x1d4>)
 8000752:	430b      	orrs	r3, r1
 8000754:	60d3      	str	r3, [r2, #12]
 8000756:	e019      	b.n	800078c <Set_EXTI+0x15c>
	}
	else if(EXTI_TRIGGER_RISING_FALLING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7b5b      	ldrb	r3, [r3, #13]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d115      	bne.n	800078c <Set_EXTI+0x15c>
		EXTI->RTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000760:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <Set_EXTI+0x1d4>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	8812      	ldrh	r2, [r2, #0]
 8000768:	4611      	mov	r1, r2
 800076a:	2201      	movs	r2, #1
 800076c:	408a      	lsls	r2, r1
 800076e:	4611      	mov	r1, r2
 8000770:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <Set_EXTI+0x1d4>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <Set_EXTI+0x1d4>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	8812      	ldrh	r2, [r2, #0]
 800077e:	4611      	mov	r1, r2
 8000780:	2201      	movs	r2, #1
 8000782:	408a      	lsls	r2, r1
 8000784:	4611      	mov	r1, r2
 8000786:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <Set_EXTI+0x1d4>)
 8000788:	430b      	orrs	r3, r1
 800078a:	60d3      	str	r3, [r2, #12]
	}

	// Update IRQ CallBack function
	G_IRQ_CallBack[EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber] = EXTI_PinConfig->P_IRQ_CallBack;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <Set_EXTI+0x1d8>)
 8000798:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Enable/Disable IRQ EXTI & NVIC
	if(EXTI_IRQ_EN == (EXTI_PinConfig->EXTI_Enable)){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7b1b      	ldrb	r3, [r3, #12]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d110      	bne.n	80007c6 <Set_EXTI+0x196>
		EXTI->IMR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <Set_EXTI+0x1d4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <Set_EXTI+0x1d4>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe66 	bl	8000490 <Enable_NVIC>
	}
	else{
		EXTI->IMR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
		Disable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
	}
}
 80007c4:	e010      	b.n	80007e8 <Set_EXTI+0x1b8>
		EXTI->IMR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <Set_EXTI+0x1d4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	8812      	ldrh	r2, [r2, #0]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	43d2      	mvns	r2, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <Set_EXTI+0x1d4>)
 80007da:	400b      	ands	r3, r1
 80007dc:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff febc 	bl	8000560 <Disable_NVIC>
}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40013c00 	.word	0x40013c00
 8000808:	20000028 	.word	0x20000028

0800080c <MCAL_EXTI_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_PinConfig){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	Set_EXTI(EXTI_PinConfig);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff0b 	bl	8000630 <Set_EXTI>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <EXTI0_IRQHandler>:
/*
 * ===================================
 * 			 ISR  Functions
 * ===================================
 */
void EXTI0_IRQHandler(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 0);
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <EXTI0_IRQHandler+0x1c>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <EXTI0_IRQHandler+0x1c>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[0]();
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <EXTI0_IRQHandler+0x20>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4798      	blx	r3
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40013c00 	.word	0x40013c00
 8000844:	20000028 	.word	0x20000028

08000848 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 1);
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <EXTI1_IRQHandler+0x1c>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <EXTI1_IRQHandler+0x1c>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[1]();
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <EXTI1_IRQHandler+0x20>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4798      	blx	r3
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40013c00 	.word	0x40013c00
 8000868:	20000028 	.word	0x20000028

0800086c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 2);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <EXTI2_IRQHandler+0x1c>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <EXTI2_IRQHandler+0x1c>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[2]();
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <EXTI2_IRQHandler+0x20>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4798      	blx	r3
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40013c00 	.word	0x40013c00
 800088c:	20000028 	.word	0x20000028

08000890 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 3);
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <EXTI3_IRQHandler+0x1c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <EXTI3_IRQHandler+0x1c>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[3]();
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <EXTI3_IRQHandler+0x20>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	4798      	blx	r3
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40013c00 	.word	0x40013c00
 80008b0:	20000028 	.word	0x20000028

080008b4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 4);
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <EXTI4_IRQHandler+0x1c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <EXTI4_IRQHandler+0x1c>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[4]();
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <EXTI4_IRQHandler+0x20>)
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	4798      	blx	r3
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40013c00 	.word	0x40013c00
 80008d4:	20000028 	.word	0x20000028

080008d8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 5 ) {	EXTI->PR |=  (1 << 5)    ; G_IRQ_CallBack[5]() ;   }
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <EXTI9_5_IRQHandler+0x22>
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6153      	str	r3, [r2, #20]
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <EXTI9_5_IRQHandler+0xa4>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	4798      	blx	r3
	if (EXTI->PR & 1 << 6 ) {	EXTI->PR |=  (1 << 6)    ; G_IRQ_CallBack[6]() ;   }
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <EXTI9_5_IRQHandler+0x40>
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 800090c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <EXTI9_5_IRQHandler+0xa4>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4798      	blx	r3
	if (EXTI->PR & 1 << 7 ) {	EXTI->PR |=  (1 << 7)    ; G_IRQ_CallBack[7]() ;   }
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <EXTI9_5_IRQHandler+0x5e>
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092e:	6153      	str	r3, [r2, #20]
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <EXTI9_5_IRQHandler+0xa4>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	4798      	blx	r3
	if (EXTI->PR & 1 << 8 ) {	EXTI->PR |=  (1 << 8)    ; G_IRQ_CallBack[8]() ;   }
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800093e:	2b00      	cmp	r3, #0
 8000940:	d008      	beq.n	8000954 <EXTI9_5_IRQHandler+0x7c>
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a0c      	ldr	r2, [pc, #48]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <EXTI9_5_IRQHandler+0xa4>)
 8000950:	6a1b      	ldr	r3, [r3, #32]
 8000952:	4798      	blx	r3
	if (EXTI->PR & 1 << 9 ) {	EXTI->PR |=  (1 << 9)    ; G_IRQ_CallBack[9]() ;   }
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <EXTI9_5_IRQHandler+0x9a>
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <EXTI9_5_IRQHandler+0xa0>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096a:	6153      	str	r3, [r2, #20]
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <EXTI9_5_IRQHandler+0xa4>)
 800096e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000970:	4798      	blx	r3
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40013c00 	.word	0x40013c00
 800097c:	20000028 	.word	0x20000028

08000980 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 10 ) {	EXTI->PR |=  (1 << 10)    ; G_IRQ_CallBack[10]() ;   }
 8000984:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800098c:	2b00      	cmp	r3, #0
 800098e:	d008      	beq.n	80009a2 <EXTI15_10_IRQHandler+0x22>
 8000990:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a29      	ldr	r2, [pc, #164]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	6153      	str	r3, [r2, #20]
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <EXTI15_10_IRQHandler+0xc0>)
 800099e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a0:	4798      	blx	r3
	if (EXTI->PR & 1 << 11 ) {	EXTI->PR |=  (1 << 11)    ; G_IRQ_CallBack[11]() ;   }
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d008      	beq.n	80009c0 <EXTI15_10_IRQHandler+0x40>
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <EXTI15_10_IRQHandler+0xc0>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009be:	4798      	blx	r3
	if (EXTI->PR & 1 << 12 ) {	EXTI->PR |=  (1 << 12)    ; G_IRQ_CallBack[12]() ;   }
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <EXTI15_10_IRQHandler+0x5e>
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <EXTI15_10_IRQHandler+0xc0>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	4798      	blx	r3
	if (EXTI->PR & 1 << 13 ) {	EXTI->PR |=  (1 << 13)    ; G_IRQ_CallBack[13]() ;   }
 80009de:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d008      	beq.n	80009fc <EXTI15_10_IRQHandler+0x7c>
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a13      	ldr	r2, [pc, #76]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <EXTI15_10_IRQHandler+0xc0>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fa:	4798      	blx	r3
	if (EXTI->PR & 1 << 14 ) {	EXTI->PR |=  (1 << 14)    ; G_IRQ_CallBack[14]() ;   }
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <EXTI15_10_IRQHandler+0x9a>
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6153      	str	r3, [r2, #20]
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <EXTI15_10_IRQHandler+0xc0>)
 8000a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a18:	4798      	blx	r3
	if (EXTI->PR & 1 << 15 ) {	EXTI->PR |=  (1 << 15)    ; G_IRQ_CallBack[15]() ;   }
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d008      	beq.n	8000a38 <EXTI15_10_IRQHandler+0xb8>
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <EXTI15_10_IRQHandler+0xbc>)
 8000a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <EXTI15_10_IRQHandler+0xc0>)
 8000a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a36:	4798      	blx	r3
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40013c00 	.word	0x40013c00
 8000a40:	20000028 	.word	0x20000028

08000a44 <MCAL_SysTicK_Init>:
#include "stm32f401xc_SysTick_driver.h"

static void(* GP_Function_CallBack)(void) = NULL;
static uint8_t G_SingleFlag = 0;

void MCAL_SysTicK_Init(SysTick_Config_t *SysTick_CFG){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	// Clear SysTick Timer by clear Enable
	SysTick->CTRL &= ~(1 << 0);
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]

	/// Interrupt Enable/Disable
	if(SysTick_Interrupt_EN == (SysTick_CFG->SysTick_InterruptEnable)){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d106      	bne.n	8000a6e <MCAL_SysTicK_Init+0x2a>
		SysTick->CTRL |= (1 << 1);
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e005      	b.n	8000a7a <MCAL_SysTicK_Init+0x36>
	}
	else{
		SysTick->CTRL &= ~(1 << 1);
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a74:	f023 0302 	bic.w	r3, r3, #2
 8000a78:	6013      	str	r3, [r2, #0]
	}

	// Select Clock source AHB or AHB/8
	if(SysTick_CLK_AHB == (SysTick_CFG->SysTick_CLKSource)){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	785b      	ldrb	r3, [r3, #1]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d106      	bne.n	8000a90 <MCAL_SysTicK_Init+0x4c>
		SysTick->CTRL |= (1 << 2);
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6013      	str	r3, [r2, #0]
	}
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
		SysTick->CTRL &= ~(1 << 2);
	}
}
 8000a8e:	e009      	b.n	8000aa4 <MCAL_SysTicK_Init+0x60>
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d105      	bne.n	8000aa4 <MCAL_SysTicK_Init+0x60>
		SysTick->CTRL &= ~(1 << 2);
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <MCAL_SysTicK_Init+0x6c>)
 8000a9e:	f023 0304 	bic.w	r3, r3, #4
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <MCAL_SysTicK_StopTimer>:

	// Start Timer
	SysTick->CTRL |= (1 << 0);
}

void MCAL_SysTicK_StopTimer(void){
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	// Stop SysTick Counter
	SysTick->CTRL &= ~(1 << 0);
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <MCAL_SysTicK_StopTimer+0x1c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <MCAL_SysTicK_StopTimer+0x1c>)
 8000abe:	f023 0301 	bic.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <SysTick_Handler>:
	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
		MCAL_SysTicK_StartTimer(ticks);
	}
}

void SysTick_Handler(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	if(GP_Function_CallBack != NULL){
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <SysTick_Handler+0x24>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <SysTick_Handler+0x12>
		GP_Function_CallBack();
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <SysTick_Handler+0x24>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4798      	blx	r3

	}

	if(1 == G_SingleFlag){
 8000ae6:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <SysTick_Handler+0x28>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d101      	bne.n	8000af2 <SysTick_Handler+0x1e>
		MCAL_SysTicK_StopTimer();
 8000aee:	f7ff ffe1 	bl	8000ab4 <MCAL_SysTicK_StopTimer>
	}

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000068 	.word	0x20000068
 8000afc:	2000006c 	.word	0x2000006c

08000b00 <MCAL_GPIO_Init>:
  * @param [in] 	- pinConfig: pointer to GPIO_PinConfig_t structure that contains the config info for pin
  * @retval 		- none
  * Note 			- stm32f103xx have GPIO A,B,C,D,E but this package has only A and B fully and some of C and D
  */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    uint32_t pin = PinConfig->GPIO_PinNumber;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	60fb      	str	r3, [r7, #12]

    // Clear old data from registers
    GPIOx->MODER   &= ~(0x3 << (2 * pin));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	2103      	movs	r1, #3
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	43d2      	mvns	r2, r2
 8000b20:	401a      	ands	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
    GPIOx->OTYPER  &= ~(1   << pin);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b32:	43d2      	mvns	r2, r2
 8000b34:	401a      	ands	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	605a      	str	r2, [r3, #4]
    GPIOx->OSPEEDR &= ~(0x3 << (2 * pin));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	2103      	movs	r1, #3
 8000b44:	fa01 f202 	lsl.w	r2, r1, r2
 8000b48:	43d2      	mvns	r2, r2
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
    GPIOx->PUPDR   &= ~(0x3 << (2 * pin));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	0052      	lsls	r2, r2, #1
 8000b58:	2103      	movs	r1, #3
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	43d2      	mvns	r2, r2
 8000b60:	401a      	ands	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]

    // Set new config
    switch (PinConfig->GPIO_MODE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	885b      	ldrh	r3, [r3, #2]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	f000 8096 	beq.w	8000c9c <MCAL_GPIO_Init+0x19c>
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	f300 80aa 	bgt.w	8000cca <MCAL_GPIO_Init+0x1ca>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d002      	beq.n	8000b80 <MCAL_GPIO_Init+0x80>
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d02e      	beq.n	8000bdc <MCAL_GPIO_Init+0xdc>
 8000b7e:	e0a4      	b.n	8000cca <MCAL_GPIO_Init+0x1ca>
    {
    case GPIO_MODE_OP:   // General purpose output
        GPIOx->MODER   |= (0x1 << (2 * pin));   // 01
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	0052      	lsls	r2, r2, #1
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	8912      	ldrh	r2, [r2, #8]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	8992      	ldrh	r2, [r2, #12]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	0052      	lsls	r2, r2, #1
 8000bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	8952      	ldrh	r2, [r2, #10]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	0052      	lsls	r2, r2, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60da      	str	r2, [r3, #12]
        break;
 8000bda:	e083      	b.n	8000ce4 <MCAL_GPIO_Init+0x1e4>

        /* Still Need to be tested */
    case GPIO_MODE_AF:   // Alternate function
        GPIOx->MODER   |= (0x2 << (2 * pin));   // 10
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	2102      	movs	r1, #2
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	8912      	ldrh	r2, [r2, #8]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	8992      	ldrh	r2, [r2, #12]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	0052      	lsls	r2, r2, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	8952      	ldrh	r2, [r2, #10]
 8000c26:	4611      	mov	r1, r2
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	0052      	lsls	r2, r2, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60da      	str	r2, [r3, #12]

        // Configure AF (AFRL [0..7], AFRH [8..15])
        if (pin < 8) {
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d816      	bhi.n	8000c6a <MCAL_GPIO_Init+0x16a>
            GPIOx->AFRL[0] &= ~(0xF << (4 * pin));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	210f      	movs	r1, #15
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	43d2      	mvns	r2, r2
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	621a      	str	r2, [r3, #32]
            GPIOx->AFRL[0] |= (PinConfig->GPIO_AF << (4 * pin));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a1a      	ldr	r2, [r3, #32]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	6859      	ldr	r1, [r3, #4]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	621a      	str	r2, [r3, #32]
        } else {
            GPIOx->AFRH[1] &= ~(0xF << (4 * (pin - 8)));
            GPIOx->AFRH[1] |= (PinConfig->GPIO_AF << (4 * (pin - 8)));
        }
        break;
 8000c68:	e03c      	b.n	8000ce4 <MCAL_GPIO_Init+0x1e4>
            GPIOx->AFRH[1] &= ~(0xF << (4 * (pin - 8)));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	3a08      	subs	r2, #8
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	210f      	movs	r1, #15
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	43d2      	mvns	r2, r2
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	645a      	str	r2, [r3, #68]	@ 0x44
            GPIOx->AFRH[1] |= (PinConfig->GPIO_AF << (4 * (pin - 8)));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	6859      	ldr	r1, [r3, #4]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8000c9a:	e023      	b.n	8000ce4 <MCAL_GPIO_Init+0x1e4>

    case GPIO_MODE_Analog:   // Analog
        GPIOx->MODER   |= (0x3 << (2 * pin));   // 11
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	0052      	lsls	r2, r2, #1
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	8952      	ldrh	r2, [r2, #10]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	0052      	lsls	r2, r2, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60da      	str	r2, [r3, #12]
        break;
 8000cc8:	e00c      	b.n	8000ce4 <MCAL_GPIO_Init+0x1e4>

    case GPIO_MODE_IP:   // Input
    default:
        // Input mode (00)
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	8952      	ldrh	r2, [r2, #10]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	0052      	lsls	r2, r2, #1
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60da      	str	r2, [r3, #12]
        break;
 8000ce2:	bf00      	nop
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <MCAL_GPIO_WritePin>:
  * @param [in]  	- pinNo: can be (0...15 depends on GPIOx) to select pin number
  * @param [in]  	- Value: the sate of the pin (can be two values based on @ref GPIO_PIN_state)
  * @retval 		- None
  * Note 			- None
  */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint16_t value){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
	if(value == GPIO_PIN_SET){
 8000d00:	883b      	ldrh	r3, [r7, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d109      	bne.n	8000d1a <MCAL_GPIO_WritePin+0x2a>
		// BSy: Port x Set bit y (y= 0 .. 15)
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
        GPIOx->ODR |= (1 << PinNumber);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	615a      	str	r2, [r3, #20]
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bit
        GPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000d18:	e009      	b.n	8000d2e <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1 << PinNumber);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	2101      	movs	r1, #1
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	43d2      	mvns	r2, r2
 8000d28:	401a      	ands	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	615a      	str	r2, [r3, #20]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <MCAL_GPIO_TogglePin>:
  * @param [in]  	- GPIOx: x can be (A....E depends on device) to select GPIO Peripherals
  * @param [in]  	- pinNo: can be (0...15 depends on GPIOx) to select pin number
  * @retval 		- None
  * Note 			- None
  */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)(1 << PinNumber);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	405a      	eors	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	615a      	str	r2, [r3, #20]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <memset>:
 8000d64:	4402      	add	r2, r0
 8000d66:	4603      	mov	r3, r0
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d100      	bne.n	8000d6e <memset+0xa>
 8000d6c:	4770      	bx	lr
 8000d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d72:	e7f9      	b.n	8000d68 <memset+0x4>

08000d74 <__libc_init_array>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	4d0d      	ldr	r5, [pc, #52]	@ (8000dac <__libc_init_array+0x38>)
 8000d78:	4c0d      	ldr	r4, [pc, #52]	@ (8000db0 <__libc_init_array+0x3c>)
 8000d7a:	1b64      	subs	r4, r4, r5
 8000d7c:	10a4      	asrs	r4, r4, #2
 8000d7e:	2600      	movs	r6, #0
 8000d80:	42a6      	cmp	r6, r4
 8000d82:	d109      	bne.n	8000d98 <__libc_init_array+0x24>
 8000d84:	4d0b      	ldr	r5, [pc, #44]	@ (8000db4 <__libc_init_array+0x40>)
 8000d86:	4c0c      	ldr	r4, [pc, #48]	@ (8000db8 <__libc_init_array+0x44>)
 8000d88:	f000 f818 	bl	8000dbc <_init>
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	10a4      	asrs	r4, r4, #2
 8000d90:	2600      	movs	r6, #0
 8000d92:	42a6      	cmp	r6, r4
 8000d94:	d105      	bne.n	8000da2 <__libc_init_array+0x2e>
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
 8000d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d9c:	4798      	blx	r3
 8000d9e:	3601      	adds	r6, #1
 8000da0:	e7ee      	b.n	8000d80 <__libc_init_array+0xc>
 8000da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da6:	4798      	blx	r3
 8000da8:	3601      	adds	r6, #1
 8000daa:	e7f2      	b.n	8000d92 <__libc_init_array+0x1e>
 8000dac:	08013d2c 	.word	0x08013d2c
 8000db0:	08013d2c 	.word	0x08013d2c
 8000db4:	08013d2c 	.word	0x08013d2c
 8000db8:	08013d30 	.word	0x08013d30

08000dbc <_init>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	bf00      	nop
 8000dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc2:	bc08      	pop	{r3}
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	4770      	bx	lr

08000dc8 <_fini>:
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	bf00      	nop
 8000dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dce:	bc08      	pop	{r3}
 8000dd0:	469e      	mov	lr, r3
 8000dd2:	4770      	bx	lr
