
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b5c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001cf0  08001cf0  00002cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d08  08001d08  00002d10  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001d08  08001d08  00002d10  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001d08  08001d10  00002d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d08  08001d08  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d0c  08001d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000000  08001d10  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001d10  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003564  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cf3  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001574  00000000  00000000  00006f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000330  00000000  00000000  00008510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000298  00000000  00000000  00008840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000aea  00000000  00000000  00008ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000023b6  00000000  00000000  000095c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d04  00000000  00000000  0000b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001567c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bc4  00000000  00000000  000156c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001cd8 	.word	0x08001cd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001cd8 	.word	0x08001cd8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <Clock_Init>:
#include "stm32f401xc_USART_driver.h"
#include "stm32f401xc_Timer_driver.h"
#include "stm32f401xc_SPI_driver.h"
#include "stm32f401xc_RCC_driver.h"

void Clock_Init(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <Clock_Init+0x34>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <Clock_Init+0x34>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOB_CLK_EN();
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <Clock_Init+0x34>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <Clock_Init+0x34>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_SYSCFG_CLK_EN();
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <Clock_Init+0x34>)
 80009ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <Clock_Init+0x34>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <main>:
//	PinConfig.GPIO_PU_PD = GPIO__PU_PD_NONE;
//	PinConfig.GPIO_Output_Speed = GPIO_SPEED_LOW;
//	MCAL_GPIO_Init(GPIOA, &PinConfig);
//}

int main(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 16);
 80009ee:	4bae      	ldr	r3, [pc, #696]	@ (8000ca8 <main+0x2c0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4aad      	ldr	r2, [pc, #692]	@ (8000ca8 <main+0x2c0>)
 80009f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009f8:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << 17)));
 80009fa:	bf00      	nop
 80009fc:	4baa      	ldr	r3, [pc, #680]	@ (8000ca8 <main+0x2c0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f9      	beq.n	80009fc <main+0x14>
	RCC->CFGR &= ~(0x3 << 0);
 8000a08:	4ba7      	ldr	r3, [pc, #668]	@ (8000ca8 <main+0x2c0>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	4aa6      	ldr	r2, [pc, #664]	@ (8000ca8 <main+0x2c0>)
 8000a0e:	f023 0303 	bic.w	r3, r3, #3
 8000a12:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x1 << 0);
 8000a14:	4ba4      	ldr	r3, [pc, #656]	@ (8000ca8 <main+0x2c0>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4aa3      	ldr	r2, [pc, #652]	@ (8000ca8 <main+0x2c0>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6093      	str	r3, [r2, #8]
	while (((RCC->CFGR >> 2) & 0x3) != 0x1);
 8000a20:	bf00      	nop
 8000a22:	4ba1      	ldr	r3, [pc, #644]	@ (8000ca8 <main+0x2c0>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 030c 	and.w	r3, r3, #12
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d1f9      	bne.n	8000a22 <main+0x3a>

	Clock_Init();
 8000a2e:	f7ff ffbf 	bl	80009b0 <Clock_Init>
	//SevSeg_Ini();

	EXTI_PinConfig_t A_xCfg;
	A_xCfg.EXTI_PIN= EXTI0_PB0;
 8000a32:	4a9e      	ldr	r2, [pc, #632]	@ (8000cac <main+0x2c4>)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	A_xCfg.EXTI_Enable = EXTI_IRQ_EN;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	773b      	strb	r3, [r7, #28]
	A_xCfg.EXTI_EdgeSelect = EXTI_TRIGGER_FALLING;
 8000a42:	2301      	movs	r3, #1
 8000a44:	777b      	strb	r3, [r7, #29]
	A_xCfg.P_IRQ_CallBack = HAL_IR_GetTime;
 8000a46:	4b9a      	ldr	r3, [pc, #616]	@ (8000cb0 <main+0x2c8>)
 8000a48:	623b      	str	r3, [r7, #32]

	MCAL_EXTI_GPIO_Init(&A_xCfg);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fc3c 	bl	80012cc <MCAL_EXTI_GPIO_Init>

	SysTick_Config_t STK_cfg;
	STK_cfg.SysTick_InterruptEnable = SysTick_Interrupt_EN;
 8000a54:	2301      	movs	r3, #1
 8000a56:	703b      	strb	r3, [r7, #0]
	STK_cfg.SysTick_CLKSource = SysTick_CLK_AHB_8;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	707b      	strb	r3, [r7, #1]
	MCAL_SysTicK_Init(&STK_cfg);
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fef0 	bl	8001844 <MCAL_SysTicK_Init>

	uint8_t G_value = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t Number = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27


	HAL_SEVEN_SEG_WriteNumber_CommCathode(0, disable);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fa00 	bl	8000e78 <HAL_SEVEN_SEG_WriteNumber_CommCathode>

	while (1){
		G_value = get_value();
 8000a78:	f000 f9f2 	bl	8000e60 <get_value>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		switch (G_value) {
 8000a82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a86:	3b08      	subs	r3, #8
 8000a88:	2b56      	cmp	r3, #86	@ 0x56
 8000a8a:	f200 8102 	bhi.w	8000c92 <main+0x2aa>
 8000a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <main+0xac>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000c11 	.word	0x08000c11
 8000a98:	08000c41 	.word	0x08000c41
 8000a9c:	08000c93 	.word	0x08000c93
 8000aa0:	08000c93 	.word	0x08000c93
 8000aa4:	08000bf9 	.word	0x08000bf9
 8000aa8:	08000c93 	.word	0x08000c93
 8000aac:	08000c93 	.word	0x08000c93
 8000ab0:	08000c93 	.word	0x08000c93
 8000ab4:	08000c93 	.word	0x08000c93
 8000ab8:	08000c93 	.word	0x08000c93
 8000abc:	08000c93 	.word	0x08000c93
 8000ac0:	08000c93 	.word	0x08000c93
 8000ac4:	08000c93 	.word	0x08000c93
 8000ac8:	08000c6b 	.word	0x08000c6b
 8000acc:	08000bf1 	.word	0x08000bf1
 8000ad0:	08000c93 	.word	0x08000c93
 8000ad4:	08000c01 	.word	0x08000c01
 8000ad8:	08000c93 	.word	0x08000c93
 8000adc:	08000c93 	.word	0x08000c93
 8000ae0:	08000c93 	.word	0x08000c93
 8000ae4:	08000c19 	.word	0x08000c19
 8000ae8:	08000c93 	.word	0x08000c93
 8000aec:	08000c93 	.word	0x08000c93
 8000af0:	08000c93 	.word	0x08000c93
 8000af4:	08000c93 	.word	0x08000c93
 8000af8:	08000c93 	.word	0x08000c93
 8000afc:	08000c93 	.word	0x08000c93
 8000b00:	08000c93 	.word	0x08000c93
 8000b04:	08000c93 	.word	0x08000c93
 8000b08:	08000c93 	.word	0x08000c93
 8000b0c:	08000c93 	.word	0x08000c93
 8000b10:	08000c93 	.word	0x08000c93
 8000b14:	08000c93 	.word	0x08000c93
 8000b18:	08000c93 	.word	0x08000c93
 8000b1c:	08000c93 	.word	0x08000c93
 8000b20:	08000c93 	.word	0x08000c93
 8000b24:	08000c93 	.word	0x08000c93
 8000b28:	08000c93 	.word	0x08000c93
 8000b2c:	08000c93 	.word	0x08000c93
 8000b30:	08000c93 	.word	0x08000c93
 8000b34:	08000c93 	.word	0x08000c93
 8000b38:	08000c93 	.word	0x08000c93
 8000b3c:	08000c93 	.word	0x08000c93
 8000b40:	08000c93 	.word	0x08000c93
 8000b44:	08000c93 	.word	0x08000c93
 8000b48:	08000c93 	.word	0x08000c93
 8000b4c:	08000c93 	.word	0x08000c93
 8000b50:	08000c93 	.word	0x08000c93
 8000b54:	08000c93 	.word	0x08000c93
 8000b58:	08000c93 	.word	0x08000c93
 8000b5c:	08000c93 	.word	0x08000c93
 8000b60:	08000c93 	.word	0x08000c93
 8000b64:	08000c93 	.word	0x08000c93
 8000b68:	08000c93 	.word	0x08000c93
 8000b6c:	08000c93 	.word	0x08000c93
 8000b70:	08000c93 	.word	0x08000c93
 8000b74:	08000c93 	.word	0x08000c93
 8000b78:	08000c93 	.word	0x08000c93
 8000b7c:	08000c29 	.word	0x08000c29
 8000b80:	08000c93 	.word	0x08000c93
 8000b84:	08000c93 	.word	0x08000c93
 8000b88:	08000c93 	.word	0x08000c93
 8000b8c:	08000c93 	.word	0x08000c93
 8000b90:	08000c93 	.word	0x08000c93
 8000b94:	08000c93 	.word	0x08000c93
 8000b98:	08000c93 	.word	0x08000c93
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000c93 	.word	0x08000c93
 8000ba4:	08000c93 	.word	0x08000c93
 8000ba8:	08000c93 	.word	0x08000c93
 8000bac:	08000c93 	.word	0x08000c93
 8000bb0:	08000c93 	.word	0x08000c93
 8000bb4:	08000c93 	.word	0x08000c93
 8000bb8:	08000c93 	.word	0x08000c93
 8000bbc:	08000c31 	.word	0x08000c31
 8000bc0:	08000c93 	.word	0x08000c93
 8000bc4:	08000c93 	.word	0x08000c93
 8000bc8:	08000c93 	.word	0x08000c93
 8000bcc:	08000c93 	.word	0x08000c93
 8000bd0:	08000c93 	.word	0x08000c93
 8000bd4:	08000c93 	.word	0x08000c93
 8000bd8:	08000c93 	.word	0x08000c93
 8000bdc:	08000c21 	.word	0x08000c21
 8000be0:	08000c93 	.word	0x08000c93
 8000be4:	08000c93 	.word	0x08000c93
 8000be8:	08000c93 	.word	0x08000c93
 8000bec:	08000c09 	.word	0x08000c09
			case 22: Number = 0; break;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000bf6:	e04f      	b.n	8000c98 <main+0x2b0>
			case 12: Number = 1; break;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000bfe:	e04b      	b.n	8000c98 <main+0x2b0>
			case 24: Number = 2; break;
 8000c00:	2302      	movs	r3, #2
 8000c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c06:	e047      	b.n	8000c98 <main+0x2b0>
			case 94: Number = 3; break;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c0e:	e043      	b.n	8000c98 <main+0x2b0>
			case 8:  Number = 4; break;
 8000c10:	2304      	movs	r3, #4
 8000c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c16:	e03f      	b.n	8000c98 <main+0x2b0>
			case 28: Number = 5; break;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c1e:	e03b      	b.n	8000c98 <main+0x2b0>
			case 90: Number = 6; break;
 8000c20:	2306      	movs	r3, #6
 8000c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c26:	e037      	b.n	8000c98 <main+0x2b0>
			case 66: Number = 7; break;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c2e:	e033      	b.n	8000c98 <main+0x2b0>
			case 82: Number = 8; break;
 8000c30:	2308      	movs	r3, #8
 8000c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c36:	e02f      	b.n	8000c98 <main+0x2b0>
			case 74: Number = 9; break;
 8000c38:	2309      	movs	r3, #9
 8000c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c3e:	e02b      	b.n	8000c98 <main+0x2b0>
			case 9:
				MCAL_SysTicK_SetDelay_ms(45);
 8000c40:	202d      	movs	r0, #45	@ 0x2d
 8000c42:	f000 fe61 	bl	8001908 <MCAL_SysTicK_SetDelay_ms>
				if(G_value == 9){
 8000c46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c4a:	2b09      	cmp	r3, #9
 8000c4c:	d123      	bne.n	8000c96 <main+0x2ae>
					if (Number < 9) Number++;
 8000c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d805      	bhi.n	8000c62 <main+0x27a>
 8000c56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					else Number = 0;
				}
				break;
 8000c60:	e019      	b.n	8000c96 <main+0x2ae>
					else Number = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000c68:	e015      	b.n	8000c96 <main+0x2ae>
			case 21:
				MCAL_SysTicK_SetDelay_ms(45);
 8000c6a:	202d      	movs	r0, #45	@ 0x2d
 8000c6c:	f000 fe4c 	bl	8001908 <MCAL_SysTicK_SetDelay_ms>
				if(G_value == 21){
 8000c70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c74:	2b15      	cmp	r3, #21
 8000c76:	d10c      	bne.n	8000c92 <main+0x2aa>
					if (Number > 0) Number--;
 8000c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <main+0x2a4>
 8000c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c84:	3b01      	subs	r3, #1
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					else Number = 9;
				}
			default:			 break;
 8000c8a:	e002      	b.n	8000c92 <main+0x2aa>
					else Number = 9;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			default:			 break;
 8000c92:	bf00      	nop
 8000c94:	e000      	b.n	8000c98 <main+0x2b0>
				break;
 8000c96:	bf00      	nop
		}

		HAL_SEVEN_SEG_WriteNumber_CommCathode(Number, disable);
 8000c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f8e9 	bl	8000e78 <HAL_SEVEN_SEG_WriteNumber_CommCathode>
		G_value = get_value();
 8000ca6:	e6e7      	b.n	8000a78 <main+0x90>
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	08001cf0 	.word	0x08001cf0
 8000cb0:	08000d09 	.word	0x08000d09

08000cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ce2:	f000 ffd5 	bl	8001c90 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000ce6:	f7ff fe7f 	bl	80009e8 <main>

08000cea <LoopForever>:

LoopForever:
  b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cf8:	08001d10 	.word	0x08001d10
  ldr r2, =_sbss
 8000cfc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d00:	200001b8 	.word	0x200001b8

08000d04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_IR_GetTime>:
 * ==================================================
 * 	    APIs Supported by "IR DRIVER"
 * ==================================================
 */

void HAL_IR_GetTime(void){
 8000d08:	b598      	push	{r3, r4, r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    if(G_StartFlag == 0){
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <HAL_IR_GetTime+0x60>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d107      	bne.n	8000d24 <HAL_IR_GetTime+0x1c>
	// For Start Bit, should be used one time only
	G_StartFlag = 1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <HAL_IR_GetTime+0x60>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
	MCAL_SysTicK_SetInterval_Single(15, HAL_IR_DecodeBits);
 8000d1a:	4914      	ldr	r1, [pc, #80]	@ (8000d6c <HAL_IR_GetTime+0x64>)
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f000 fe25 	bl	800196c <MCAL_SysTicK_SetInterval_Single>
    }
    else{
	IR_array[G_Counter++] = (MCAL_SysTicK_GetElapsedTime_SingleShot()/3.125);
	MCAL_SysTicK_SetInterval_Single(4, HAL_IR_DecodeBits);
    }
}
 8000d22:	e01f      	b.n	8000d64 <HAL_IR_GetTime+0x5c>
	IR_array[G_Counter++] = (MCAL_SysTicK_GetElapsedTime_SingleShot()/3.125);
 8000d24:	f000 fe14 	bl	8001950 <MCAL_SysTicK_GetElapsedTime_SingleShot>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fb94 	bl	8000458 <__aeabi_ui2d>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_IR_GetTime+0x68>)
 8000d36:	f7ff fd33 	bl	80007a0 <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_IR_GetTime+0x6c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	b2d4      	uxtb	r4, r2
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_IR_GetTime+0x6c>)
 8000d4c:	7014      	strb	r4, [r2, #0]
 8000d4e:	461c      	mov	r4, r3
 8000d50:	f7ff fe0e 	bl	8000970 <__aeabi_d2uiz>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_IR_GetTime+0x70>)
 8000d58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	MCAL_SysTicK_SetInterval_Single(4, HAL_IR_DecodeBits);
 8000d5c:	4903      	ldr	r1, [pc, #12]	@ (8000d6c <HAL_IR_GetTime+0x64>)
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f000 fe04 	bl	800196c <MCAL_SysTicK_SetInterval_Single>
}
 8000d64:	bf00      	nop
 8000d66:	bd98      	pop	{r3, r4, r7, pc}
 8000d68:	2000001d 	.word	0x2000001d
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	40090000 	.word	0x40090000
 8000d74:	2000001e 	.word	0x2000001e
 8000d78:	20000020 	.word	0x20000020

08000d7c <HAL_IR_DecodeBits>:

void HAL_IR_DecodeBits(void){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
    G_value = 0;
 8000d82:	4b33      	ldr	r3, [pc, #204]	@ (8000e50 <HAL_IR_DecodeBits+0xd4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 0; i < 8; i++){
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	e041      	b.n	8000e12 <HAL_IR_DecodeBits+0x96>
	if((IR_array[17+i] >= 1000) && ((IR_array[17+i]) < 1250)){
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	3311      	adds	r3, #17
 8000d92:	4a30      	ldr	r2, [pc, #192]	@ (8000e54 <HAL_IR_DecodeBits+0xd8>)
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d9c:	d318      	bcc.n	8000dd0 <HAL_IR_DecodeBits+0x54>
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	3311      	adds	r3, #17
 8000da2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e54 <HAL_IR_DecodeBits+0xd8>)
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d80f      	bhi.n	8000dd0 <HAL_IR_DecodeBits+0x54>
	    G_value &= ~(1 << i);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2201      	movs	r2, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <HAL_IR_DecodeBits+0xd4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <HAL_IR_DecodeBits+0xd4>)
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	e01d      	b.n	8000e0c <HAL_IR_DecodeBits+0x90>
	}
	else if((IR_array[17+i] >= 2000) && ((IR_array[17+i]) < 2450)){
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	3311      	adds	r3, #17
 8000dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e54 <HAL_IR_DecodeBits+0xd8>)
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dde:	d315      	bcc.n	8000e0c <HAL_IR_DecodeBits+0x90>
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	3311      	adds	r3, #17
 8000de4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <HAL_IR_DecodeBits+0xd8>)
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	f640 1291 	movw	r2, #2449	@ 0x991
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d80c      	bhi.n	8000e0c <HAL_IR_DecodeBits+0x90>
	    G_value |= 1 << i;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2201      	movs	r2, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_IR_DecodeBits+0xd4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_IR_DecodeBits+0xd4>)
 8000e0a:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++){
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d9ba      	bls.n	8000d8e <HAL_IR_DecodeBits+0x12>
	}
    }

    // clear flag, counter and array
    G_Counter = 0;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_IR_DecodeBits+0xdc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
    G_StartFlag = 0;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_IR_DecodeBits+0xe0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

    for(uint8_t i=0;i<50;i++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	71bb      	strb	r3, [r7, #6]
 8000e28:	e007      	b.n	8000e3a <HAL_IR_DecodeBits+0xbe>
	IR_array[i] = 0;
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <HAL_IR_DecodeBits+0xd8>)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(uint8_t i=0;i<50;i++){
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	3301      	adds	r3, #1
 8000e38:	71bb      	strb	r3, [r7, #6]
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2b31      	cmp	r3, #49	@ 0x31
 8000e3e:	d9f4      	bls.n	8000e2a <HAL_IR_DecodeBits+0xae>
    }

    //return G_value;
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000001c 	.word	0x2000001c
 8000e54:	20000020 	.word	0x20000020
 8000e58:	2000001e 	.word	0x2000001e
 8000e5c:	2000001d 	.word	0x2000001d

08000e60 <get_value>:

uint8_t get_value(void){
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
    return G_value;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <get_value+0x14>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000001c 	.word	0x2000001c

08000e78 <HAL_SEVEN_SEG_WriteNumber_CommCathode>:
 * =========================================================
 * 		 APIs Supported by "HAL Seven Segment DRIVER"
 * =========================================================
 */

void HAL_SEVEN_SEG_WriteNumber_CommCathode(uint16_t Number, BCD_Status_t bcd_status){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	4613      	mov	r3, r2
 8000e86:	717b      	strb	r3, [r7, #5]
    // Check if the number is higher than 9
    if(Number > 9){
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	2b09      	cmp	r3, #9
 8000e8c:	d913      	bls.n	8000eb6 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x3e>
        for(uint8_t i = 0; i < 7; i++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e00c      	b.n	8000eae <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x36>
            MCAL_GPIO_WritePin(GPIOA, (1<<i), GPIO_PIN_RST);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2201      	movs	r2, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4829      	ldr	r0, [pc, #164]	@ (8000f48 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xd0>)
 8000ea4:	f000 fecf 	bl	8001c46 <MCAL_GPIO_WritePin>
        for(uint8_t i = 0; i < 7; i++){
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	d9ef      	bls.n	8000e94 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x1c>
        }
        return;
 8000eb4:	e044      	b.n	8000f40 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xc8>
    }

    if(enable == bcd_status){
 8000eb6:	797b      	ldrb	r3, [r7, #5]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d126      	bne.n	8000f0a <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x92>
        for(uint8_t i=0; i<4; i++){
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73bb      	strb	r3, [r7, #14]
 8000ec0:	e01f      	b.n	8000f02 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x8a>
            if(Number & (1<<i)){
 8000ec2:	88fa      	ldrh	r2, [r7, #6]
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	fa42 f303 	asr.w	r3, r2, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x70>
                MCAL_GPIO_WritePin(GPIOA, (1<<i), GPIO_PIN_SET);
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2201      	movs	r2, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xd0>)
 8000ee2:	f000 feb0 	bl	8001c46 <MCAL_GPIO_WritePin>
 8000ee6:	e009      	b.n	8000efc <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x84>
            }
            else{
                MCAL_GPIO_WritePin(GPIOA, (1<<i), GPIO_PIN_RST);
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	2201      	movs	r2, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4814      	ldr	r0, [pc, #80]	@ (8000f48 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xd0>)
 8000ef8:	f000 fea5 	bl	8001c46 <MCAL_GPIO_WritePin>
        for(uint8_t i=0; i<4; i++){
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	3301      	adds	r3, #1
 8000f00:	73bb      	strb	r3, [r7, #14]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d9dc      	bls.n	8000ec2 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0x4a>
 8000f08:	e01a      	b.n	8000f40 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xc8>
            }
        }
    }
    else{
		uint8_t pattern = SevenSeg_LUT[Number];
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xd4>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	733b      	strb	r3, [r7, #12]
		for(uint8_t i = 0; i < 7; i++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	737b      	strb	r3, [r7, #13]
 8000f16:	e010      	b.n	8000f3a <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xc2>
				MCAL_GPIO_WritePin(GPIOA, i, GET_BIT(pattern, i));
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	b299      	uxth	r1, r3
 8000f1c:	7b3a      	ldrb	r2, [r7, #12]
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	fa42 f303 	asr.w	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xd0>)
 8000f30:	f000 fe89 	bl	8001c46 <MCAL_GPIO_WritePin>
		for(uint8_t i = 0; i < 7; i++){
 8000f34:	7b7b      	ldrb	r3, [r7, #13]
 8000f36:	3301      	adds	r3, #1
 8000f38:	737b      	strb	r3, [r7, #13]
 8000f3a:	7b7b      	ldrb	r3, [r7, #13]
 8000f3c:	2b06      	cmp	r3, #6
 8000f3e:	d9eb      	bls.n	8000f18 <HAL_SEVEN_SEG_WriteNumber_CommCathode+0xa0>
		}
    }
}
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	08001cfc 	.word	0x08001cfc

08000f50 <Enable_NVIC>:
/*
 * =======================================================
 * 					  Helper Functions
 * =======================================================
 */
void Enable_NVIC(uint16_t IRQ){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d854      	bhi.n	800100a <Enable_NVIC+0xba>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <Enable_NVIC+0x18>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000fa9 	.word	0x08000fa9
 8000f6c:	08000fb7 	.word	0x08000fb7
 8000f70:	08000fc5 	.word	0x08000fc5
 8000f74:	08000fd3 	.word	0x08000fd3
 8000f78:	08000fe1 	.word	0x08000fe1
 8000f7c:	08000fef 	.word	0x08000fef
 8000f80:	08000fef 	.word	0x08000fef
 8000f84:	08000fef 	.word	0x08000fef
 8000f88:	08000fef 	.word	0x08000fef
 8000f8c:	08000fef 	.word	0x08000fef
 8000f90:	08000ffd 	.word	0x08000ffd
 8000f94:	08000ffd 	.word	0x08000ffd
 8000f98:	08000ffd 	.word	0x08000ffd
 8000f9c:	08000ffd 	.word	0x08000ffd
 8000fa0:	08000ffd 	.word	0x08000ffd
 8000fa4:	08000ffd 	.word	0x08000ffd
		case 0:	 NVIC_IRQ6_EXTI0_EN()  	 	; break;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <Enable_NVIC+0xc8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e029      	b.n	800100a <Enable_NVIC+0xba>
		case 1:  NVIC_IRQ7_EXTI1_EN()  	 	; break;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a17      	ldr	r2, [pc, #92]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e022      	b.n	800100a <Enable_NVIC+0xba>
		case 2:	 NVIC_IRQ8_EXTI2_EN() 		; break;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e01b      	b.n	800100a <Enable_NVIC+0xba>
		case 3:	 NVIC_IRQ9_EXTI3_EN()    	; break;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e014      	b.n	800100a <Enable_NVIC+0xba>
		case 4:	 NVIC_IRQ10_EXTI4_EN() 	    ; break;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <Enable_NVIC+0xc8>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e00d      	b.n	800100a <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EXTI_5_9_EN()   ; break;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <Enable_NVIC+0xc8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <Enable_NVIC+0xc8>)
 8000ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e006      	b.n	800100a <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI_10_15_EN() ; break;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <Enable_NVIC+0xcc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <Enable_NVIC+0xcc>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	bf00      	nop
	}
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000e104 	.word	0xe000e104

08001020 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d854      	bhi.n	80010da <Disable_NVIC+0xba>
 8001030:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <Disable_NVIC+0x18>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	08001079 	.word	0x08001079
 800103c:	08001087 	.word	0x08001087
 8001040:	08001095 	.word	0x08001095
 8001044:	080010a3 	.word	0x080010a3
 8001048:	080010b1 	.word	0x080010b1
 800104c:	080010bf 	.word	0x080010bf
 8001050:	080010bf 	.word	0x080010bf
 8001054:	080010bf 	.word	0x080010bf
 8001058:	080010bf 	.word	0x080010bf
 800105c:	080010bf 	.word	0x080010bf
 8001060:	080010cd 	.word	0x080010cd
 8001064:	080010cd 	.word	0x080010cd
 8001068:	080010cd 	.word	0x080010cd
 800106c:	080010cd 	.word	0x080010cd
 8001070:	080010cd 	.word	0x080010cd
 8001074:	080010cd 	.word	0x080010cd
		case 0:	 NVIC_IRQ6_EXTI0_DIS()  	 ; break;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <Disable_NVIC+0xc8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <Disable_NVIC+0xc8>)
 800107e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e029      	b.n	80010da <Disable_NVIC+0xba>
		case 1:  NVIC_IRQ7_EXTI1_DIS()  	 ; break;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <Disable_NVIC+0xc8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <Disable_NVIC+0xc8>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e022      	b.n	80010da <Disable_NVIC+0xba>
		case 2:	 NVIC_IRQ8_EXTI2_DIS() 		 ; break;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <Disable_NVIC+0xc8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <Disable_NVIC+0xc8>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e01b      	b.n	80010da <Disable_NVIC+0xba>
		case 3:	 NVIC_IRQ9_EXTI3_DIS()    	 ; break;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <Disable_NVIC+0xc8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <Disable_NVIC+0xc8>)
 80010a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e014      	b.n	80010da <Disable_NVIC+0xba>
		case 4:	 NVIC_IRQ10_EXTI4_DIS() 	 ; break;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <Disable_NVIC+0xc8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <Disable_NVIC+0xc8>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e00d      	b.n	80010da <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EXTI_5_9_DIS()   ; break;
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <Disable_NVIC+0xc8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <Disable_NVIC+0xc8>)
 80010c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e006      	b.n	80010da <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI_10_15_DIS() ; break;
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <Disable_NVIC+0xcc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <Disable_NVIC+0xcc>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	bf00      	nop
	}
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e180 	.word	0xe000e180
 80010ec:	e000e184 	.word	0xe000e184

080010f0 <Set_EXTI>:

void Set_EXTI(EXTI_PinConfig_t *EXTI_PinConfig){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	// Configure EXTI Pin to be AF IP Floating
	GPIO_PinConfig_t EXTI_Pin;
	EXTI_Pin.GPIO_PinNumber = EXTI_PinConfig->EXTI_PIN.GPIO_PinNumber;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	891b      	ldrh	r3, [r3, #8]
 80010fc:	81bb      	strh	r3, [r7, #12]
	EXTI_Pin.GPIO_MODE = GPIO_MODE_IP;
 80010fe:	2300      	movs	r3, #0
 8001100:	81fb      	strh	r3, [r7, #14]
	EXTI_Pin.GPIO_PU_PD = GPIO_PU_PD_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	82fb      	strh	r3, [r7, #22]
	MCAL_GPIO_Init((EXTI_PinConfig->EXTI_PIN.GPIOx), &EXTI_Pin);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fc99 	bl	8001a48 <MCAL_GPIO_Init>

	// Update SYSCFG to route EXTI between port A B C
	uint8_t SYSCFG_EXTI_Index = (EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber) / 4;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	b29b      	uxth	r3, r3
 800111e:	77fb      	strb	r3, [r7, #31]
	uint8_t SYSCFG_EXTI_Position = ((EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber) % 4) * 4;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	77bb      	strb	r3, [r7, #30]

	// Clear the 4-bits before set
	SYSCFG->EXTICR[SYSCFG_EXTI_Index] &= ~(0xF << SYSCFG_EXTI_Position);
 8001130:	4a5f      	ldr	r2, [pc, #380]	@ (80012b0 <Set_EXTI+0x1c0>)
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	3302      	adds	r3, #2
 8001136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800113a:	7fbb      	ldrb	r3, [r7, #30]
 800113c:	210f      	movs	r1, #15
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	495a      	ldr	r1, [pc, #360]	@ (80012b0 <Set_EXTI+0x1c0>)
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	4002      	ands	r2, r0
 800114c:	3302      	adds	r3, #2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[SYSCFG_EXTI_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_PinConfig->EXTI_PIN.GPIOx) & 0xF) << SYSCFG_EXTI_Position);
 8001152:	4a57      	ldr	r2, [pc, #348]	@ (80012b0 <Set_EXTI+0x1c0>)
 8001154:	7ffb      	ldrb	r3, [r7, #31]
 8001156:	3302      	adds	r3, #2
 8001158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4954      	ldr	r1, [pc, #336]	@ (80012b4 <Set_EXTI+0x1c4>)
 8001162:	428b      	cmp	r3, r1
 8001164:	d016      	beq.n	8001194 <Set_EXTI+0xa4>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4953      	ldr	r1, [pc, #332]	@ (80012b8 <Set_EXTI+0x1c8>)
 800116c:	428b      	cmp	r3, r1
 800116e:	d00f      	beq.n	8001190 <Set_EXTI+0xa0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4951      	ldr	r1, [pc, #324]	@ (80012bc <Set_EXTI+0x1cc>)
 8001176:	428b      	cmp	r3, r1
 8001178:	d008      	beq.n	800118c <Set_EXTI+0x9c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4950      	ldr	r1, [pc, #320]	@ (80012c0 <Set_EXTI+0x1d0>)
 8001180:	428b      	cmp	r3, r1
 8001182:	d101      	bne.n	8001188 <Set_EXTI+0x98>
 8001184:	2303      	movs	r3, #3
 8001186:	e006      	b.n	8001196 <Set_EXTI+0xa6>
 8001188:	230f      	movs	r3, #15
 800118a:	e004      	b.n	8001196 <Set_EXTI+0xa6>
 800118c:	2302      	movs	r3, #2
 800118e:	e002      	b.n	8001196 <Set_EXTI+0xa6>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <Set_EXTI+0xa6>
 8001194:	2300      	movs	r3, #0
 8001196:	7fb9      	ldrb	r1, [r7, #30]
 8001198:	408b      	lsls	r3, r1
 800119a:	4618      	mov	r0, r3
 800119c:	4944      	ldr	r1, [pc, #272]	@ (80012b0 <Set_EXTI+0x1c0>)
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	4302      	orrs	r2, r0
 80011a2:	3302      	adds	r3, #2
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Update Trigger selection
	// Clear them before set
	EXTI->RTSR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80011a8:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <Set_EXTI+0x1d4>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	4611      	mov	r1, r2
 80011b2:	2201      	movs	r2, #1
 80011b4:	408a      	lsls	r2, r1
 80011b6:	43d2      	mvns	r2, r2
 80011b8:	4611      	mov	r1, r2
 80011ba:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <Set_EXTI+0x1d4>)
 80011bc:	400b      	ands	r3, r1
 80011be:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80011c0:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <Set_EXTI+0x1d4>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	4611      	mov	r1, r2
 80011ca:	2201      	movs	r2, #1
 80011cc:	408a      	lsls	r2, r1
 80011ce:	43d2      	mvns	r2, r2
 80011d0:	4611      	mov	r1, r2
 80011d2:	4a3c      	ldr	r2, [pc, #240]	@ (80012c4 <Set_EXTI+0x1d4>)
 80011d4:	400b      	ands	r3, r1
 80011d6:	60d3      	str	r3, [r2, #12]

	if(EXTI_TRIGGER_RISING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b5b      	ldrb	r3, [r3, #13]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10b      	bne.n	80011f8 <Set_EXTI+0x108>
		EXTI->RTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80011e0:	4b38      	ldr	r3, [pc, #224]	@ (80012c4 <Set_EXTI+0x1d4>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	4611      	mov	r1, r2
 80011ea:	2201      	movs	r2, #1
 80011ec:	408a      	lsls	r2, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	4a34      	ldr	r2, [pc, #208]	@ (80012c4 <Set_EXTI+0x1d4>)
 80011f2:	430b      	orrs	r3, r1
 80011f4:	6093      	str	r3, [r2, #8]
 80011f6:	e029      	b.n	800124c <Set_EXTI+0x15c>
	}
	else if(EXTI_TRIGGER_FALLING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b5b      	ldrb	r3, [r3, #13]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d10b      	bne.n	8001218 <Set_EXTI+0x128>
		EXTI->FTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8001200:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	8812      	ldrh	r2, [r2, #0]
 8001208:	4611      	mov	r1, r2
 800120a:	2201      	movs	r2, #1
 800120c:	408a      	lsls	r2, r1
 800120e:	4611      	mov	r1, r2
 8001210:	4a2c      	ldr	r2, [pc, #176]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001212:	430b      	orrs	r3, r1
 8001214:	60d3      	str	r3, [r2, #12]
 8001216:	e019      	b.n	800124c <Set_EXTI+0x15c>
	}
	else if(EXTI_TRIGGER_RISING_FALLING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7b5b      	ldrb	r3, [r3, #13]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d115      	bne.n	800124c <Set_EXTI+0x15c>
		EXTI->RTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	4611      	mov	r1, r2
 800122a:	2201      	movs	r2, #1
 800122c:	408a      	lsls	r2, r1
 800122e:	4611      	mov	r1, r2
 8001230:	4a24      	ldr	r2, [pc, #144]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001232:	430b      	orrs	r3, r1
 8001234:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8001236:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	4611      	mov	r1, r2
 8001240:	2201      	movs	r2, #1
 8001242:	408a      	lsls	r2, r1
 8001244:	4611      	mov	r1, r2
 8001246:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001248:	430b      	orrs	r3, r1
 800124a:	60d3      	str	r3, [r2, #12]
	}

	// Update IRQ CallBack function
	G_IRQ_CallBack[EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber] = EXTI_PinConfig->P_IRQ_CallBack;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <Set_EXTI+0x1d8>)
 8001258:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Enable/Disable IRQ EXTI & NVIC
	if(EXTI_IRQ_EN == (EXTI_PinConfig->EXTI_Enable)){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7b1b      	ldrb	r3, [r3, #12]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d110      	bne.n	8001286 <Set_EXTI+0x196>
		EXTI->IMR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	8812      	ldrh	r2, [r2, #0]
 800126c:	4611      	mov	r1, r2
 800126e:	2201      	movs	r2, #1
 8001270:	408a      	lsls	r2, r1
 8001272:	4611      	mov	r1, r2
 8001274:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001276:	430b      	orrs	r3, r1
 8001278:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe66 	bl	8000f50 <Enable_NVIC>
	}
	else{
		EXTI->IMR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
		Disable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
	}
}
 8001284:	e010      	b.n	80012a8 <Set_EXTI+0x1b8>
		EXTI->IMR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <Set_EXTI+0x1d4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	4611      	mov	r1, r2
 8001290:	2201      	movs	r2, #1
 8001292:	408a      	lsls	r2, r1
 8001294:	43d2      	mvns	r2, r2
 8001296:	4611      	mov	r1, r2
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <Set_EXTI+0x1d4>)
 800129a:	400b      	ands	r3, r1
 800129c:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff febc 	bl	8001020 <Disable_NVIC>
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40013c00 	.word	0x40013c00
 80012c8:	200000e8 	.word	0x200000e8

080012cc <MCAL_EXTI_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_PinConfig){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	Set_EXTI(EXTI_PinConfig);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff0b 	bl	80010f0 <Set_EXTI>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <EXTI0_IRQHandler>:
/*
 * ===================================
 * 			 ISR  Functions
 * ===================================
 */
void EXTI0_IRQHandler(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 0);
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <EXTI0_IRQHandler+0x1c>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <EXTI0_IRQHandler+0x1c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[0]();
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <EXTI0_IRQHandler+0x20>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4798      	blx	r3
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40013c00 	.word	0x40013c00
 8001304:	200000e8 	.word	0x200000e8

08001308 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 1);
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <EXTI1_IRQHandler+0x1c>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <EXTI1_IRQHandler+0x1c>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[1]();
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <EXTI1_IRQHandler+0x20>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4798      	blx	r3
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40013c00 	.word	0x40013c00
 8001328:	200000e8 	.word	0x200000e8

0800132c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 2);
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <EXTI2_IRQHandler+0x1c>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <EXTI2_IRQHandler+0x1c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[2]();
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <EXTI2_IRQHandler+0x20>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4798      	blx	r3
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40013c00 	.word	0x40013c00
 800134c:	200000e8 	.word	0x200000e8

08001350 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 3);
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <EXTI3_IRQHandler+0x1c>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <EXTI3_IRQHandler+0x1c>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[3]();
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <EXTI3_IRQHandler+0x20>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4798      	blx	r3
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40013c00 	.word	0x40013c00
 8001370:	200000e8 	.word	0x200000e8

08001374 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 4);
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <EXTI4_IRQHandler+0x1c>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <EXTI4_IRQHandler+0x1c>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[4]();
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <EXTI4_IRQHandler+0x20>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4798      	blx	r3
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40013c00 	.word	0x40013c00
 8001394:	200000e8 	.word	0x200000e8

08001398 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 5 ) {	EXTI->PR |=  (1 << 5)    ; G_IRQ_CallBack[5]() ;   }
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <EXTI9_5_IRQHandler+0x22>
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	4a22      	ldr	r2, [pc, #136]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	6153      	str	r3, [r2, #20]
 80013b4:	4b21      	ldr	r3, [pc, #132]	@ (800143c <EXTI9_5_IRQHandler+0xa4>)
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	4798      	blx	r3
	if (EXTI->PR & 1 << 6 ) {	EXTI->PR |=  (1 << 6)    ; G_IRQ_CallBack[6]() ;   }
 80013ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <EXTI9_5_IRQHandler+0x40>
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d0:	6153      	str	r3, [r2, #20]
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <EXTI9_5_IRQHandler+0xa4>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4798      	blx	r3
	if (EXTI->PR & 1 << 7 ) {	EXTI->PR |=  (1 << 7)    ; G_IRQ_CallBack[7]() ;   }
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <EXTI9_5_IRQHandler+0x5e>
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ee:	6153      	str	r3, [r2, #20]
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <EXTI9_5_IRQHandler+0xa4>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	4798      	blx	r3
	if (EXTI->PR & 1 << 8 ) {	EXTI->PR |=  (1 << 8)    ; G_IRQ_CallBack[8]() ;   }
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <EXTI9_5_IRQHandler+0x7c>
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <EXTI9_5_IRQHandler+0xa4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4798      	blx	r3
	if (EXTI->PR & 1 << 9 ) {	EXTI->PR |=  (1 << 9)    ; G_IRQ_CallBack[9]() ;   }
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <EXTI9_5_IRQHandler+0x9a>
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <EXTI9_5_IRQHandler+0xa0>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142a:	6153      	str	r3, [r2, #20]
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <EXTI9_5_IRQHandler+0xa4>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	4798      	blx	r3
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40013c00 	.word	0x40013c00
 800143c:	200000e8 	.word	0x200000e8

08001440 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 10 ) {	EXTI->PR |=  (1 << 10)    ; G_IRQ_CallBack[10]() ;   }
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <EXTI15_10_IRQHandler+0x22>
 8001450:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145a:	6153      	str	r3, [r2, #20]
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <EXTI15_10_IRQHandler+0xc0>)
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	4798      	blx	r3
	if (EXTI->PR & 1 << 11 ) {	EXTI->PR |=  (1 << 11)    ; G_IRQ_CallBack[11]() ;   }
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <EXTI15_10_IRQHandler+0x40>
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001474:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <EXTI15_10_IRQHandler+0xc0>)
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	4798      	blx	r3
	if (EXTI->PR & 1 << 12 ) {	EXTI->PR |=  (1 << 12)    ; G_IRQ_CallBack[12]() ;   }
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <EXTI15_10_IRQHandler+0x5e>
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	4a1a      	ldr	r2, [pc, #104]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 8001492:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001496:	6153      	str	r3, [r2, #20]
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <EXTI15_10_IRQHandler+0xc0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4798      	blx	r3
	if (EXTI->PR & 1 << 13 ) {	EXTI->PR |=  (1 << 13)    ; G_IRQ_CallBack[13]() ;   }
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <EXTI15_10_IRQHandler+0x7c>
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a13      	ldr	r2, [pc, #76]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <EXTI15_10_IRQHandler+0xc0>)
 80014b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ba:	4798      	blx	r3
	if (EXTI->PR & 1 << 14 ) {	EXTI->PR |=  (1 << 14)    ; G_IRQ_CallBack[14]() ;   }
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <EXTI15_10_IRQHandler+0x9a>
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d2:	6153      	str	r3, [r2, #20]
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <EXTI15_10_IRQHandler+0xc0>)
 80014d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d8:	4798      	blx	r3
	if (EXTI->PR & 1 << 15 ) {	EXTI->PR |=  (1 << 15)    ; G_IRQ_CallBack[15]() ;   }
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <EXTI15_10_IRQHandler+0xb8>
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <EXTI15_10_IRQHandler+0xbc>)
 80014ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <EXTI15_10_IRQHandler+0xc0>)
 80014f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f6:	4798      	blx	r3
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40013c00 	.word	0x40013c00
 8001500:	200000e8 	.word	0x200000e8

08001504 <I2C1_ER_IRQHandler>:
/*
 * ========================================================================
 * 				 				  ISR
 * ========================================================================
 */
void I2C1_ER_IRQHandler (void){
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 800151e:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <I2C1_EV_IRQHandler+0xe8>)
 8001520:	617b      	str	r3, [r7, #20]

	// Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (I2C_CR2_ITEVTEN) ;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800152a:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & (I2C_CR2_ITBUFEN) ;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	60fb      	str	r3, [r7, #12]
	temp3   = I2Cx->SR1 & (I2C_SR1_STOPF);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3){
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <I2C1_EV_IRQHandler+0x48>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <I2C1_EV_IRQHandler+0x48>
		// STOF flag is set
		// Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
		SlaveStates(I2Cx,Slave_EV_STOPF);
 8001554:	2100      	movs	r1, #0
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f000 f860 	bl	800161c <SlaveStates>
	}

	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by ADDR event
	// Note : When master mode : Address is sent
	// When Slave mode   : Address matched with own address
	if(temp1 && temp3){
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d012      	beq.n	8001592 <I2C1_EV_IRQHandler+0x7e>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00f      	beq.n	8001592 <I2C1_EV_IRQHandler+0x7e>
		// Interrupt is generated because of ADDR event
		// Check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL)){
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <I2C1_EV_IRQHandler+0x7e>
			/* master */
		}
		else{
			// Slave mode
			// Clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	607b      	str	r3, [r7, #4]
			dummy_read = I2Cx->SR2;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	607b      	str	r3, [r7, #4]
			SlaveStates(I2Cx,Slave_EV_ADDR_Sent);
 800158a:	2101      	movs	r1, #1
 800158c:	6978      	ldr	r0, [r7, #20]
 800158e:	f000 f845 	bl	800161c <SlaveStates>
		}
	}

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159a:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3){
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00f      	beq.n	80015c2 <I2C1_EV_IRQHandler+0xae>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00c      	beq.n	80015c2 <I2C1_EV_IRQHandler+0xae>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <I2C1_EV_IRQHandler+0xae>
		// Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL)){
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <I2C1_EV_IRQHandler+0xae>
			/* The device is master */
		}
		else{
			// Slave
			SlaveStates(I2Cx,Slave_EV_TxE);
 80015ba:	2104      	movs	r1, #4
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f000 f82d 	bl	800161c <SlaveStates>
		}
	}

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ca:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3){
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00f      	beq.n	80015f2 <I2C1_EV_IRQHandler+0xde>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00c      	beq.n	80015f2 <I2C1_EV_IRQHandler+0xde>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <I2C1_EV_IRQHandler+0xde>
		// Check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL)){
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <I2C1_EV_IRQHandler+0xde>
			/* The device is master */
		}
		else{
			// Slave
			SlaveStates(I2Cx,Slave_EV_RxNE);
 80015ea:	2103      	movs	r1, #3
 80015ec:	6978      	ldr	r0, [r7, #20]
 80015ee:	f000 f815 	bl	800161c <SlaveStates>
		}
	}
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40005400 	.word	0x40005400

08001600 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void){
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SlaveStates>:
		}
	}
	return BitStatus;
}

static void SlaveStates (I2C_TypeDef* I2Cx  ,Slave_State state){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]

	uint8_t index = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

	if(I2Cx == I2C1){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3c      	ldr	r2, [pc, #240]	@ (8001720 <SlaveStates+0x104>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d102      	bne.n	800163a <SlaveStates+0x1e>
		index = I2C1_Index;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e00c      	b.n	8001654 <SlaveStates+0x38>
	}
	else if(I2Cx == I2C2){
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a39      	ldr	r2, [pc, #228]	@ (8001724 <SlaveStates+0x108>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d102      	bne.n	8001648 <SlaveStates+0x2c>
		index = I2C2_Index;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e005      	b.n	8001654 <SlaveStates+0x38>
	}
	else if(I2Cx == I2C3){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a37      	ldr	r2, [pc, #220]	@ (8001728 <SlaveStates+0x10c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <SlaveStates+0x38>
		index = I2C3_Index;
 8001650:	2302      	movs	r3, #2
 8001652:	73fb      	strb	r3, [r7, #15]
	}

	switch(state){
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d85d      	bhi.n	8001716 <SlaveStates+0xfa>
 800165a:	a201      	add	r2, pc, #4	@ (adr r2, 8001660 <SlaveStates+0x44>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001685 	.word	0x08001685
 8001664:	080016a9 	.word	0x080016a9
 8001668:	08001717 	.word	0x08001717
 800166c:	080016e5 	.word	0x080016e5
 8001670:	080016c1 	.word	0x080016c1
 8001674:	08001679 	.word	0x08001679

		case Slave_ERR_AF:{
			// Make sure that the slave is really in transmitter mode
			if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d141      	bne.n	8001708 <SlaveStates+0xec>
			break ;
		}

		case Slave_EV_STOPF:{
			// Make sure that the slave is really in transmitter mode
			if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d03d      	beq.n	800170c <SlaveStates+0xf0>
				// Notify APP that the Stop Condition is sent by the master
				G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_STOPF) ;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	4926      	ldr	r1, [pc, #152]	@ (800172c <SlaveStates+0x110>)
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3324      	adds	r3, #36	@ 0x24
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2000      	movs	r0, #0
 80016a4:	4798      	blx	r3
			break ;
 80016a6:	e031      	b.n	800170c <SlaveStates+0xf0>
		}

		case Slave_EV_ADDR_Sent:{
			// Notify APP that the Stop Condition is sent by the master
			G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_ADDR_Sent) ;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	4920      	ldr	r1, [pc, #128]	@ (800172c <SlaveStates+0x110>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	3324      	adds	r3, #36	@ 0x24
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2001      	movs	r0, #1
 80016bc:	4798      	blx	r3
			break ;
 80016be:	e02a      	b.n	8001716 <SlaveStates+0xfa>
		}

		case Slave_EV_TxE:
		{
			// Make sure that the slave is really in transmitter mode
			if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d021      	beq.n	8001710 <SlaveStates+0xf4>
				// The APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
				G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_TxE) ;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	4917      	ldr	r1, [pc, #92]	@ (800172c <SlaveStates+0x110>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	3324      	adds	r3, #36	@ 0x24
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2004      	movs	r0, #4
 80016e0:	4798      	blx	r3
			break ;
 80016e2:	e015      	b.n	8001710 <SlaveStates+0xf4>
		}
		case Slave_EV_RxNE:{
			//make sure that the slave is really in receiver mode
			if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <SlaveStates+0xf8>
				//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
				G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_RxNE) ;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	490e      	ldr	r1, [pc, #56]	@ (800172c <SlaveStates+0x110>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3324      	adds	r3, #36	@ 0x24
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2003      	movs	r0, #3
 8001704:	4798      	blx	r3
			break ;
 8001706:	e005      	b.n	8001714 <SlaveStates+0xf8>
			break ;
 8001708:	bf00      	nop
 800170a:	e004      	b.n	8001716 <SlaveStates+0xfa>
			break ;
 800170c:	bf00      	nop
 800170e:	e002      	b.n	8001716 <SlaveStates+0xfa>
			break ;
 8001710:	bf00      	nop
 8001712:	e000      	b.n	8001716 <SlaveStates+0xfa>
			break ;
 8001714:	bf00      	nop
		}
	}
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40005400 	.word	0x40005400
 8001724:	40005800 	.word	0x40005800
 8001728:	40005c00 	.word	0x40005c00
 800172c:	20000128 	.word	0x20000128

08001730 <SPI1_IRQHandler>:
/*
 * ========================================================================
 * 				 				  ISR
 * ========================================================================
 */
void SPI1_IRQHandler(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SR &  (1<<1)) >> 1);
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <SPI1_IRQHandler+0x54>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	793b      	ldrb	r3, [r7, #4]
 8001744:	f362 0300 	bfi	r3, r2, #0, #1
 8001748:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR &  (1<<0)) >> 0);
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <SPI1_IRQHandler+0x54>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	793b      	ldrb	r3, [r7, #4]
 8001756:	f362 0341 	bfi	r3, r2, #1, #1
 800175a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR &  (1<<4)) >> 4);
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <SPI1_IRQHandler+0x54>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	793b      	ldrb	r3, [r7, #4]
 800176a:	f362 0382 	bfi	r3, r2, #2, #1
 800176e:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <SPI1_IRQHandler+0x58>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	7938      	ldrb	r0, [r7, #4]
 8001778:	4798      	blx	r3
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40013000 	.word	0x40013000
 8001788:	200001a0 	.word	0x200001a0

0800178c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SR &  (1<<1)) >> 1);
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <SPI2_IRQHandler+0x54>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	793b      	ldrb	r3, [r7, #4]
 80017a0:	f362 0300 	bfi	r3, r2, #0, #1
 80017a4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR &  (1<<0)) >> 0);
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <SPI2_IRQHandler+0x54>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	793b      	ldrb	r3, [r7, #4]
 80017b2:	f362 0341 	bfi	r3, r2, #1, #1
 80017b6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR &  (1<<4)) >> 4);
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <SPI2_IRQHandler+0x54>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	793b      	ldrb	r3, [r7, #4]
 80017c6:	f362 0382 	bfi	r3, r2, #2, #1
 80017ca:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <SPI2_IRQHandler+0x58>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	7938      	ldrb	r0, [r7, #4]
 80017d4:	4798      	blx	r3
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40003800 	.word	0x40003800
 80017e4:	200001a0 	.word	0x200001a0

080017e8 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI3->SR &  (1<<1)) >> 1);
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <SPI3_IRQHandler+0x54>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	793b      	ldrb	r3, [r7, #4]
 80017fc:	f362 0300 	bfi	r3, r2, #0, #1
 8001800:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI3->SR &  (1<<0)) >> 0);
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <SPI3_IRQHandler+0x54>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	793b      	ldrb	r3, [r7, #4]
 800180e:	f362 0341 	bfi	r3, r2, #1, #1
 8001812:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI3->SR &  (1<<4)) >> 4);
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <SPI3_IRQHandler+0x54>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	793b      	ldrb	r3, [r7, #4]
 8001822:	f362 0382 	bfi	r3, r2, #2, #1
 8001826:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI3_Index]->P_IRQ_CallBack(irq_src);
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SPI3_IRQHandler+0x58>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	7938      	ldrb	r0, [r7, #4]
 8001830:	4798      	blx	r3
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40003c00 	.word	0x40003c00
 8001840:	200001a0 	.word	0x200001a0

08001844 <MCAL_SysTicK_Init>:
#include "stm32f401xc_SysTick_driver.h"

static void(* GP_Function_CallBack)(void) = NULL;
static uint8_t G_SingleFlag = 0;

void MCAL_SysTicK_Init(SysTick_Config_t *SysTick_CFG){
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	// Clear SysTick Timer by clear Enable
	SysTick->CTRL &= ~(1 << 0);
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

	/// Interrupt Enable/Disable
	if(SysTick_Interrupt_EN == (SysTick_CFG->SysTick_InterruptEnable)){
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <MCAL_SysTicK_Init+0x2a>
		SysTick->CTRL |= (1 << 1);
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e005      	b.n	800187a <MCAL_SysTicK_Init+0x36>
	}
	else{
		SysTick->CTRL &= ~(1 << 1);
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001874:	f023 0302 	bic.w	r3, r3, #2
 8001878:	6013      	str	r3, [r2, #0]
	}

	// Select Clock source AHB or AHB/8
	if(SysTick_CLK_AHB == (SysTick_CFG->SysTick_CLKSource)){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d106      	bne.n	8001890 <MCAL_SysTicK_Init+0x4c>
		SysTick->CTRL |= (1 << 2);
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6013      	str	r3, [r2, #0]
	}
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
		SysTick->CTRL &= ~(1 << 2);
	}
}
 800188e:	e009      	b.n	80018a4 <MCAL_SysTicK_Init+0x60>
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <MCAL_SysTicK_Init+0x60>
		SysTick->CTRL &= ~(1 << 2);
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <MCAL_SysTicK_Init+0x6c>)
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <MCAL_SysTicK_StartTimer>:

void MCAL_SysTicK_StartTimer(uint32_t ReloadValue){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	// Load Timer with ReloadValue
	SysTick->LOAD = ReloadValue - 1;
 80018bc:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <MCAL_SysTicK_StartTimer+0x30>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	6053      	str	r3, [r2, #4]

	// Reset Timer
	SysTick->VAL = 0;
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <MCAL_SysTicK_StartTimer+0x30>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]

	// Start Timer
	SysTick->CTRL |= (1 << 0);
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <MCAL_SysTicK_StartTimer+0x30>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a05      	ldr	r2, [pc, #20]	@ (80018e4 <MCAL_SysTicK_StartTimer+0x30>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <MCAL_SysTicK_StopTimer>:

void MCAL_SysTicK_StopTimer(void){
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	// Stop SysTick Counter
	SysTick->CTRL &= ~(1 << 0);
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <MCAL_SysTicK_StopTimer+0x1c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <MCAL_SysTicK_StopTimer+0x1c>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <MCAL_SysTicK_SetDelay_ms>:

void MCAL_SysTicK_SetDelay_ms(uint32_t Delay_Time_ms){
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	// When Select  Clock Source = 25Mhz / 8
	uint32_t ticks = Delay_Time_ms;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60fb      	str	r3, [r7, #12]

	// Reset Timer
	SysTick->VAL = 0;
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <MCAL_SysTicK_SetDelay_ms+0x44>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]

	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d010      	beq.n	8001942 <MCAL_SysTicK_SetDelay_ms+0x3a>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001926:	4293      	cmp	r3, r2
 8001928:	d20b      	bcs.n	8001942 <MCAL_SysTicK_SetDelay_ms+0x3a>
		MCAL_SysTicK_StartTimer(ticks);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ffc2 	bl	80018b4 <MCAL_SysTicK_StartTimer>

		// Wait till Timer Flag is raised
		while(0 == GET_BIT(SysTick->CTRL, COUNTFLAG));
 8001930:	bf00      	nop
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MCAL_SysTicK_SetDelay_ms+0x44>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f9      	beq.n	8001932 <MCAL_SysTicK_SetDelay_ms+0x2a>
		MCAL_SysTicK_StopTimer();
 800193e:	f7ff ffd3 	bl	80018e8 <MCAL_SysTicK_StopTimer>
	}
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <MCAL_SysTicK_GetElapsedTime_SingleShot>:

uint32_t MCAL_SysTicK_GetElapsedTime_SingleShot(void){
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	return (SysTick->LOAD) - (SysTick->VAL);
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <MCAL_SysTicK_GetElapsedTime_SingleShot+0x18>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <MCAL_SysTicK_GetElapsedTime_SingleShot+0x18>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	1ad3      	subs	r3, r2, r3
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e010 	.word	0xe000e010

0800196c <MCAL_SysTicK_SetInterval_Single>:

uint32_t MCAL_SysTicK_GetRemainingTime_SingleShot(void){
	return (SysTick->VAL);
}

void MCAL_SysTicK_SetInterval_Single(uint32_t Delay_Time_ms, void(* P_Function_CallBack)(void)){
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	G_SingleFlag = 1;
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MCAL_SysTicK_SetInterval_Single+0x48>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]

	uint32_t ticks = Delay_Time_ms * 3125;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	60fb      	str	r3, [r7, #12]

	GP_Function_CallBack = P_Function_CallBack;
 8001988:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <MCAL_SysTicK_SetInterval_Single+0x4c>)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6013      	str	r3, [r2, #0]

	// Reset Timer
	SysTick->VAL = 0;
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <MCAL_SysTicK_SetInterval_Single+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]

	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <MCAL_SysTicK_SetInterval_Single+0x3e>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d202      	bcs.n	80019aa <MCAL_SysTicK_SetInterval_Single+0x3e>
		MCAL_SysTicK_StartTimer(ticks);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff85 	bl	80018b4 <MCAL_SysTicK_StartTimer>
	}
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001b0 	.word	0x200001b0
 80019b8:	200001ac 	.word	0x200001ac
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <SysTick_Handler>:
	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
		MCAL_SysTicK_StartTimer(ticks);
	}
}

void SysTick_Handler(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	if(GP_Function_CallBack != NULL){
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <SysTick_Handler+0x24>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <SysTick_Handler+0x12>
		GP_Function_CallBack();
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <SysTick_Handler+0x24>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4798      	blx	r3

	}

	if(1 == G_SingleFlag){
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <SysTick_Handler+0x28>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <SysTick_Handler+0x1e>
		MCAL_SysTicK_StopTimer();
 80019da:	f7ff ff85 	bl	80018e8 <MCAL_SysTicK_StopTimer>
	}

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001ac 	.word	0x200001ac
 80019e8:	200001b0 	.word	0x200001b0

080019ec <USART1_IRQHandler>:
/*
 * ========================================================================
 * 				 				  ISR
 * ========================================================================
 */
void USART1_IRQHandler(void){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
    S_USART_IRQ_SRC irq_src;

    irq_src.TXE  = ((USART1->SR &  (1<<7)) >> 7);
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <USART1_IRQHandler+0x54>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	09db      	lsrs	r3, r3, #7
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	793b      	ldrb	r3, [r7, #4]
 8001a00:	f362 0300 	bfi	r3, r2, #0, #1
 8001a04:	713b      	strb	r3, [r7, #4]
    irq_src.RXNE = ((USART1->SR &  (1<<5)) >> 5);
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <USART1_IRQHandler+0x54>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	793b      	ldrb	r3, [r7, #4]
 8001a14:	f362 0341 	bfi	r3, r2, #1, #1
 8001a18:	713b      	strb	r3, [r7, #4]
    irq_src.TCE  = ((USART1->SR &  (1<<6)) >> 6);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <USART1_IRQHandler+0x54>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	793b      	ldrb	r3, [r7, #4]
 8001a28:	f362 0382 	bfi	r3, r2, #2, #1
 8001a2c:	713b      	strb	r3, [r7, #4]

    G_UART_config->P_IRQ_CallBack(irq_src);
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <USART1_IRQHandler+0x58>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	7938      	ldrb	r0, [r7, #4]
 8001a36:	4798      	blx	r3
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40011000 	.word	0x40011000
 8001a44:	200001b4 	.word	0x200001b4

08001a48 <MCAL_GPIO_Init>:
  * @param [in]  	- GPIOx: x can be (A....E depends on device) to select GPIO Peripherals
  * @param [in] 	- pinConfig: pointer to GPIO_PinConfig_t structure that contains the config info for pin
  * @retval 		- none
  * Note 			- stm32f103xx have GPIO A,B,C,D,E but this package has only A and B fully and some of C and D
  */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    uint32_t pin = PinConfig->GPIO_PinNumber;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]

    // Clear old data from registers
    GPIOx->MODER   &= ~(0x3 << (2 * pin));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	0052      	lsls	r2, r2, #1
 8001a60:	2103      	movs	r1, #3
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	43d2      	mvns	r2, r2
 8001a68:	401a      	ands	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
    GPIOx->OTYPER  &= ~(1   << pin);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2101      	movs	r1, #1
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	43d2      	mvns	r2, r2
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	605a      	str	r2, [r3, #4]
    GPIOx->OSPEEDR &= ~(0x3 << (2 * pin));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	0052      	lsls	r2, r2, #1
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	43d2      	mvns	r2, r2
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
    GPIOx->PUPDR   &= ~(0x3 << (2 * pin));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	43d2      	mvns	r2, r2
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60da      	str	r2, [r3, #12]

    // Set new config
    switch (PinConfig->GPIO_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	885b      	ldrh	r3, [r3, #2]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	f000 809c 	beq.w	8001bf0 <MCAL_GPIO_Init+0x1a8>
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	f300 80b0 	bgt.w	8001c1e <MCAL_GPIO_Init+0x1d6>
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d002      	beq.n	8001ac8 <MCAL_GPIO_Init+0x80>
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d02e      	beq.n	8001b24 <MCAL_GPIO_Init+0xdc>
 8001ac6:	e0aa      	b.n	8001c1e <MCAL_GPIO_Init+0x1d6>
    {
    case GPIO_MODE_OP:   // General purpose output
        GPIOx->MODER   |= (0x1 << (2 * pin));   // 01
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	8912      	ldrh	r2, [r2, #8]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	8992      	ldrh	r2, [r2, #12]
 8001afa:	4611      	mov	r1, r2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	0052      	lsls	r2, r2, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	8952      	ldrh	r2, [r2, #10]
 8001b12:	4611      	mov	r1, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	0052      	lsls	r2, r2, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60da      	str	r2, [r3, #12]
        break;
 8001b22:	e08a      	b.n	8001c3a <MCAL_GPIO_Init+0x1f2>

    case GPIO_MODE_AF:   // Alternate function
        GPIOx->MODER   |= (0x2 << (2 * pin));   // 10
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	0052      	lsls	r2, r2, #1
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	8912      	ldrh	r2, [r2, #8]
 8001b40:	4611      	mov	r1, r2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	8992      	ldrh	r2, [r2, #12]
 8001b56:	4611      	mov	r1, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	0052      	lsls	r2, r2, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	8952      	ldrh	r2, [r2, #10]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	0052      	lsls	r2, r2, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]

        // Configure AF (AFRL [0..7], AFRH [8..15])
        if (pin < 8) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	d816      	bhi.n	8001bb2 <MCAL_GPIO_Init+0x16a>
            GPIOx->AFR[0] &= ~(0xF << (4 * pin));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	43d2      	mvns	r2, r2
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	621a      	str	r2, [r3, #32]
            GPIOx->AFR[0] |= (PinConfig->GPIO_AFx << (4 * pin));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1a      	ldr	r2, [r3, #32]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	621a      	str	r2, [r3, #32]
        }
        else if((pin >= 8) && (pin < 16)){
            GPIOx->AFR[1] &= ~(0xF << (4 * (pin - 8)));
            GPIOx->AFR[1] |= (PinConfig->GPIO_AFx << (4 * (pin - 8)));
        }
        break;
 8001bb0:	e042      	b.n	8001c38 <MCAL_GPIO_Init+0x1f0>
        else if((pin >= 8) && (pin < 16)){
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b07      	cmp	r3, #7
 8001bb6:	d93f      	bls.n	8001c38 <MCAL_GPIO_Init+0x1f0>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	d83c      	bhi.n	8001c38 <MCAL_GPIO_Init+0x1f0>
            GPIOx->AFR[1] &= ~(0xF << (4 * (pin - 8)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	3a08      	subs	r2, #8
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	210f      	movs	r1, #15
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	43d2      	mvns	r2, r2
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24
            GPIOx->AFR[1] |= (PinConfig->GPIO_AFx << (4 * (pin - 8)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b08      	subs	r3, #8
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8001bee:	e023      	b.n	8001c38 <MCAL_GPIO_Init+0x1f0>

    case GPIO_MODE_Analog:   // Analog
        GPIOx->MODER   |= (0x3 << (2 * pin));   // 11
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	2103      	movs	r1, #3
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	601a      	str	r2, [r3, #0]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	8952      	ldrh	r2, [r2, #10]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	0052      	lsls	r2, r2, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]
        break;
 8001c1c:	e00d      	b.n	8001c3a <MCAL_GPIO_Init+0x1f2>

    case GPIO_MODE_IP:   // Input
    default:
        // Input mode (00)
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	8952      	ldrh	r2, [r2, #10]
 8001c26:	4611      	mov	r1, r2
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	0052      	lsls	r2, r2, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60da      	str	r2, [r3, #12]
        break;
 8001c36:	e000      	b.n	8001c3a <MCAL_GPIO_Init+0x1f2>
        break;
 8001c38:	bf00      	nop
    }
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <MCAL_GPIO_WritePin>:
  * @param [in]  	- pinNo: can be (0...15 depends on GPIOx) to select pin number
  * @param [in]  	- Value: the sate of the pin (can be two values based on @ref GPIO_PIN_state)
  * @retval 		- None
  * Note 			- None
  */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint16_t value){
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]
 8001c52:	4613      	mov	r3, r2
 8001c54:	803b      	strh	r3, [r7, #0]
	if(value == GPIO_PIN_SET){
 8001c56:	883b      	ldrh	r3, [r7, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d109      	bne.n	8001c70 <MCAL_GPIO_WritePin+0x2a>
		// BSy: Port x Set bit y (y= 0 .. 15)
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
        GPIOx->ODR |= (1 << PinNumber);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	887a      	ldrh	r2, [r7, #2]
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	615a      	str	r2, [r3, #20]
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bit
        GPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8001c6e:	e009      	b.n	8001c84 <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1 << PinNumber);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	43d2      	mvns	r2, r2
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	615a      	str	r2, [r3, #20]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <__libc_init_array>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4d0d      	ldr	r5, [pc, #52]	@ (8001cc8 <__libc_init_array+0x38>)
 8001c94:	4c0d      	ldr	r4, [pc, #52]	@ (8001ccc <__libc_init_array+0x3c>)
 8001c96:	1b64      	subs	r4, r4, r5
 8001c98:	10a4      	asrs	r4, r4, #2
 8001c9a:	2600      	movs	r6, #0
 8001c9c:	42a6      	cmp	r6, r4
 8001c9e:	d109      	bne.n	8001cb4 <__libc_init_array+0x24>
 8001ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8001cd0 <__libc_init_array+0x40>)
 8001ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8001cd4 <__libc_init_array+0x44>)
 8001ca4:	f000 f818 	bl	8001cd8 <_init>
 8001ca8:	1b64      	subs	r4, r4, r5
 8001caa:	10a4      	asrs	r4, r4, #2
 8001cac:	2600      	movs	r6, #0
 8001cae:	42a6      	cmp	r6, r4
 8001cb0:	d105      	bne.n	8001cbe <__libc_init_array+0x2e>
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
 8001cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb8:	4798      	blx	r3
 8001cba:	3601      	adds	r6, #1
 8001cbc:	e7ee      	b.n	8001c9c <__libc_init_array+0xc>
 8001cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc2:	4798      	blx	r3
 8001cc4:	3601      	adds	r6, #1
 8001cc6:	e7f2      	b.n	8001cae <__libc_init_array+0x1e>
 8001cc8:	08001d08 	.word	0x08001d08
 8001ccc:	08001d08 	.word	0x08001d08
 8001cd0:	08001d08 	.word	0x08001d08
 8001cd4:	08001d0c 	.word	0x08001d0c

08001cd8 <_init>:
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	bf00      	nop
 8001cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cde:	bc08      	pop	{r3}
 8001ce0:	469e      	mov	lr, r3
 8001ce2:	4770      	bx	lr

08001ce4 <_fini>:
 8001ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce6:	bf00      	nop
 8001ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cea:	bc08      	pop	{r3}
 8001cec:	469e      	mov	lr, r3
 8001cee:	4770      	bx	lr
