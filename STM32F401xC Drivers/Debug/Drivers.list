
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b0c  08000b0c  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b0c  08000b0c  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000b0c  08000b0c  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000b0c  08000b0c  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b0c  08000b0c  00001b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b10  08000b10  00001b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000b14  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000008  08000b1c  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000b1c  0000207c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d4f  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000075d  00000000  00000000  00003d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d02  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000051e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00005400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014a6  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014c2  00000000  00000000  00006a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005f82  00000000  00000000  00007f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000de9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006a0  00000000  00000000  0000dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000af4 	.word	0x08000af4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000af4 	.word	0x08000af4

080001d4 <Clock_Init>:
#include "Led_Matrix_driver.h"
#include "SevenSegment_driver.h"
#include "DAC_driver.h"
#include "Serial2Parallel_drivers.h"

void Clock_Init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <Clock_Init+0x34>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <Clock_Init+0x34>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOB_CLK_EN();
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <Clock_Init+0x34>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <Clock_Init+0x34>)
 80001ea:	f043 0302 	orr.w	r3, r3, #2
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_SYSCFG_CLK_EN();
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <Clock_Init+0x34>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <Clock_Init+0x34>)
 80001f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001fa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800

0800020c <main>:
//	HAL_DAC_Init(GPIOA, sound_pins, 8);
//}

uint8_t arr[8] = {0x00, 0x02, 0x03, 0xB1, 0xB9, 0x0F, 0x06, 0x00};

int main(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	// Select AHB / 8 temporary until i make driver or it
	RCC->CR |= (1 << 16);
 8000212:	4b1e      	ldr	r3, [pc, #120]	@ (800028c <main+0x80>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a1d      	ldr	r2, [pc, #116]	@ (800028c <main+0x80>)
 8000218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800021c:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << 17)));
 800021e:	bf00      	nop
 8000220:	4b1a      	ldr	r3, [pc, #104]	@ (800028c <main+0x80>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <main+0x14>
	RCC->CFGR &= ~(0x3 << 0);
 800022c:	4b17      	ldr	r3, [pc, #92]	@ (800028c <main+0x80>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a16      	ldr	r2, [pc, #88]	@ (800028c <main+0x80>)
 8000232:	f023 0303 	bic.w	r3, r3, #3
 8000236:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x1 << 0);
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <main+0x80>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a13      	ldr	r2, [pc, #76]	@ (800028c <main+0x80>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6093      	str	r3, [r2, #8]
	while (((RCC->CFGR >> 2) & 0x3) != 0x1);
 8000244:	bf00      	nop
 8000246:	4b11      	ldr	r3, [pc, #68]	@ (800028c <main+0x80>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	f003 030c 	and.w	r3, r3, #12
 800024e:	2b04      	cmp	r3, #4
 8000250:	d1f9      	bne.n	8000246 <main+0x3a>

	Clock_Init();
 8000252:	f7ff ffbf 	bl	80001d4 <Clock_Init>

	S2P_PinConfig_t S2P_pin;
	S2P_pin.S2P_Data_Pin = GPIO_PIN_0;
 8000256:	2300      	movs	r3, #0
 8000258:	713b      	strb	r3, [r7, #4]
	S2P_pin.S2P_LatchCLK_Pin = GPIO_PIN_1;
 800025a:	2301      	movs	r3, #1
 800025c:	71bb      	strb	r3, [r7, #6]
	S2P_pin.S2P_ShiftCLK_Pin = GPIO_PIN_2;
 800025e:	2302      	movs	r3, #2
 8000260:	717b      	strb	r3, [r7, #5]

	HAL_Serial2Parallel_Init(GPIOA, GPIOA, GPIOA, &S2P_pin);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <main+0x84>)
 8000266:	490a      	ldr	r1, [pc, #40]	@ (8000290 <main+0x84>)
 8000268:	4809      	ldr	r0, [pc, #36]	@ (8000290 <main+0x84>)
 800026a:	f000 f895 	bl	8000398 <HAL_Serial2Parallel_Init>

	HAL_LedMatrix_S2P_Init(GPIOA, GPIOA, GPIOA, &S2P_pin);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4a07      	ldr	r2, [pc, #28]	@ (8000290 <main+0x84>)
 8000272:	4907      	ldr	r1, [pc, #28]	@ (8000290 <main+0x84>)
 8000274:	4806      	ldr	r0, [pc, #24]	@ (8000290 <main+0x84>)
 8000276:	f000 f838 	bl	80002ea <HAL_LedMatrix_S2P_Init>

	HAL_LedMatrix_S2P_DisplayFrame(&S2P_pin, arr, 500);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000280:	4904      	ldr	r1, [pc, #16]	@ (8000294 <main+0x88>)
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f84c 	bl	8000320 <HAL_LedMatrix_S2P_DisplayFrame>

	while(1);
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <main+0x7c>
 800028c:	40023800 	.word	0x40023800
 8000290:	40020000 	.word	0x40020000
 8000294:	20000000 	.word	0x20000000

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	@ (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	@ (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 fbf1 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002ca:	f7ff ff9f 	bl	800020c <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80002dc:	08000b14 	.word	0x08000b14
  ldr r2, =_sbss
 80002e0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80002e4:	2000007c 	.word	0x2000007c

080002e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC_IRQHandler>

080002ea <HAL_LedMatrix_S2P_Init>:
	SysTick_CFG.SysTick_InterruptEnable = SysTick_Interrupt_DIS;
	SysTick_CFG.SysTick_CLKSource = SysTick_CLK_AHB_8;
	MCAL_SysTicK_Init(&SysTick_CFG);
}

void HAL_LedMatrix_S2P_Init(GPIO_TypeDef *GPIOx_data, GPIO_TypeDef *GPIOx_shift, GPIO_TypeDef *GPIOx_latch, S2P_PinConfig_t *S2P_pin){
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b086      	sub	sp, #24
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	60b9      	str	r1, [r7, #8]
 80002f4:	607a      	str	r2, [r7, #4]
 80002f6:	603b      	str	r3, [r7, #0]
	HAL_Serial2Parallel_Init(GPIOx_data, GPIOx_shift, GPIOx_latch, S2P_pin);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	68b9      	ldr	r1, [r7, #8]
 80002fe:	68f8      	ldr	r0, [r7, #12]
 8000300:	f000 f84a 	bl	8000398 <HAL_Serial2Parallel_Init>

	SysTick_Config_t SysTIck_cfg;
	SysTIck_cfg.SysTick_InterruptEnable= SysTick_Interrupt_DIS;
 8000304:	2300      	movs	r3, #0
 8000306:	753b      	strb	r3, [r7, #20]
	SysTIck_cfg.SysTick_CLKSource = SysTick_CLK_AHB_8;
 8000308:	2300      	movs	r3, #0
 800030a:	757b      	strb	r3, [r7, #21]

	MCAL_SysTicK_Init(&SysTIck_cfg);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fa0b 	bl	800072c <MCAL_SysTicK_Init>

}
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <HAL_LedMatrix_S2P_DisplayFrame>:
			HAL_LedMatrix_DisableAllCol();
		}
	}
}

void HAL_LedMatrix_S2P_DisplayFrame(S2P_PinConfig_t *S2P_pin, uint8_t frame[], uint32_t FrameDelay){
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
	for(uint32_t j = 0; j < FrameDelay; j++){
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	e027      	b.n	8000382 <HAL_LedMatrix_S2P_DisplayFrame+0x62>

		for(uint8_t i = 0; i < G_cols_number; i++){
 8000332:	2300      	movs	r3, #0
 8000334:	74fb      	strb	r3, [r7, #19]
 8000336:	e01c      	b.n	8000372 <HAL_LedMatrix_S2P_DisplayFrame+0x52>
            // Disable all columns
			HAL_Serial2Parallel_SendData(S2P_pin, (((frame[i]) << 8) | 0x00));
 8000338:	7cfb      	ldrb	r3, [r7, #19]
 800033a:	68ba      	ldr	r2, [r7, #8]
 800033c:	4413      	add	r3, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	021b      	lsls	r3, r3, #8
 8000342:	4619      	mov	r1, r3
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f000 f87b 	bl	8000440 <HAL_Serial2Parallel_SendData>

            // Send row & enable current column
			HAL_Serial2Parallel_SendData(S2P_pin, (((frame[i]) << 8) | (1 << i)));
 800034a:	7cfb      	ldrb	r3, [r7, #19]
 800034c:	68ba      	ldr	r2, [r7, #8]
 800034e:	4413      	add	r3, r2
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	021a      	lsls	r2, r3, #8
 8000354:	7cfb      	ldrb	r3, [r7, #19]
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	4313      	orrs	r3, r2
 800035e:	4619      	mov	r1, r3
 8000360:	68f8      	ldr	r0, [r7, #12]
 8000362:	f000 f86d 	bl	8000440 <HAL_Serial2Parallel_SendData>

			MCAL_SysTicK_SetDelay_ms(ScanTime);
 8000366:	2002      	movs	r0, #2
 8000368:	f000 fa42 	bl	80007f0 <MCAL_SysTicK_SetDelay_ms>
		for(uint8_t i = 0; i < G_cols_number; i++){
 800036c:	7cfb      	ldrb	r3, [r7, #19]
 800036e:	3301      	adds	r3, #1
 8000370:	74fb      	strb	r3, [r7, #19]
 8000372:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <HAL_LedMatrix_S2P_DisplayFrame+0x74>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	7cfa      	ldrb	r2, [r7, #19]
 8000378:	429a      	cmp	r2, r3
 800037a:	d3dd      	bcc.n	8000338 <HAL_LedMatrix_S2P_DisplayFrame+0x18>
	for(uint32_t j = 0; j < FrameDelay; j++){
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	429a      	cmp	r2, r3
 8000388:	d3d3      	bcc.n	8000332 <HAL_LedMatrix_S2P_DisplayFrame+0x12>
		}
	}
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000024 	.word	0x20000024

08000398 <HAL_Serial2Parallel_Init>:
/*
 * ==================================================
 * 		 APIs Supported by "MCAL GPIO DRIVER"
 * ==================================================
 */
void HAL_Serial2Parallel_Init(GPIO_TypeDef *GPIOx_data, GPIO_TypeDef *GPIOx_shift, GPIO_TypeDef *GPIOx_latch, S2P_PinConfig_t *S2P_pin){
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	@ 0x40
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
 80003a4:	603b      	str	r3, [r7, #0]
	G_GPIOx_data = GPIOx_data;
 80003a6:	4a23      	ldr	r2, [pc, #140]	@ (8000434 <HAL_Serial2Parallel_Init+0x9c>)
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	6013      	str	r3, [r2, #0]
	G_GPIOx_shift = GPIOx_shift;
 80003ac:	4a22      	ldr	r2, [pc, #136]	@ (8000438 <HAL_Serial2Parallel_Init+0xa0>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6013      	str	r3, [r2, #0]
	G_GPIOx_latch = GPIOx_latch;
 80003b2:	4a22      	ldr	r2, [pc, #136]	@ (800043c <HAL_Serial2Parallel_Init+0xa4>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6013      	str	r3, [r2, #0]

	GPIO_PinConfig_t data;
	data.GPIO_PinNumber = S2P_pin->S2P_Data_Pin;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	863b      	strh	r3, [r7, #48]	@ 0x30
	data.GPIO_MODE = GPIO_MODE_OP;
 80003be:	2301      	movs	r3, #1
 80003c0:	867b      	strh	r3, [r7, #50]	@ 0x32
	data.GPIO_TYPE = GPIO_TYPE_PP;
 80003c2:	2300      	movs	r3, #0
 80003c4:	873b      	strh	r3, [r7, #56]	@ 0x38
	data.GPIO_Output_Speed = GPIO_SPEED_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	data.GPIO_PU_PD = GPIO__PU_PD_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	877b      	strh	r3, [r7, #58]	@ 0x3a

	GPIO_PinConfig_t shift;
	shift.GPIO_PinNumber = S2P_pin->S2P_ShiftCLK_Pin;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	843b      	strh	r3, [r7, #32]
	shift.GPIO_MODE = GPIO_MODE_OP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	847b      	strh	r3, [r7, #34]	@ 0x22
	shift.GPIO_TYPE = GPIO_TYPE_PP;
 80003d8:	2300      	movs	r3, #0
 80003da:	853b      	strh	r3, [r7, #40]	@ 0x28
	shift.GPIO_Output_Speed = GPIO_SPEED_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	shift.GPIO_PU_PD = GPIO__PU_PD_NONE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	857b      	strh	r3, [r7, #42]	@ 0x2a

	GPIO_PinConfig_t latch;
	latch.GPIO_PinNumber = S2P_pin->S2P_LatchCLK_Pin;
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	823b      	strh	r3, [r7, #16]
	latch.GPIO_MODE = GPIO_MODE_OP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	827b      	strh	r3, [r7, #18]
	latch.GPIO_TYPE = GPIO_TYPE_PP;
 80003ee:	2300      	movs	r3, #0
 80003f0:	833b      	strh	r3, [r7, #24]
	latch.GPIO_Output_Speed = GPIO_SPEED_LOW;
 80003f2:	2300      	movs	r3, #0
 80003f4:	83bb      	strh	r3, [r7, #28]
	latch.GPIO_PU_PD = GPIO__PU_PD_NONE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	837b      	strh	r3, [r7, #26]

	MCAL_GPIO_Init(G_GPIOx_data, &data);
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <HAL_Serial2Parallel_Init+0x9c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fa2d 	bl	8000864 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(G_GPIOx_shift, &shift);
 800040a:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <HAL_Serial2Parallel_Init+0xa0>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f107 0220 	add.w	r2, r7, #32
 8000412:	4611      	mov	r1, r2
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fa25 	bl	8000864 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(G_GPIOx_latch, &latch);
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <HAL_Serial2Parallel_Init+0xa4>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f107 0210 	add.w	r2, r7, #16
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fa1d 	bl	8000864 <MCAL_GPIO_Init>
}
 800042a:	bf00      	nop
 800042c:	3740      	adds	r7, #64	@ 0x40
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000028 	.word	0x20000028
 8000438:	2000002c 	.word	0x2000002c
 800043c:	20000030 	.word	0x20000030

08000440 <HAL_Serial2Parallel_SendData>:

void HAL_Serial2Parallel_SendData(S2P_PinConfig_t *S2P_pin, uint32_t data_byte){
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < 8 * Number_S2P_Used; i++){
 800044a:	2300      	movs	r3, #0
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	e015      	b.n	800047c <HAL_Serial2Parallel_SendData+0x3c>
		MCAL_GPIO_WritePin(G_GPIOx_shift, S2P_pin->S2P_ShiftCLK_Pin, GET_BIT(data_byte, i));
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <HAL_Serial2Parallel_SendData+0x50>)
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	785b      	ldrb	r3, [r3, #1]
 8000458:	4619      	mov	r1, r3
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	fa22 f303 	lsr.w	r3, r2, r3
 8000462:	b29b      	uxth	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b29b      	uxth	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	f000 faf9 	bl	8000a62 <MCAL_GPIO_WritePin>
		Serial2Parallel_ShiftData(S2P_pin);
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f80f 	bl	8000494 <Serial2Parallel_ShiftData>
	for(uint8_t i = 0; i < 8 * Number_S2P_Used; i++){
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	3301      	adds	r3, #1
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d9e6      	bls.n	8000450 <HAL_Serial2Parallel_SendData+0x10>
	}
	Serial2Parallel_LatchData(S2P_pin);
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f000 f824 	bl	80004d0 <Serial2Parallel_LatchData>
}
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000002c 	.word	0x2000002c

08000494 <Serial2Parallel_ShiftData>:

static void Serial2Parallel_ShiftData(S2P_PinConfig_t *S2P_pin){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(G_GPIOx_shift, S2P_pin->S2P_ShiftCLK_Pin, 1);
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <Serial2Parallel_ShiftData+0x38>)
 800049e:	6818      	ldr	r0, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	785b      	ldrb	r3, [r3, #1]
 80004a4:	2201      	movs	r2, #1
 80004a6:	4619      	mov	r1, r3
 80004a8:	f000 fadb 	bl	8000a62 <MCAL_GPIO_WritePin>
	MCAL_SysTicK_SetDelay_ms(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 f99f 	bl	80007f0 <MCAL_SysTicK_SetDelay_ms>
	MCAL_GPIO_WritePin(G_GPIOx_shift, S2P_pin->S2P_ShiftCLK_Pin, 0);
 80004b2:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <Serial2Parallel_ShiftData+0x38>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	785b      	ldrb	r3, [r3, #1]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f000 fad0 	bl	8000a62 <MCAL_GPIO_WritePin>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000002c 	.word	0x2000002c

080004d0 <Serial2Parallel_LatchData>:

static void Serial2Parallel_LatchData(S2P_PinConfig_t *S2P_pin){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(G_GPIOx_latch, S2P_pin->S2P_LatchCLK_Pin, 1);
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <Serial2Parallel_LatchData+0x38>)
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	2201      	movs	r2, #1
 80004e2:	4619      	mov	r1, r3
 80004e4:	f000 fabd 	bl	8000a62 <MCAL_GPIO_WritePin>
	MCAL_SysTicK_SetDelay_ms(1);
 80004e8:	2001      	movs	r0, #1
 80004ea:	f000 f981 	bl	80007f0 <MCAL_SysTicK_SetDelay_ms>
	MCAL_GPIO_WritePin(G_GPIOx_latch, S2P_pin->S2P_LatchCLK_Pin, 0);
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <Serial2Parallel_LatchData+0x38>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	f000 fab2 	bl	8000a62 <MCAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000030 	.word	0x20000030

0800050c <EXTI0_IRQHandler>:
/*
 * ===================================
 * 			 ISR  Functions
 * ===================================
 */
void EXTI0_IRQHandler(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 0);
 8000510:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <EXTI0_IRQHandler+0x1c>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <EXTI0_IRQHandler+0x1c>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[0]();
 800051c:	4b03      	ldr	r3, [pc, #12]	@ (800052c <EXTI0_IRQHandler+0x20>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4798      	blx	r3
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40013c00 	.word	0x40013c00
 800052c:	20000034 	.word	0x20000034

08000530 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 1);
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <EXTI1_IRQHandler+0x1c>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <EXTI1_IRQHandler+0x1c>)
 800053a:	f043 0302 	orr.w	r3, r3, #2
 800053e:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[1]();
 8000540:	4b03      	ldr	r3, [pc, #12]	@ (8000550 <EXTI1_IRQHandler+0x20>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	4798      	blx	r3
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40013c00 	.word	0x40013c00
 8000550:	20000034 	.word	0x20000034

08000554 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 2);
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <EXTI2_IRQHandler+0x1c>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a04      	ldr	r2, [pc, #16]	@ (8000570 <EXTI2_IRQHandler+0x1c>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[2]();
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <EXTI2_IRQHandler+0x20>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	4798      	blx	r3
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40013c00 	.word	0x40013c00
 8000574:	20000034 	.word	0x20000034

08000578 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 3);
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <EXTI3_IRQHandler+0x1c>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a04      	ldr	r2, [pc, #16]	@ (8000594 <EXTI3_IRQHandler+0x1c>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[3]();
 8000588:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <EXTI3_IRQHandler+0x20>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4798      	blx	r3
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40013c00 	.word	0x40013c00
 8000598:	20000034 	.word	0x20000034

0800059c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 4);
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <EXTI4_IRQHandler+0x1c>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <EXTI4_IRQHandler+0x1c>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[4]();
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <EXTI4_IRQHandler+0x20>)
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	4798      	blx	r3
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40013c00 	.word	0x40013c00
 80005bc:	20000034 	.word	0x20000034

080005c0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 5 ) {	EXTI->PR |=  (1 << 5)    ; G_IRQ_CallBack[5]() ;   }
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d008      	beq.n	80005e2 <EXTI9_5_IRQHandler+0x22>
 80005d0:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6153      	str	r3, [r2, #20]
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <EXTI9_5_IRQHandler+0xa4>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4798      	blx	r3
	if (EXTI->PR & 1 << 6 ) {	EXTI->PR |=  (1 << 6)    ; G_IRQ_CallBack[6]() ;   }
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d008      	beq.n	8000600 <EXTI9_5_IRQHandler+0x40>
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 80005f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <EXTI9_5_IRQHandler+0xa4>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4798      	blx	r3
	if (EXTI->PR & 1 << 7 ) {	EXTI->PR |=  (1 << 7)    ; G_IRQ_CallBack[7]() ;   }
 8000600:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <EXTI9_5_IRQHandler+0x5e>
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 8000612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000616:	6153      	str	r3, [r2, #20]
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <EXTI9_5_IRQHandler+0xa4>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	4798      	blx	r3
	if (EXTI->PR & 1 << 8 ) {	EXTI->PR |=  (1 << 8)    ; G_IRQ_CallBack[8]() ;   }
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000626:	2b00      	cmp	r3, #0
 8000628:	d008      	beq.n	800063c <EXTI9_5_IRQHandler+0x7c>
 800062a:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a0c      	ldr	r2, [pc, #48]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <EXTI9_5_IRQHandler+0xa4>)
 8000638:	6a1b      	ldr	r3, [r3, #32]
 800063a:	4798      	blx	r3
	if (EXTI->PR & 1 << 9 ) {	EXTI->PR |=  (1 << 9)    ; G_IRQ_CallBack[9]() ;   }
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <EXTI9_5_IRQHandler+0x9a>
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <EXTI9_5_IRQHandler+0xa0>)
 800064e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000652:	6153      	str	r3, [r2, #20]
 8000654:	4b03      	ldr	r3, [pc, #12]	@ (8000664 <EXTI9_5_IRQHandler+0xa4>)
 8000656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000658:	4798      	blx	r3
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40013c00 	.word	0x40013c00
 8000664:	20000034 	.word	0x20000034

08000668 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 10 ) {	EXTI->PR |=  (1 << 10)    ; G_IRQ_CallBack[10]() ;   }
 800066c:	4b2d      	ldr	r3, [pc, #180]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <EXTI15_10_IRQHandler+0x22>
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a29      	ldr	r2, [pc, #164]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000682:	6153      	str	r3, [r2, #20]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <EXTI15_10_IRQHandler+0xc0>)
 8000686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000688:	4798      	blx	r3
	if (EXTI->PR & 1 << 11 ) {	EXTI->PR |=  (1 << 11)    ; G_IRQ_CallBack[11]() ;   }
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <EXTI15_10_IRQHandler+0x40>
 8000696:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 800069c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <EXTI15_10_IRQHandler+0xc0>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a6:	4798      	blx	r3
	if (EXTI->PR & 1 << 12 ) {	EXTI->PR |=  (1 << 12)    ; G_IRQ_CallBack[12]() ;   }
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <EXTI15_10_IRQHandler+0x5e>
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <EXTI15_10_IRQHandler+0xc0>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4798      	blx	r3
	if (EXTI->PR & 1 << 13 ) {	EXTI->PR |=  (1 << 13)    ; G_IRQ_CallBack[13]() ;   }
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d008      	beq.n	80006e4 <EXTI15_10_IRQHandler+0x7c>
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <EXTI15_10_IRQHandler+0xc0>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e2:	4798      	blx	r3
	if (EXTI->PR & 1 << 14 ) {	EXTI->PR |=  (1 << 14)    ; G_IRQ_CallBack[14]() ;   }
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d008      	beq.n	8000702 <EXTI15_10_IRQHandler+0x9a>
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6153      	str	r3, [r2, #20]
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <EXTI15_10_IRQHandler+0xc0>)
 80006fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000700:	4798      	blx	r3
	if (EXTI->PR & 1 << 15 ) {	EXTI->PR |=  (1 << 15)    ; G_IRQ_CallBack[15]() ;   }
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <EXTI15_10_IRQHandler+0xb8>
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <EXTI15_10_IRQHandler+0xbc>)
 8000714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <EXTI15_10_IRQHandler+0xc0>)
 800071c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800071e:	4798      	blx	r3
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013c00 	.word	0x40013c00
 8000728:	20000034 	.word	0x20000034

0800072c <MCAL_SysTicK_Init>:
#include "stm32f401xc_SysTick_driver.h"

static void(* GP_Function_CallBack)(void) = NULL;
static uint8_t G_SingleFlag = 0;

void MCAL_SysTicK_Init(SysTick_Config_t *SysTick_CFG){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	// Clear SysTick Timer by clear Enable
	SysTick->CTRL &= ~(1 << 0);
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]

	/// Interrupt Enable/Disable
	if(SysTick_Interrupt_EN == (SysTick_CFG->SysTick_InterruptEnable)){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d106      	bne.n	8000756 <MCAL_SysTicK_Init+0x2a>
		SysTick->CTRL |= (1 << 1);
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	e005      	b.n	8000762 <MCAL_SysTicK_Init+0x36>
	}
	else{
		SysTick->CTRL &= ~(1 << 1);
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 800075c:	f023 0302 	bic.w	r3, r3, #2
 8000760:	6013      	str	r3, [r2, #0]
	}

	// Select Clock source AHB or AHB/8
	if(SysTick_CLK_AHB == (SysTick_CFG->SysTick_CLKSource)){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d106      	bne.n	8000778 <MCAL_SysTicK_Init+0x4c>
		SysTick->CTRL |= (1 << 2);
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6013      	str	r3, [r2, #0]
	}
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
		SysTick->CTRL &= ~(1 << 2);
	}
}
 8000776:	e009      	b.n	800078c <MCAL_SysTicK_Init+0x60>
	else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <MCAL_SysTicK_Init+0x60>
		SysTick->CTRL &= ~(1 << 2);
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <MCAL_SysTicK_Init+0x6c>)
 8000786:	f023 0304 	bic.w	r3, r3, #4
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e010 	.word	0xe000e010

0800079c <MCAL_SysTicK_StartTimer>:

void MCAL_SysTicK_StartTimer(uint32_t ReloadValue){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	// Load Timer with ReloadValue
	SysTick->LOAD = ReloadValue - 1;
 80007a4:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <MCAL_SysTicK_StartTimer+0x30>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	6053      	str	r3, [r2, #4]

	// Reset Timer
	SysTick->VAL = 0;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MCAL_SysTicK_StartTimer+0x30>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]

	// Start Timer
	SysTick->CTRL |= (1 << 0);
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MCAL_SysTicK_StartTimer+0x30>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <MCAL_SysTicK_StartTimer+0x30>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <MCAL_SysTicK_StopTimer>:

void MCAL_SysTicK_StopTimer(void){
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	// Stop SysTick Counter
	SysTick->CTRL &= ~(1 << 0);
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <MCAL_SysTicK_StopTimer+0x1c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <MCAL_SysTicK_StopTimer+0x1c>)
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <MCAL_SysTicK_SetDelay_ms>:

void MCAL_SysTicK_SetDelay_ms(uint32_t Delay_Time_ms){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	// When Select  Clock Source = 25Mhz / 8
	uint32_t ticks = Delay_Time_ms;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60fb      	str	r3, [r7, #12]

	// Reset Timer
	SysTick->VAL = 0;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <MCAL_SysTicK_SetDelay_ms+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]

	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d010      	beq.n	800082a <MCAL_SysTicK_SetDelay_ms+0x3a>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800080e:	4293      	cmp	r3, r2
 8000810:	d20b      	bcs.n	800082a <MCAL_SysTicK_SetDelay_ms+0x3a>
		MCAL_SysTicK_StartTimer(ticks);
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f7ff ffc2 	bl	800079c <MCAL_SysTicK_StartTimer>

		// Wait till Timer Flag is raised
		while(0 == GET_BIT(SysTick->CTRL, COUNTFLAG));
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MCAL_SysTicK_SetDelay_ms+0x44>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <MCAL_SysTicK_SetDelay_ms+0x2a>
		MCAL_SysTicK_StopTimer();
 8000826:	f7ff ffd3 	bl	80007d0 <MCAL_SysTicK_StopTimer>
	}
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <SysTick_Handler>:
	if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
		MCAL_SysTicK_StartTimer(ticks);
	}
}

void SysTick_Handler(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if(GP_Function_CallBack != NULL){
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <SysTick_Handler+0x24>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <SysTick_Handler+0x12>
		GP_Function_CallBack();
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <SysTick_Handler+0x24>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4798      	blx	r3

	}

	if(1 == G_SingleFlag){
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <SysTick_Handler+0x28>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d101      	bne.n	8000856 <SysTick_Handler+0x1e>
		MCAL_SysTicK_StopTimer();
 8000852:	f7ff ffbd 	bl	80007d0 <MCAL_SysTicK_StopTimer>
	}

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000074 	.word	0x20000074
 8000860:	20000078 	.word	0x20000078

08000864 <MCAL_GPIO_Init>:
  * @param [in]  	- GPIOx: x can be (A....E depends on device) to select GPIO Peripherals
  * @param [in] 	- pinConfig: pointer to GPIO_PinConfig_t structure that contains the config info for pin
  * @retval 		- none
  * Note 			- stm32f103xx have GPIO A,B,C,D,E but this package has only A and B fully and some of C and D
  */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
    uint32_t pin = PinConfig->GPIO_PinNumber;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	60fb      	str	r3, [r7, #12]

    // Clear old data from registers
    GPIOx->MODER   &= ~(0x3 << (2 * pin));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	2103      	movs	r1, #3
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	43d2      	mvns	r2, r2
 8000884:	401a      	ands	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
    GPIOx->OTYPER  &= ~(1   << pin);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2101      	movs	r1, #1
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	43d2      	mvns	r2, r2
 8000898:	401a      	ands	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	605a      	str	r2, [r3, #4]
    GPIOx->OSPEEDR &= ~(0x3 << (2 * pin));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	2103      	movs	r1, #3
 80008a8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	609a      	str	r2, [r3, #8]
    GPIOx->PUPDR   &= ~(0x3 << (2 * pin));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	0052      	lsls	r2, r2, #1
 80008bc:	2103      	movs	r1, #3
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	43d2      	mvns	r2, r2
 80008c4:	401a      	ands	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60da      	str	r2, [r3, #12]

    // Set new config
    switch (PinConfig->GPIO_MODE)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	885b      	ldrh	r3, [r3, #2]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	f000 809c 	beq.w	8000a0c <MCAL_GPIO_Init+0x1a8>
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	f300 80b0 	bgt.w	8000a3a <MCAL_GPIO_Init+0x1d6>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d002      	beq.n	80008e4 <MCAL_GPIO_Init+0x80>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d02e      	beq.n	8000940 <MCAL_GPIO_Init+0xdc>
 80008e2:	e0aa      	b.n	8000a3a <MCAL_GPIO_Init+0x1d6>
    {
    case GPIO_MODE_OP:   // General purpose output
        GPIOx->MODER   |= (0x1 << (2 * pin));   // 01
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	431a      	orrs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	8912      	ldrh	r2, [r2, #8]
 8000900:	4611      	mov	r1, r2
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	431a      	orrs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	8992      	ldrh	r2, [r2, #12]
 8000916:	4611      	mov	r1, r2
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	0052      	lsls	r2, r2, #1
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	431a      	orrs	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	8952      	ldrh	r2, [r2, #10]
 800092e:	4611      	mov	r1, r2
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	0052      	lsls	r2, r2, #1
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60da      	str	r2, [r3, #12]
        break;
 800093e:	e08a      	b.n	8000a56 <MCAL_GPIO_Init+0x1f2>

    case GPIO_MODE_AF:   // Alternate function
        GPIOx->MODER   |= (0x2 << (2 * pin));   // 10
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	0052      	lsls	r2, r2, #1
 8000948:	2102      	movs	r1, #2
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	8912      	ldrh	r2, [r2, #8]
 800095c:	4611      	mov	r1, r2
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	431a      	orrs	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	8992      	ldrh	r2, [r2, #12]
 8000972:	4611      	mov	r1, r2
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	0052      	lsls	r2, r2, #1
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	8952      	ldrh	r2, [r2, #10]
 800098a:	4611      	mov	r1, r2
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	0052      	lsls	r2, r2, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60da      	str	r2, [r3, #12]

        // Configure AF (AFRL [0..7], AFRH [8..15])
        if (pin < 8) {
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b07      	cmp	r3, #7
 800099e:	d816      	bhi.n	80009ce <MCAL_GPIO_Init+0x16a>
            GPIOx->AFR[0] &= ~(0xF << (4 * pin));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	210f      	movs	r1, #15
 80009aa:	fa01 f202 	lsl.w	r2, r1, r2
 80009ae:	43d2      	mvns	r2, r2
 80009b0:	401a      	ands	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	621a      	str	r2, [r3, #32]
            GPIOx->AFR[0] |= (PinConfig->GPIO_AFx << (4 * pin));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a1a      	ldr	r2, [r3, #32]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	6859      	ldr	r1, [r3, #4]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	621a      	str	r2, [r3, #32]
        }
        else if((pin >= 8) && (pin < 16)){
            GPIOx->AFR[1] &= ~(0xF << (4 * (pin - 8)));
            GPIOx->AFR[1] |= (PinConfig->GPIO_AFx << (4 * (pin - 8)));
        }
        break;
 80009cc:	e042      	b.n	8000a54 <MCAL_GPIO_Init+0x1f0>
        else if((pin >= 8) && (pin < 16)){
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	d93f      	bls.n	8000a54 <MCAL_GPIO_Init+0x1f0>
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d83c      	bhi.n	8000a54 <MCAL_GPIO_Init+0x1f0>
            GPIOx->AFR[1] &= ~(0xF << (4 * (pin - 8)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	3a08      	subs	r2, #8
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	210f      	movs	r1, #15
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	43d2      	mvns	r2, r2
 80009ec:	401a      	ands	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
            GPIOx->AFR[1] |= (PinConfig->GPIO_AFx << (4 * (pin - 8)));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	6859      	ldr	r1, [r3, #4]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3b08      	subs	r3, #8
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8000a0a:	e023      	b.n	8000a54 <MCAL_GPIO_Init+0x1f0>

    case GPIO_MODE_Analog:   // Analog
        GPIOx->MODER   |= (0x3 << (2 * pin));   // 11
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	2103      	movs	r1, #3
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	8952      	ldrh	r2, [r2, #10]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	60da      	str	r2, [r3, #12]
        break;
 8000a38:	e00d      	b.n	8000a56 <MCAL_GPIO_Init+0x1f2>

    case GPIO_MODE_IP:   // Input
    default:
        // Input mode (00)
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	8952      	ldrh	r2, [r2, #10]
 8000a42:	4611      	mov	r1, r2
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	0052      	lsls	r2, r2, #1
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60da      	str	r2, [r3, #12]
        break;
 8000a52:	e000      	b.n	8000a56 <MCAL_GPIO_Init+0x1f2>
        break;
 8000a54:	bf00      	nop
    }
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <MCAL_GPIO_WritePin>:
  * @param [in]  	- pinNo: can be (0...15 depends on GPIOx) to select pin number
  * @param [in]  	- Value: the sate of the pin (can be two values based on @ref GPIO_PIN_state)
  * @retval 		- None
  * Note 			- None
  */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint16_t value){
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	807b      	strh	r3, [r7, #2]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	803b      	strh	r3, [r7, #0]
	if(value == GPIO_PIN_SET){
 8000a72:	883b      	ldrh	r3, [r7, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d109      	bne.n	8000a8c <MCAL_GPIO_WritePin+0x2a>
		// BSy: Port x Set bit y (y= 0 .. 15)
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
        GPIOx->ODR |= (1 << PinNumber);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	615a      	str	r2, [r3, #20]
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bit
        GPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000a8a:	e009      	b.n	8000aa0 <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1 << PinNumber);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	887a      	ldrh	r2, [r7, #2]
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	615a      	str	r2, [r3, #20]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4d0d      	ldr	r5, [pc, #52]	@ (8000ae4 <__libc_init_array+0x38>)
 8000ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ae8 <__libc_init_array+0x3c>)
 8000ab2:	1b64      	subs	r4, r4, r5
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	42a6      	cmp	r6, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	4d0b      	ldr	r5, [pc, #44]	@ (8000aec <__libc_init_array+0x40>)
 8000abe:	4c0c      	ldr	r4, [pc, #48]	@ (8000af0 <__libc_init_array+0x44>)
 8000ac0:	f000 f818 	bl	8000af4 <_init>
 8000ac4:	1b64      	subs	r4, r4, r5
 8000ac6:	10a4      	asrs	r4, r4, #2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad4:	4798      	blx	r3
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ade:	4798      	blx	r3
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000b0c 	.word	0x08000b0c
 8000ae8:	08000b0c 	.word	0x08000b0c
 8000aec:	08000b0c 	.word	0x08000b0c
 8000af0:	08000b10 	.word	0x08000b10

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
