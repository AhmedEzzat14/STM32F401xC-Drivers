
STM32F401xC Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002178  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002318  08002318  00003318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800237c  0800237c  00004050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800237c  0800237c  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002384  08002384  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002388  08002388  00003388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  0800238c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000050  080023dc  00004050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080023dc  000042a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040de  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000120e  00000000  00000000  0000815e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000428  00000000  00000000  00009370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ff  00000000  00000000  00009798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f2c  00000000  00000000  00009a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000340e  00000000  00000000  0000b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000f02b  00000000  00000000  0000edd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001ddfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001338  00000000  00000000  0001de40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0001f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002300 	.word	0x08002300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08002300 	.word	0x08002300

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Clock_Init>:
#include "Ultrasonic_driver.h"

#include <stdio.h>


void Clock_Init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    RCC_GPIOA_CLK_EN();
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <Clock_Init+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <Clock_Init+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC_GPIOB_CLK_EN();
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <Clock_Init+0x34>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000294:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <Clock_Init+0x34>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC_SYSCFG_CLK_EN();
 800029c:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <Clock_Init+0x34>)
 800029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002a0:	4a04      	ldr	r2, [pc, #16]	@ (80002b4 <Clock_Init+0x34>)
 80002a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002a6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800

080002b8 <main>:
    MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
}

uint8_t test25 = '1';

int main(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b092      	sub	sp, #72	@ 0x48
 80002bc:	af00      	add	r7, sp, #0
    MCAL_FPU_Enable();
 80002be:	f000 fc89 	bl	8000bd4 <MCAL_FPU_Enable>
    MCAL_RCC_Init();
 80002c2:	f000 fdad 	bl	8000e20 <MCAL_RCC_Init>

    Clock_Init();
 80002c6:	f7ff ffdb 	bl	8000280 <Clock_Init>

    USART_PinConfig_t uart;
    uart.USART_Mode = UART_MODE_TX_RX;
 80002ca:	230c      	movs	r3, #12
 80002cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uart.USART_BaudRate = 9600;
 80002d0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80002d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    uart.USART_IRQ_Enable = UART_IRQ_ENABLE_NONE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    uart.USART_StopBits = UART_StopBits_1Bit;
 80002dc:	2300      	movs	r3, #0
 80002de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uart.USART_Sampling = UART_Sampling_16;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    uart.USART_HW_FlowCTRL = UART_HW_FLW_CTRL_RTS_DIS;
 80002e8:	2300      	movs	r3, #0
 80002ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uart.USART_ParityMode = UART_Parity_DIS;
 80002ee:	2300      	movs	r3, #0
 80002f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uart.USART_PayLoad_Lenght = UART_PayLoad_Length_8Bits;
 80002f4:	2300      	movs	r3, #0
 80002f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uart.P_IRQ_CallBack = NULL;
 80002fa:	2300      	movs	r3, #0
 80002fc:	643b      	str	r3, [r7, #64]	@ 0x40
    MCAL_UART_Init(USART1, &uart);
 80002fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000302:	4619      	mov	r1, r3
 8000304:	4824      	ldr	r0, [pc, #144]	@ (8000398 <main+0xe0>)
 8000306:	f001 f893 	bl	8001430 <MCAL_UART_Init>

    SysTick_Config_t systick_cfg;
    systick_cfg.SysTick_InterruptEnable = SysTick_Interrupt_DIS;
 800030a:	2300      	movs	r3, #0
 800030c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    systick_cfg.SysTick_CLKSource = SysTick_CLK_AHB_8;
 8000310:	2300      	movs	r3, #0
 8000312:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    MCAL_SysTicK_Init(&systick_cfg);
 8000316:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fe32 	bl	8000f84 <MCAL_SysTicK_Init>

    uint32_t distance;
    uint8_t buffer[30];

    sprintf((char *)buffer, "Starting...\r\n");
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	491d      	ldr	r1, [pc, #116]	@ (800039c <main+0xe4>)
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fb52 	bl	80019d0 <siprintf>
    MCAL_UART_SendData(USART1, buffer, Polling_Enable);
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	2200      	movs	r2, #0
 8000332:	4619      	mov	r1, r3
 8000334:	4818      	ldr	r0, [pc, #96]	@ (8000398 <main+0xe0>)
 8000336:	f001 f931 	bl	800159c <MCAL_UART_SendData>

    // Initialize echo pin
    HAL_Ultrasonic_Echo(GPIOA, EXTI2_PA2);
 800033a:	4a19      	ldr	r2, [pc, #100]	@ (80003a0 <main+0xe8>)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000340:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000348:	4816      	ldr	r0, [pc, #88]	@ (80003a4 <main+0xec>)
 800034a:	f000 f90f 	bl	800056c <HAL_Ultrasonic_Echo>

    while(1){
        HAL_Ultrasonic_Trigger(GPIOA, GPIO_PIN_0);
 800034e:	2100      	movs	r1, #0
 8000350:	4814      	ldr	r0, [pc, #80]	@ (80003a4 <main+0xec>)
 8000352:	f000 f8c3 	bl	80004dc <HAL_Ultrasonic_Trigger>

        Timer_Delay(TIMER2, 60, Unit_ms);
 8000356:	2100      	movs	r1, #0
 8000358:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80003a8 <main+0xf0>
 800035c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000360:	f000 fe96 	bl	8001090 <Timer_Delay>

        distance = HAL_Ultrasonic_GetDistance();
 8000364:	f000 f922 	bl	80005ac <HAL_Ultrasonic_GetDistance>
 8000368:	6478      	str	r0, [r7, #68]	@ 0x44

        sprintf((char *)buffer, "Distance: %lu cm \r\n",
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000370:	490e      	ldr	r1, [pc, #56]	@ (80003ac <main+0xf4>)
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fb2c 	bl	80019d0 <siprintf>
                (unsigned long)distance);

        MCAL_UART_SendString(USART1, buffer, Polling_Enable);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	4805      	ldr	r0, [pc, #20]	@ (8000398 <main+0xe0>)
 8000382:	f001 f953 	bl	800162c <MCAL_UART_SendString>

        Timer_Delay(TIMER2, 200, Unit_ms);
 8000386:	2100      	movs	r1, #0
 8000388:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80003b0 <main+0xf8>
 800038c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000390:	f000 fe7e 	bl	8001090 <Timer_Delay>
        HAL_Ultrasonic_Trigger(GPIOA, GPIO_PIN_0);
 8000394:	bf00      	nop
 8000396:	e7da      	b.n	800034e <main+0x96>
 8000398:	40011000 	.word	0x40011000
 800039c:	08002318 	.word	0x08002318
 80003a0:	0800233c 	.word	0x0800233c
 80003a4:	40020000 	.word	0x40020000
 80003a8:	42700000 	.word	0x42700000
 80003ac:	08002328 	.word	0x08002328
 80003b0:	43480000 	.word	0x43480000

080003b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003bc:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <_sbrk+0x5c>)
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <_sbrk+0x60>)
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c8:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <_sbrk+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <_sbrk+0x64>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <_sbrk+0x68>)
 80003d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d207      	bcs.n	80003f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e4:	f001 fb16 	bl	8001a14 <__errno>
 80003e8:	4603      	mov	r3, r0
 80003ea:	220c      	movs	r2, #12
 80003ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
 80003f2:	e009      	b.n	8000408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <_sbrk+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <_sbrk+0x64>)
 8000404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000406:	68fb      	ldr	r3, [r7, #12]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20010000 	.word	0x20010000
 8000414:	00000400 	.word	0x00000400
 8000418:	2000006c 	.word	0x2000006c
 800041c:	200002a8 	.word	0x200002a8

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	@ (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	@ (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	@ (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	@ (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f001 fae7 	bl	8001a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ff31 	bl	80002b8 <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000464:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8000468:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800046c:	200002a4 	.word	0x200002a4

08000470 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC_IRQHandler>
	...

08000474 <Echo_ISR>:
volatile uint8_t isr_flag = 0;
volatile uint32_t elapsed_ticks = 0;
volatile uint8_t measurement_ready = 0;
volatile uint32_t isr_count = 0;  // Add this counter

void Echo_ISR(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    isr_count++;  // Increment every time ISR is called
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <Echo_ISR+0x58>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	4a13      	ldr	r2, [pc, #76]	@ (80004cc <Echo_ISR+0x58>)
 8000480:	6013      	str	r3, [r2, #0]

    if(0 == isr_flag){
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <Echo_ISR+0x5c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b00      	cmp	r3, #0
 800048a:	d10a      	bne.n	80004a2 <Echo_ISR+0x2e>
        // Rising edge - start measurement
        MCAL_SysTicK_StartTimer(0x00FFFFFF);
 800048c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000490:	f000 fdb0 	bl	8000ff4 <MCAL_SysTicK_StartTimer>
        isr_flag = 1;
 8000494:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <Echo_ISR+0x5c>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
        measurement_ready = 0;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <Echo_ISR+0x60>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
        MCAL_SysTicK_StopTimer();
        elapsed_ticks = MCAL_SysTicK_GetElapsedTime_SingleShot();
        isr_flag = 0;
        measurement_ready = 1;
    }
}
 80004a0:	e011      	b.n	80004c6 <Echo_ISR+0x52>
    else if(1 == isr_flag){
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <Echo_ISR+0x5c>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d10c      	bne.n	80004c6 <Echo_ISR+0x52>
        MCAL_SysTicK_StopTimer();
 80004ac:	f000 fdba 	bl	8001024 <MCAL_SysTicK_StopTimer>
        elapsed_ticks = MCAL_SysTicK_GetElapsedTime_SingleShot();
 80004b0:	f000 fdca 	bl	8001048 <MCAL_SysTicK_GetElapsedTime_SingleShot>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4a08      	ldr	r2, [pc, #32]	@ (80004d8 <Echo_ISR+0x64>)
 80004b8:	6013      	str	r3, [r2, #0]
        isr_flag = 0;
 80004ba:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <Echo_ISR+0x5c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]
        measurement_ready = 1;
 80004c0:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <Echo_ISR+0x60>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000007c 	.word	0x2000007c
 80004d0:	20000070 	.word	0x20000070
 80004d4:	20000078 	.word	0x20000078
 80004d8:	20000074 	.word	0x20000074

080004dc <HAL_Ultrasonic_Trigger>:

void HAL_Ultrasonic_Trigger(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
    static uint8_t trigger_initialized = 0;

    // Initialize trigger pin only once
    if(!trigger_initialized){
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <HAL_Ultrasonic_Trigger+0x84>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d112      	bne.n	8000516 <HAL_Ultrasonic_Trigger+0x3a>
        GPIO_PinConfig_t trigger_cfg;
        trigger_cfg.GPIO_PinNumber = PinNumber;
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	813b      	strh	r3, [r7, #8]
        trigger_cfg.GPIO_MODE = GPIO_MODE_OP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	817b      	strh	r3, [r7, #10]
        trigger_cfg.GPIO_TYPE = GPIO_TYPE_PP;
 80004f8:	2300      	movs	r3, #0
 80004fa:	823b      	strh	r3, [r7, #16]
        trigger_cfg.GPIO_Output_Speed = GPIO_SPEED_MEDIUM;
 80004fc:	2301      	movs	r3, #1
 80004fe:	82bb      	strh	r3, [r7, #20]
        trigger_cfg.GPIO_PU_PD = GPIO_PU_PD_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	827b      	strh	r3, [r7, #18]
        MCAL_GPIO_Init(GPIOx, &trigger_cfg);
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	4619      	mov	r1, r3
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f001 f93c 	bl	8001788 <MCAL_GPIO_Init>
        trigger_initialized = 1;
 8000510:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <HAL_Ultrasonic_Trigger+0x84>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
    }

    // Reset measurement flag
    measurement_ready = 0;
 8000516:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <HAL_Ultrasonic_Trigger+0x88>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]

    // Generate 10us trigger pulse
    MCAL_GPIO_WritePin(GPIOx, PinNumber, 0);
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	2200      	movs	r2, #0
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f001 fa2f 	bl	8001986 <MCAL_GPIO_WritePin>
    Timer_Delay(TIMER3, 2, Unit_ms);  // Small delay to ensure pin is low
 8000528:	2100      	movs	r1, #0
 800052a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800052e:	480e      	ldr	r0, [pc, #56]	@ (8000568 <HAL_Ultrasonic_Trigger+0x8c>)
 8000530:	f000 fdae 	bl	8001090 <Timer_Delay>

    MCAL_GPIO_WritePin(GPIOx, PinNumber, 1);
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f001 fa23 	bl	8001986 <MCAL_GPIO_WritePin>
    Timer_Delay(TIMER3, 10, Unit_us);  // 10us high pulse
 8000540:	2101      	movs	r1, #1
 8000542:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <HAL_Ultrasonic_Trigger+0x8c>)
 8000548:	f000 fda2 	bl	8001090 <Timer_Delay>

    MCAL_GPIO_WritePin(GPIOx, PinNumber, 0);
 800054c:	887b      	ldrh	r3, [r7, #2]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f001 fa17 	bl	8001986 <MCAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000080 	.word	0x20000080
 8000564:	20000078 	.word	0x20000078
 8000568:	40000400 	.word	0x40000400

0800056c <HAL_Ultrasonic_Echo>:

void HAL_Ultrasonic_Echo(GPIO_TypeDef *GPIOx, EXTI_GPIO_Mapping_t Exti_Number){
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	4638      	mov	r0, r7
 8000576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    EXTI_PinConfig_t echo_cfg;

    echo_cfg.EXTI_PIN = Exti_Number;
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	463a      	mov	r2, r7
 8000580:	ca07      	ldmia	r2, {r0, r1, r2}
 8000582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    echo_cfg.EXTI_Enable = EXTI_IRQ_EN;
 8000586:	2301      	movs	r3, #1
 8000588:	f887 3020 	strb.w	r3, [r7, #32]
    echo_cfg.EXTI_EdgeSelect = EXTI_TRIGGER_RISING_FALLING;
 800058c:	2302      	movs	r3, #2
 800058e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    echo_cfg.P_IRQ_CallBack = Echo_ISR;
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_Ultrasonic_Echo+0x3c>)
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
    MCAL_EXTI_GPIO_Init(&echo_cfg);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f9fe 	bl	800099c <MCAL_EXTI_GPIO_Init>
}
 80005a0:	bf00      	nop
 80005a2:	3728      	adds	r7, #40	@ 0x28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08000475 	.word	0x08000475

080005ac <HAL_Ultrasonic_GetDistance>:

uint32_t HAL_Ultrasonic_GetDistance(void){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
    // Check if measurement is ready
    if(!measurement_ready){
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_Ultrasonic_GetDistance+0x64>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d101      	bne.n	80005c0 <HAL_Ultrasonic_GetDistance+0x14>
        return 0;  // No valid measurement yet
 80005bc:	2300      	movs	r3, #0
 80005be:	e021      	b.n	8000604 <HAL_Ultrasonic_GetDistance+0x58>
    }

    // Calculate time in microseconds
    // SysTick is running at AHB/8 = 25MHz/8 = 3.125MHz
    // Each tick = 1/3.125MHz = 0.32 microseconds
    float time_us = (float)elapsed_ticks * 0.32f;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <HAL_Ultrasonic_GetDistance+0x68>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005cc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000618 <HAL_Ultrasonic_GetDistance+0x6c>
 80005d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d4:	edc7 7a00 	vstr	s15, [r7]

    // Distance = (time * speed_of_sound) / 2
    // Speed of sound = 343 m/s = 0.0343 cm/μs
    // Formula: distance (cm) = (time_us * 0.0343) / 2
    uint32_t distance_cm = (uint32_t)((time_us * 0.0343f) / 2.0f);
 80005d8:	edd7 7a00 	vldr	s15, [r7]
 80005dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800061c <HAL_Ultrasonic_GetDistance+0x70>
 80005e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80005e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005f0:	ee17 3a90 	vmov	r3, s15
 80005f4:	607b      	str	r3, [r7, #4]

    // Sanity check - HC-SR04 max range is about 400cm
    if(distance_cm > 400){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80005fc:	d901      	bls.n	8000602 <HAL_Ultrasonic_GetDistance+0x56>
        distance_cm = 0;  // Invalid reading
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
    }

    return distance_cm;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	20000078 	.word	0x20000078
 8000614:	20000074 	.word	0x20000074
 8000618:	3ea3d70a 	.word	0x3ea3d70a
 800061c:	3d0c7e28 	.word	0x3d0c7e28

08000620 <Enable_NVIC>:
/*
 * =======================================================
 * 					  Helper Functions
 * =======================================================
 */
void Enable_NVIC(uint16_t IRQ){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d854      	bhi.n	80006da <Enable_NVIC+0xba>
 8000630:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <Enable_NVIC+0x18>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000679 	.word	0x08000679
 800063c:	08000687 	.word	0x08000687
 8000640:	08000695 	.word	0x08000695
 8000644:	080006a3 	.word	0x080006a3
 8000648:	080006b1 	.word	0x080006b1
 800064c:	080006bf 	.word	0x080006bf
 8000650:	080006bf 	.word	0x080006bf
 8000654:	080006bf 	.word	0x080006bf
 8000658:	080006bf 	.word	0x080006bf
 800065c:	080006bf 	.word	0x080006bf
 8000660:	080006cd 	.word	0x080006cd
 8000664:	080006cd 	.word	0x080006cd
 8000668:	080006cd 	.word	0x080006cd
 800066c:	080006cd 	.word	0x080006cd
 8000670:	080006cd 	.word	0x080006cd
 8000674:	080006cd 	.word	0x080006cd
		case 0:	 NVIC_IRQ6_EXTI0_EN()  	 	; break;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <Enable_NVIC+0xc8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1a      	ldr	r2, [pc, #104]	@ (80006e8 <Enable_NVIC+0xc8>)
 800067e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e029      	b.n	80006da <Enable_NVIC+0xba>
		case 1:  NVIC_IRQ7_EXTI1_EN()  	 	; break;
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <Enable_NVIC+0xc8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <Enable_NVIC+0xc8>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e022      	b.n	80006da <Enable_NVIC+0xba>
		case 2:	 NVIC_IRQ8_EXTI2_EN() 		; break;
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <Enable_NVIC+0xc8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <Enable_NVIC+0xc8>)
 800069a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e01b      	b.n	80006da <Enable_NVIC+0xba>
		case 3:	 NVIC_IRQ9_EXTI3_EN()    	; break;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <Enable_NVIC+0xc8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <Enable_NVIC+0xc8>)
 80006a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	e014      	b.n	80006da <Enable_NVIC+0xba>
		case 4:	 NVIC_IRQ10_EXTI4_EN() 	    ; break;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <Enable_NVIC+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <Enable_NVIC+0xc8>)
 80006b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	e00d      	b.n	80006da <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EXTI_5_9_EN()   ; break;
 80006be:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <Enable_NVIC+0xc8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <Enable_NVIC+0xc8>)
 80006c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	e006      	b.n	80006da <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI_10_15_EN() ; break;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <Enable_NVIC+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a06      	ldr	r2, [pc, #24]	@ (80006ec <Enable_NVIC+0xcc>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	bf00      	nop
	}
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000e104 	.word	0xe000e104

080006f0 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d854      	bhi.n	80007aa <Disable_NVIC+0xba>
 8000700:	a201      	add	r2, pc, #4	@ (adr r2, 8000708 <Disable_NVIC+0x18>)
 8000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000706:	bf00      	nop
 8000708:	08000749 	.word	0x08000749
 800070c:	08000757 	.word	0x08000757
 8000710:	08000765 	.word	0x08000765
 8000714:	08000773 	.word	0x08000773
 8000718:	08000781 	.word	0x08000781
 800071c:	0800078f 	.word	0x0800078f
 8000720:	0800078f 	.word	0x0800078f
 8000724:	0800078f 	.word	0x0800078f
 8000728:	0800078f 	.word	0x0800078f
 800072c:	0800078f 	.word	0x0800078f
 8000730:	0800079d 	.word	0x0800079d
 8000734:	0800079d 	.word	0x0800079d
 8000738:	0800079d 	.word	0x0800079d
 800073c:	0800079d 	.word	0x0800079d
 8000740:	0800079d 	.word	0x0800079d
 8000744:	0800079d 	.word	0x0800079d
		case 0:	 NVIC_IRQ6_EXTI0_DIS()  	 ; break;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <Disable_NVIC+0xc8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1a      	ldr	r2, [pc, #104]	@ (80007b8 <Disable_NVIC+0xc8>)
 800074e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	e029      	b.n	80007aa <Disable_NVIC+0xba>
		case 1:  NVIC_IRQ7_EXTI1_DIS()  	 ; break;
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <Disable_NVIC+0xc8>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e022      	b.n	80007aa <Disable_NVIC+0xba>
		case 2:	 NVIC_IRQ8_EXTI2_DIS() 		 ; break;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <Disable_NVIC+0xc8>)
 800076a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e01b      	b.n	80007aa <Disable_NVIC+0xba>
		case 3:	 NVIC_IRQ9_EXTI3_DIS()    	 ; break;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000778:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e014      	b.n	80007aa <Disable_NVIC+0xba>
		case 4:	 NVIC_IRQ10_EXTI4_DIS() 	 ; break;
 8000780:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000786:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e00d      	b.n	80007aa <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EXTI_5_9_DIS()   ; break;
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a09      	ldr	r2, [pc, #36]	@ (80007b8 <Disable_NVIC+0xc8>)
 8000794:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	e006      	b.n	80007aa <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI_10_15_DIS() ; break;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <Disable_NVIC+0xcc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a06      	ldr	r2, [pc, #24]	@ (80007bc <Disable_NVIC+0xcc>)
 80007a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	bf00      	nop
	}
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e180 	.word	0xe000e180
 80007bc:	e000e184 	.word	0xe000e184

080007c0 <Set_EXTI>:

void Set_EXTI(EXTI_PinConfig_t *EXTI_PinConfig){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	// Configure EXTI Pin to be AF IP Floating
	GPIO_PinConfig_t EXTI_Pin;
	EXTI_Pin.GPIO_PinNumber = EXTI_PinConfig->EXTI_PIN.GPIO_PinNumber;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	891b      	ldrh	r3, [r3, #8]
 80007cc:	81bb      	strh	r3, [r7, #12]
	EXTI_Pin.GPIO_MODE = GPIO_MODE_IP;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	EXTI_Pin.GPIO_PU_PD = GPIO_PU_PD_NONE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	82fb      	strh	r3, [r7, #22]
	MCAL_GPIO_Init((EXTI_PinConfig->EXTI_PIN.GPIOx), &EXTI_Pin);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f107 020c 	add.w	r2, r7, #12
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 ffd1 	bl	8001788 <MCAL_GPIO_Init>

	// Update SYSCFG to route EXTI between port A B C
	uint8_t SYSCFG_EXTI_Index = (EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber) / 4;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	77fb      	strb	r3, [r7, #31]
	uint8_t SYSCFG_EXTI_Position = ((EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber) % 4) * 4;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	f003 0303 	and.w	r3, r3, #3
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	77bb      	strb	r3, [r7, #30]

	// Clear the 4-bits before set
	SYSCFG->EXTICR[SYSCFG_EXTI_Index] &= ~(0xF << SYSCFG_EXTI_Position);
 8000800:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <Set_EXTI+0x1c0>)
 8000802:	7ffb      	ldrb	r3, [r7, #31]
 8000804:	3302      	adds	r3, #2
 8000806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080a:	7fbb      	ldrb	r3, [r7, #30]
 800080c:	210f      	movs	r1, #15
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	495a      	ldr	r1, [pc, #360]	@ (8000980 <Set_EXTI+0x1c0>)
 8000818:	7ffb      	ldrb	r3, [r7, #31]
 800081a:	4002      	ands	r2, r0
 800081c:	3302      	adds	r3, #2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[SYSCFG_EXTI_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_PinConfig->EXTI_PIN.GPIOx) & 0xF) << SYSCFG_EXTI_Position);
 8000822:	4a57      	ldr	r2, [pc, #348]	@ (8000980 <Set_EXTI+0x1c0>)
 8000824:	7ffb      	ldrb	r3, [r7, #31]
 8000826:	3302      	adds	r3, #2
 8000828:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4954      	ldr	r1, [pc, #336]	@ (8000984 <Set_EXTI+0x1c4>)
 8000832:	428b      	cmp	r3, r1
 8000834:	d016      	beq.n	8000864 <Set_EXTI+0xa4>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4953      	ldr	r1, [pc, #332]	@ (8000988 <Set_EXTI+0x1c8>)
 800083c:	428b      	cmp	r3, r1
 800083e:	d00f      	beq.n	8000860 <Set_EXTI+0xa0>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4951      	ldr	r1, [pc, #324]	@ (800098c <Set_EXTI+0x1cc>)
 8000846:	428b      	cmp	r3, r1
 8000848:	d008      	beq.n	800085c <Set_EXTI+0x9c>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	4950      	ldr	r1, [pc, #320]	@ (8000990 <Set_EXTI+0x1d0>)
 8000850:	428b      	cmp	r3, r1
 8000852:	d101      	bne.n	8000858 <Set_EXTI+0x98>
 8000854:	2303      	movs	r3, #3
 8000856:	e006      	b.n	8000866 <Set_EXTI+0xa6>
 8000858:	230f      	movs	r3, #15
 800085a:	e004      	b.n	8000866 <Set_EXTI+0xa6>
 800085c:	2302      	movs	r3, #2
 800085e:	e002      	b.n	8000866 <Set_EXTI+0xa6>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <Set_EXTI+0xa6>
 8000864:	2300      	movs	r3, #0
 8000866:	7fb9      	ldrb	r1, [r7, #30]
 8000868:	408b      	lsls	r3, r1
 800086a:	4618      	mov	r0, r3
 800086c:	4944      	ldr	r1, [pc, #272]	@ (8000980 <Set_EXTI+0x1c0>)
 800086e:	7ffb      	ldrb	r3, [r7, #31]
 8000870:	4302      	orrs	r2, r0
 8000872:	3302      	adds	r3, #2
 8000874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Update Trigger selection
	// Clear them before set
	EXTI->RTSR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000878:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <Set_EXTI+0x1d4>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a42      	ldr	r2, [pc, #264]	@ (8000994 <Set_EXTI+0x1d4>)
 800088c:	400b      	ands	r3, r1
 800088e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000890:	4b40      	ldr	r3, [pc, #256]	@ (8000994 <Set_EXTI+0x1d4>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	8812      	ldrh	r2, [r2, #0]
 8000898:	4611      	mov	r1, r2
 800089a:	2201      	movs	r2, #1
 800089c:	408a      	lsls	r2, r1
 800089e:	43d2      	mvns	r2, r2
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a3c      	ldr	r2, [pc, #240]	@ (8000994 <Set_EXTI+0x1d4>)
 80008a4:	400b      	ands	r3, r1
 80008a6:	60d3      	str	r3, [r2, #12]

	if(EXTI_TRIGGER_RISING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b5b      	ldrb	r3, [r3, #13]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10b      	bne.n	80008c8 <Set_EXTI+0x108>
		EXTI->RTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80008b0:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <Set_EXTI+0x1d4>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	8812      	ldrh	r2, [r2, #0]
 80008b8:	4611      	mov	r1, r2
 80008ba:	2201      	movs	r2, #1
 80008bc:	408a      	lsls	r2, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <Set_EXTI+0x1d4>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6093      	str	r3, [r2, #8]
 80008c6:	e029      	b.n	800091c <Set_EXTI+0x15c>
	}
	else if(EXTI_TRIGGER_FALLING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7b5b      	ldrb	r3, [r3, #13]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d10b      	bne.n	80008e8 <Set_EXTI+0x128>
		EXTI->FTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80008d0:	4b30      	ldr	r3, [pc, #192]	@ (8000994 <Set_EXTI+0x1d4>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	8812      	ldrh	r2, [r2, #0]
 80008d8:	4611      	mov	r1, r2
 80008da:	2201      	movs	r2, #1
 80008dc:	408a      	lsls	r2, r1
 80008de:	4611      	mov	r1, r2
 80008e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000994 <Set_EXTI+0x1d4>)
 80008e2:	430b      	orrs	r3, r1
 80008e4:	60d3      	str	r3, [r2, #12]
 80008e6:	e019      	b.n	800091c <Set_EXTI+0x15c>
	}
	else if(EXTI_TRIGGER_RISING_FALLING == (EXTI_PinConfig->EXTI_EdgeSelect)){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7b5b      	ldrb	r3, [r3, #13]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d115      	bne.n	800091c <Set_EXTI+0x15c>
		EXTI->RTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 80008f0:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <Set_EXTI+0x1d4>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	8812      	ldrh	r2, [r2, #0]
 80008f8:	4611      	mov	r1, r2
 80008fa:	2201      	movs	r2, #1
 80008fc:	408a      	lsls	r2, r1
 80008fe:	4611      	mov	r1, r2
 8000900:	4a24      	ldr	r2, [pc, #144]	@ (8000994 <Set_EXTI+0x1d4>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000906:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <Set_EXTI+0x1d4>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	8812      	ldrh	r2, [r2, #0]
 800090e:	4611      	mov	r1, r2
 8000910:	2201      	movs	r2, #1
 8000912:	408a      	lsls	r2, r1
 8000914:	4611      	mov	r1, r2
 8000916:	4a1f      	ldr	r2, [pc, #124]	@ (8000994 <Set_EXTI+0x1d4>)
 8000918:	430b      	orrs	r3, r1
 800091a:	60d3      	str	r3, [r2, #12]
	}

	// Update IRQ CallBack function
	G_IRQ_CallBack[EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber] = EXTI_PinConfig->P_IRQ_CallBack;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <Set_EXTI+0x1d8>)
 8000928:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Enable/Disable IRQ EXTI & NVIC
	if(EXTI_IRQ_EN == (EXTI_PinConfig->EXTI_Enable)){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7b1b      	ldrb	r3, [r3, #12]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d110      	bne.n	8000956 <Set_EXTI+0x196>
		EXTI->IMR |= (1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <Set_EXTI+0x1d4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	8812      	ldrh	r2, [r2, #0]
 800093c:	4611      	mov	r1, r2
 800093e:	2201      	movs	r2, #1
 8000940:	408a      	lsls	r2, r1
 8000942:	4611      	mov	r1, r2
 8000944:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <Set_EXTI+0x1d4>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe66 	bl	8000620 <Enable_NVIC>
	}
	else{
		EXTI->IMR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
		Disable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
	}
}
 8000954:	e010      	b.n	8000978 <Set_EXTI+0x1b8>
		EXTI->IMR &= ~(1 << EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <Set_EXTI+0x1d4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	8812      	ldrh	r2, [r2, #0]
 800095e:	4611      	mov	r1, r2
 8000960:	2201      	movs	r2, #1
 8000962:	408a      	lsls	r2, r1
 8000964:	43d2      	mvns	r2, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <Set_EXTI+0x1d4>)
 800096a:	400b      	ands	r3, r1
 800096c:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_PinConfig->EXTI_PIN.EXTI_LineNumber);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff febc 	bl	80006f0 <Disable_NVIC>
}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40013800 	.word	0x40013800
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400
 800098c:	40020800 	.word	0x40020800
 8000990:	40020c00 	.word	0x40020c00
 8000994:	40013c00 	.word	0x40013c00
 8000998:	20000084 	.word	0x20000084

0800099c <MCAL_EXTI_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_PinConfig){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	Set_EXTI(EXTI_PinConfig);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff0b 	bl	80007c0 <Set_EXTI>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <EXTI0_IRQHandler>:
/*
 * ===================================
 * 			 ISR  Functions
 * ===================================
 */
void EXTI0_IRQHandler(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 0);
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <EXTI0_IRQHandler+0x1c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <EXTI0_IRQHandler+0x1c>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[0]();
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <EXTI0_IRQHandler+0x20>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4798      	blx	r3
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40013c00 	.word	0x40013c00
 80009d4:	20000084 	.word	0x20000084

080009d8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 1);
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <EXTI1_IRQHandler+0x1c>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <EXTI1_IRQHandler+0x1c>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[1]();
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <EXTI1_IRQHandler+0x20>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40013c00 	.word	0x40013c00
 80009f8:	20000084 	.word	0x20000084

080009fc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 2);
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <EXTI2_IRQHandler+0x1c>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <EXTI2_IRQHandler+0x1c>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[2]();
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <EXTI2_IRQHandler+0x20>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	4798      	blx	r3
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40013c00 	.word	0x40013c00
 8000a1c:	20000084 	.word	0x20000084

08000a20 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 3);
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <EXTI3_IRQHandler+0x1c>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <EXTI3_IRQHandler+0x1c>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[3]();
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <EXTI3_IRQHandler+0x20>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	4798      	blx	r3
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40013c00 	.word	0x40013c00
 8000a40:	20000084 	.word	0x20000084

08000a44 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	// Clear PR Register by writing 1 in it
	EXTI->PR |= (1 << 4);
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <EXTI4_IRQHandler+0x1c>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <EXTI4_IRQHandler+0x1c>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6153      	str	r3, [r2, #20]
	G_IRQ_CallBack[4]();
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <EXTI4_IRQHandler+0x20>)
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	4798      	blx	r3
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40013c00 	.word	0x40013c00
 8000a64:	20000084 	.word	0x20000084

08000a68 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 5 ) {	EXTI->PR |=  (1 << 5)    ; G_IRQ_CallBack[5]() ;   }
 8000a6c:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d008      	beq.n	8000a8a <EXTI9_5_IRQHandler+0x22>
 8000a78:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	6153      	str	r3, [r2, #20]
 8000a84:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <EXTI9_5_IRQHandler+0xa4>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4798      	blx	r3
	if (EXTI->PR & 1 << 6 ) {	EXTI->PR |=  (1 << 6)    ; G_IRQ_CallBack[6]() ;   }
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d008      	beq.n	8000aa8 <EXTI9_5_IRQHandler+0x40>
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <EXTI9_5_IRQHandler+0xa4>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4798      	blx	r3
	if (EXTI->PR & 1 << 7 ) {	EXTI->PR |=  (1 << 7)    ; G_IRQ_CallBack[7]() ;   }
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d008      	beq.n	8000ac6 <EXTI9_5_IRQHandler+0x5e>
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000abe:	6153      	str	r3, [r2, #20]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <EXTI9_5_IRQHandler+0xa4>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	4798      	blx	r3
	if (EXTI->PR & 1 << 8 ) {	EXTI->PR |=  (1 << 8)    ; G_IRQ_CallBack[8]() ;   }
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d008      	beq.n	8000ae4 <EXTI9_5_IRQHandler+0x7c>
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <EXTI9_5_IRQHandler+0xa4>)
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	4798      	blx	r3
	if (EXTI->PR & 1 << 9 ) {	EXTI->PR |=  (1 << 9)    ; G_IRQ_CallBack[9]() ;   }
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <EXTI9_5_IRQHandler+0x9a>
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <EXTI9_5_IRQHandler+0xa0>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6153      	str	r3, [r2, #20]
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <EXTI9_5_IRQHandler+0xa4>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b00:	4798      	blx	r3
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40013c00 	.word	0x40013c00
 8000b0c:	20000084 	.word	0x20000084

08000b10 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 10 ) {	EXTI->PR |=  (1 << 10)    ; G_IRQ_CallBack[10]() ;   }
 8000b14:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d008      	beq.n	8000b32 <EXTI15_10_IRQHandler+0x22>
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	4a29      	ldr	r2, [pc, #164]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b2a:	6153      	str	r3, [r2, #20]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <EXTI15_10_IRQHandler+0xc0>)
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b30:	4798      	blx	r3
	if (EXTI->PR & 1 << 11 ) {	EXTI->PR |=  (1 << 11)    ; G_IRQ_CallBack[11]() ;   }
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <EXTI15_10_IRQHandler+0x40>
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a22      	ldr	r2, [pc, #136]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <EXTI15_10_IRQHandler+0xc0>)
 8000b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4e:	4798      	blx	r3
	if (EXTI->PR & 1 << 12 ) {	EXTI->PR |=  (1 << 12)    ; G_IRQ_CallBack[12]() ;   }
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <EXTI15_10_IRQHandler+0x5e>
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a1a      	ldr	r2, [pc, #104]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b66:	6153      	str	r3, [r2, #20]
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <EXTI15_10_IRQHandler+0xc0>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4798      	blx	r3
	if (EXTI->PR & 1 << 13 ) {	EXTI->PR |=  (1 << 13)    ; G_IRQ_CallBack[13]() ;   }
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <EXTI15_10_IRQHandler+0x7c>
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a13      	ldr	r2, [pc, #76]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <EXTI15_10_IRQHandler+0xc0>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	4798      	blx	r3
	if (EXTI->PR & 1 << 14 ) {	EXTI->PR |=  (1 << 14)    ; G_IRQ_CallBack[14]() ;   }
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <EXTI15_10_IRQHandler+0x9a>
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba2:	6153      	str	r3, [r2, #20]
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <EXTI15_10_IRQHandler+0xc0>)
 8000ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba8:	4798      	blx	r3
	if (EXTI->PR & 1 << 15 ) {	EXTI->PR |=  (1 << 15)    ; G_IRQ_CallBack[15]() ;   }
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d008      	beq.n	8000bc8 <EXTI15_10_IRQHandler+0xb8>
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <EXTI15_10_IRQHandler+0xbc>)
 8000bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <EXTI15_10_IRQHandler+0xc0>)
 8000bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bc6:	4798      	blx	r3
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013c00 	.word	0x40013c00
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <MCAL_FPU_Enable>:
 */


#include "stm32f401xc_FPU_driver.h"

void MCAL_FPU_Enable(void){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
    SCB_CPACR |= (0xF << 20);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <MCAL_FPU_Enable+0x1c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <MCAL_FPU_Enable+0x1c>)
 8000bde:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed88 	.word	0xe000ed88

08000bf4 <I2C1_ER_IRQHandler>:
/*
 * ========================================================================
 * 				 				  ISR
 * ========================================================================
 */
void I2C1_ER_IRQHandler (void){
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000c0e:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <I2C1_EV_IRQHandler+0xe8>)
 8000c10:	617b      	str	r3, [r7, #20]

	// Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (I2C_CR2_ITEVTEN) ;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c1a:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & (I2C_CR2_ITBUFEN) ;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c24:	60fb      	str	r3, [r7, #12]
	temp3   = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3){
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00a      	beq.n	8000c4c <I2C1_EV_IRQHandler+0x48>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <I2C1_EV_IRQHandler+0x48>
		// STOF flag is set
		// Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	601a      	str	r2, [r3, #0]
		SlaveStates(I2Cx,Slave_EV_STOPF);
 8000c44:	2100      	movs	r1, #0
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f000 f860 	bl	8000d0c <SlaveStates>
	}

	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by ADDR event
	// Note : When master mode : Address is sent
	// When Slave mode   : Address matched with own address
	if(temp1 && temp3){
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d012      	beq.n	8000c82 <I2C1_EV_IRQHandler+0x7e>
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00f      	beq.n	8000c82 <I2C1_EV_IRQHandler+0x7e>
		// Interrupt is generated because of ADDR event
		// Check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL)){
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d109      	bne.n	8000c82 <I2C1_EV_IRQHandler+0x7e>
			/* master */
		}
		else{
			// Slave mode
			// Clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	607b      	str	r3, [r7, #4]
			dummy_read = I2Cx->SR2;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	607b      	str	r3, [r7, #4]
			SlaveStates(I2Cx,Slave_EV_ADDR_Sent);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	6978      	ldr	r0, [r7, #20]
 8000c7e:	f000 f845 	bl	8000d0c <SlaveStates>
		}
	}

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8a:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3){
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00f      	beq.n	8000cb2 <I2C1_EV_IRQHandler+0xae>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00c      	beq.n	8000cb2 <I2C1_EV_IRQHandler+0xae>
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d009      	beq.n	8000cb2 <I2C1_EV_IRQHandler+0xae>
		// Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d103      	bne.n	8000cb2 <I2C1_EV_IRQHandler+0xae>
			/* The device is master */
		}
		else{
			// Slave
			SlaveStates(I2Cx,Slave_EV_TxE);
 8000caa:	2104      	movs	r1, #4
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f000 f82d 	bl	8000d0c <SlaveStates>
		}
	}

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cba:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3){
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00f      	beq.n	8000ce2 <I2C1_EV_IRQHandler+0xde>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00c      	beq.n	8000ce2 <I2C1_EV_IRQHandler+0xde>
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d009      	beq.n	8000ce2 <I2C1_EV_IRQHandler+0xde>
		// Check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL)){
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <I2C1_EV_IRQHandler+0xde>
			/* The device is master */
		}
		else{
			// Slave
			SlaveStates(I2Cx,Slave_EV_RxNE);
 8000cda:	2103      	movs	r1, #3
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f000 f815 	bl	8000d0c <SlaveStates>
		}
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400

08000cf0 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void){
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SlaveStates>:
		}
	}
	return BitStatus;
}

static void SlaveStates (I2C_TypeDef* I2Cx  ,Slave_State state){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]

	uint8_t index = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]

	if(I2Cx == I2C1){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e10 <SlaveStates+0x104>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d102      	bne.n	8000d2a <SlaveStates+0x1e>
		index = I2C1_Index;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e00c      	b.n	8000d44 <SlaveStates+0x38>
	}
	else if(I2Cx == I2C2){
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a39      	ldr	r2, [pc, #228]	@ (8000e14 <SlaveStates+0x108>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d102      	bne.n	8000d38 <SlaveStates+0x2c>
		index = I2C2_Index;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e005      	b.n	8000d44 <SlaveStates+0x38>
	}
	else if(I2Cx == I2C3){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <SlaveStates+0x10c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <SlaveStates+0x38>
		index = I2C3_Index;
 8000d40:	2302      	movs	r3, #2
 8000d42:	73fb      	strb	r3, [r7, #15]
	}

	switch(state){
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d85d      	bhi.n	8000e06 <SlaveStates+0xfa>
 8000d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <SlaveStates+0x44>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d75 	.word	0x08000d75
 8000d54:	08000d99 	.word	0x08000d99
 8000d58:	08000e07 	.word	0x08000e07
 8000d5c:	08000dd5 	.word	0x08000dd5
 8000d60:	08000db1 	.word	0x08000db1
 8000d64:	08000d69 	.word	0x08000d69

		case Slave_ERR_AF:{
			// Make sure that the slave is really in transmitter mode
			if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d141      	bne.n	8000df8 <SlaveStates+0xec>
			break ;
		}

		case Slave_EV_STOPF:{
			// Make sure that the slave is really in transmitter mode
			if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d03d      	beq.n	8000dfc <SlaveStates+0xf0>
				// Notify APP that the Stop Condition is sent by the master
				G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_STOPF) ;
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	4926      	ldr	r1, [pc, #152]	@ (8000e1c <SlaveStates+0x110>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3324      	adds	r3, #36	@ 0x24
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2000      	movs	r0, #0
 8000d94:	4798      	blx	r3
			break ;
 8000d96:	e031      	b.n	8000dfc <SlaveStates+0xf0>
		}

		case Slave_EV_ADDR_Sent:{
			// Notify APP that the Stop Condition is sent by the master
			G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_ADDR_Sent) ;
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	4920      	ldr	r1, [pc, #128]	@ (8000e1c <SlaveStates+0x110>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	3324      	adds	r3, #36	@ 0x24
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2001      	movs	r0, #1
 8000dac:	4798      	blx	r3
			break ;
 8000dae:	e02a      	b.n	8000e06 <SlaveStates+0xfa>
		}

		case Slave_EV_TxE:
		{
			// Make sure that the slave is really in transmitter mode
			if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d021      	beq.n	8000e00 <SlaveStates+0xf4>
				// The APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
				G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_TxE) ;
 8000dbc:	7bfa      	ldrb	r2, [r7, #15]
 8000dbe:	4917      	ldr	r1, [pc, #92]	@ (8000e1c <SlaveStates+0x110>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	3324      	adds	r3, #36	@ 0x24
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2004      	movs	r0, #4
 8000dd0:	4798      	blx	r3
			break ;
 8000dd2:	e015      	b.n	8000e00 <SlaveStates+0xf4>
		}
		case Slave_EV_RxNE:{
			//make sure that the slave is really in receiver mode
			if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d111      	bne.n	8000e04 <SlaveStates+0xf8>
				//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
				G_I2C_Config [index].P_Slave_Event_CallBack (Slave_EV_RxNE) ;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	490e      	ldr	r1, [pc, #56]	@ (8000e1c <SlaveStates+0x110>)
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	440b      	add	r3, r1
 8000dee:	3324      	adds	r3, #36	@ 0x24
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2003      	movs	r0, #3
 8000df4:	4798      	blx	r3
			break ;
 8000df6:	e005      	b.n	8000e04 <SlaveStates+0xf8>
			break ;
 8000df8:	bf00      	nop
 8000dfa:	e004      	b.n	8000e06 <SlaveStates+0xfa>
			break ;
 8000dfc:	bf00      	nop
 8000dfe:	e002      	b.n	8000e06 <SlaveStates+0xfa>
			break ;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <SlaveStates+0xfa>
			break ;
 8000e04:	bf00      	nop
		}
	}
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40005800 	.word	0x40005800
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	200000c4 	.word	0x200000c4

08000e20 <MCAL_RCC_Init>:
 * Author: Ahmed Ezzat
 */

#include "stm32f401xc_RCC_driver.h"

void MCAL_RCC_Init(void){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
    // Choose Bypass
#if HSE_BYPASS == RC_CLK
    RCC->CR |= (1 << 18);

#elif HSE_BYPASS == MECHANICAL_CLK
    RCC->CR &= ~(1 << 18);
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]
#endif
    // HSE on
    RCC->CR |= (1 << 16);
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]

    // Wait Till Flag is Set
    while(GET_BIT(RCC->CR,17) == 0);
 8000e3c:	bf00      	nop
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f9      	beq.n	8000e3e <MCAL_RCC_Init+0x1e>

    // Switch to HSE
    RCC->CFGR &= ~(1 << 1);
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e50:	f023 0302 	bic.w	r3, r3, #2
 8000e54:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (1 << 0);
 8000e56:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <MCAL_RCC_Init+0x4c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6093      	str	r3, [r2, #8]


#else
#error "Invalid option"
#endif
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40023800 	.word	0x40023800

08000e70 <SPI1_IRQHandler>:
/*
 * ========================================================================
 * 				 				  ISR
 * ========================================================================
 */
void SPI1_IRQHandler(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SR &  (1<<1)) >> 1);
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <SPI1_IRQHandler+0x54>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	793b      	ldrb	r3, [r7, #4]
 8000e84:	f362 0300 	bfi	r3, r2, #0, #1
 8000e88:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR &  (1<<0)) >> 0);
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <SPI1_IRQHandler+0x54>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	793b      	ldrb	r3, [r7, #4]
 8000e96:	f362 0341 	bfi	r3, r2, #1, #1
 8000e9a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR &  (1<<4)) >> 4);
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <SPI1_IRQHandler+0x54>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	793b      	ldrb	r3, [r7, #4]
 8000eaa:	f362 0382 	bfi	r3, r2, #2, #1
 8000eae:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <SPI1_IRQHandler+0x58>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	7938      	ldrb	r0, [r7, #4]
 8000eb8:	4798      	blx	r3
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40013000 	.word	0x40013000
 8000ec8:	2000013c 	.word	0x2000013c

08000ecc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SR &  (1<<1)) >> 1);
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <SPI2_IRQHandler+0x54>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	793b      	ldrb	r3, [r7, #4]
 8000ee0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ee4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR &  (1<<0)) >> 0);
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <SPI2_IRQHandler+0x54>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ef6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR &  (1<<4)) >> 4);
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <SPI2_IRQHandler+0x54>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	793b      	ldrb	r3, [r7, #4]
 8000f06:	f362 0382 	bfi	r3, r2, #2, #1
 8000f0a:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SPI2_IRQHandler+0x58>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	7938      	ldrb	r0, [r7, #4]
 8000f14:	4798      	blx	r3
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40003800 	.word	0x40003800
 8000f24:	2000013c 	.word	0x2000013c

08000f28 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI3->SR &  (1<<1)) >> 1);
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <SPI3_IRQHandler+0x54>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	085b      	lsrs	r3, r3, #1
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	793b      	ldrb	r3, [r7, #4]
 8000f3c:	f362 0300 	bfi	r3, r2, #0, #1
 8000f40:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI3->SR &  (1<<0)) >> 0);
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <SPI3_IRQHandler+0x54>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	f362 0341 	bfi	r3, r2, #1, #1
 8000f52:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI3->SR &  (1<<4)) >> 4);
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <SPI3_IRQHandler+0x54>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	f362 0382 	bfi	r3, r2, #2, #1
 8000f66:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI3_Index]->P_IRQ_CallBack(irq_src);
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SPI3_IRQHandler+0x58>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	7938      	ldrb	r0, [r7, #4]
 8000f70:	4798      	blx	r3
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40003c00 	.word	0x40003c00
 8000f80:	2000013c 	.word	0x2000013c

08000f84 <MCAL_SysTicK_Init>:
#include "stm32f401xc_SysTick_driver.h"

static void(* GP_Function_CallBack)(void) = NULL;
static uint8_t G_SingleFlag = 0;

void MCAL_SysTicK_Init(SysTick_Config_t *SysTick_CFG){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    // Clear SysTick Timer by clear Enable
    SysTick->CTRL &= ~(1 << 0);
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000f92:	f023 0301 	bic.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

    /// Interrupt Enable/Disable
    if(SysTick_Interrupt_EN == (SysTick_CFG->SysTick_InterruptEnable)){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d106      	bne.n	8000fae <MCAL_SysTicK_Init+0x2a>
	SysTick->CTRL |= (1 << 1);
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e005      	b.n	8000fba <MCAL_SysTicK_Init+0x36>
    }
    else{
	SysTick->CTRL &= ~(1 << 1);
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fb4:	f023 0302 	bic.w	r3, r3, #2
 8000fb8:	6013      	str	r3, [r2, #0]
    }

    // Select Clock source AHB or AHB/8
    if(SysTick_CLK_AHB == (SysTick_CFG->SysTick_CLKSource)){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	785b      	ldrb	r3, [r3, #1]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <MCAL_SysTicK_Init+0x4c>
	SysTick->CTRL |= (1 << 2);
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6013      	str	r3, [r2, #0]
    }
    else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
	SysTick->CTRL &= ~(1 << 2);
    }
}
 8000fce:	e009      	b.n	8000fe4 <MCAL_SysTicK_Init+0x60>
    else if(SysTick_CLK_AHB_8 == (SysTick_CFG->SysTick_CLKSource)){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	785b      	ldrb	r3, [r3, #1]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <MCAL_SysTicK_Init+0x60>
	SysTick->CTRL &= ~(1 << 2);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <MCAL_SysTicK_Init+0x6c>)
 8000fde:	f023 0304 	bic.w	r3, r3, #4
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <MCAL_SysTicK_StartTimer>:

void MCAL_SysTicK_StartTimer(uint32_t ReloadValue){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    // Load Timer with ReloadValue
    SysTick->LOAD = ReloadValue;
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <MCAL_SysTicK_StartTimer+0x2c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6053      	str	r3, [r2, #4]

    // Reset Timer
    SysTick->VAL = 0;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <MCAL_SysTicK_StartTimer+0x2c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]

    // Start Timer
    SysTick->CTRL |= (1 << 0);
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <MCAL_SysTicK_StartTimer+0x2c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <MCAL_SysTicK_StartTimer+0x2c>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e010 	.word	0xe000e010

08001024 <MCAL_SysTicK_StopTimer>:

void MCAL_SysTicK_StopTimer(void){
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
    // Stop SysTick Counter
    SysTick->CTRL &= ~(1 << 0);
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MCAL_SysTicK_StopTimer+0x20>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <MCAL_SysTicK_StopTimer+0x20>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]

    // Reset Timer
    SysTick->VAL = 0;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <MCAL_SysTicK_StopTimer+0x20>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e010 	.word	0xe000e010

08001048 <MCAL_SysTicK_GetElapsedTime_SingleShot>:
	while(0 == GET_BIT(SysTick->CTRL, COUNTFLAG));
	MCAL_SysTicK_StopTimer();
    }
}

uint32_t MCAL_SysTicK_GetElapsedTime_SingleShot(void){
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
    return (SysTick->LOAD) - (SysTick->VAL);
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <MCAL_SysTicK_GetElapsedTime_SingleShot+0x18>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <MCAL_SysTicK_GetElapsedTime_SingleShot+0x18>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	1ad3      	subs	r3, r2, r3
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e010 	.word	0xe000e010

08001064 <SysTick_Handler>:
    if((ticks >= 0x00000001) && (ticks < 0x00FFFFFF)){
	MCAL_SysTicK_StartTimer(ticks);
    }
}

void SysTick_Handler(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    if(GP_Function_CallBack != NULL){
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <SysTick_Handler+0x24>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <SysTick_Handler+0x12>
	GP_Function_CallBack();
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SysTick_Handler+0x24>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4798      	blx	r3
    }

    if(1 == G_SingleFlag){
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Handler+0x28>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <SysTick_Handler+0x1e>
	MCAL_SysTicK_StopTimer();
 800107e:	f7ff ffd1 	bl	8001024 <MCAL_SysTicK_StopTimer>
    }
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000148 	.word	0x20000148
 800108c:	2000014c 	.word	0x2000014c

08001090 <Timer_Delay>:

void MCAL_Timer_Encoder_SetCounts(Timer_Config_t *Timer_Config, uint16_t Counts){
    /* TODO: implement */
}

void Timer_Delay(TIMER_TypeDef *Timer, float32 time, uint8_t uint_type){
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	ed87 0a02 	vstr	s0, [r7, #8]
 800109c:	460b      	mov	r3, r1
 800109e:	71fb      	strb	r3, [r7, #7]
    G_Timer = Timer;
 80010a0:	4a70      	ldr	r2, [pc, #448]	@ (8001264 <Timer_Delay+0x1d4>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6013      	str	r3, [r2, #0]

    // Disable timer completely first
    Timer->CR1 = 0;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
    Timer->DIER = 0;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    Timer->SR = 0;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]

    if(Timer == TIMER1){
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001268 <Timer_Delay+0x1d8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d106      	bne.n	80010ce <Timer_Delay+0x3e>
        RCC_TIMER1_CLK_EN();
 80010c0:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <Timer_Delay+0x1dc>)
 80010c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c4:	4a69      	ldr	r2, [pc, #420]	@ (800126c <Timer_Delay+0x1dc>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80010cc:	e042      	b.n	8001154 <Timer_Delay+0xc4>
    }
    else if(Timer == TIMER2){
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d10c      	bne.n	80010f0 <Timer_Delay+0x60>
        RCC_TIMER2_CLK_EN();
 80010d6:	4b65      	ldr	r3, [pc, #404]	@ (800126c <Timer_Delay+0x1dc>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a64      	ldr	r2, [pc, #400]	@ (800126c <Timer_Delay+0x1dc>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
        NVIC_IRQ_TIMER2_EN();
 80010e2:	4b63      	ldr	r3, [pc, #396]	@ (8001270 <Timer_Delay+0x1e0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a62      	ldr	r2, [pc, #392]	@ (8001270 <Timer_Delay+0x1e0>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e031      	b.n	8001154 <Timer_Delay+0xc4>
    }
    else if(Timer == TIMER3){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a60      	ldr	r2, [pc, #384]	@ (8001274 <Timer_Delay+0x1e4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d10c      	bne.n	8001112 <Timer_Delay+0x82>
        RCC_TIMER3_CLK_EN();
 80010f8:	4b5c      	ldr	r3, [pc, #368]	@ (800126c <Timer_Delay+0x1dc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	4a5b      	ldr	r2, [pc, #364]	@ (800126c <Timer_Delay+0x1dc>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	6413      	str	r3, [r2, #64]	@ 0x40
        NVIC_IRQ_TIMER3_EN();
 8001104:	4b5a      	ldr	r3, [pc, #360]	@ (8001270 <Timer_Delay+0x1e0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a59      	ldr	r2, [pc, #356]	@ (8001270 <Timer_Delay+0x1e0>)
 800110a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e020      	b.n	8001154 <Timer_Delay+0xc4>
    }
    else if(Timer == TIMER4){
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4a58      	ldr	r2, [pc, #352]	@ (8001278 <Timer_Delay+0x1e8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10c      	bne.n	8001134 <Timer_Delay+0xa4>
        RCC_TIMER4_CLK_EN();
 800111a:	4b54      	ldr	r3, [pc, #336]	@ (800126c <Timer_Delay+0x1dc>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a53      	ldr	r2, [pc, #332]	@ (800126c <Timer_Delay+0x1dc>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
        NVIC_IRQ_TIMER4_EN();
 8001126:	4b52      	ldr	r3, [pc, #328]	@ (8001270 <Timer_Delay+0x1e0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a51      	ldr	r2, [pc, #324]	@ (8001270 <Timer_Delay+0x1e0>)
 800112c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00f      	b.n	8001154 <Timer_Delay+0xc4>
    }
    else if(Timer == TIMER5){
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4a51      	ldr	r2, [pc, #324]	@ (800127c <Timer_Delay+0x1ec>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d10b      	bne.n	8001154 <Timer_Delay+0xc4>
        RCC_TIMER5_CLK_EN();
 800113c:	4b4b      	ldr	r3, [pc, #300]	@ (800126c <Timer_Delay+0x1dc>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a4a      	ldr	r2, [pc, #296]	@ (800126c <Timer_Delay+0x1dc>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
        NVIC_IRQ_TIMER5_EN();
 8001148:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <Timer_Delay+0x1f0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a4c      	ldr	r2, [pc, #304]	@ (8001280 <Timer_Delay+0x1f0>)
 800114e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]
    }

    // Timer off
    Timer->CR1 &= ~(1<<0);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 0201 	bic.w	r2, r3, #1
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	601a      	str	r2, [r3, #0]

    uint32_t timer_clock = 25000000; // 25 MHz - adjust to your actual clock
 8001160:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <Timer_Delay+0x1f4>)
 8001162:	613b      	str	r3, [r7, #16]
    uint32_t ticks_needed;
    uint32_t user_pre = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
    uint32_t user_top = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

    // Calculate required ticks based on unit
    if(uint_type == 0){
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d112      	bne.n	8001198 <Timer_Delay+0x108>
        // Milliseconds
        ticks_needed = (uint32_t)((timer_clock / 1000.0f) * time);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117c:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001288 <Timer_Delay+0x1f8>
 8001180:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001184:	edd7 7a02 	vldr	s15, [r7, #8]
 8001188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e011      	b.n	80011bc <Timer_Delay+0x12c>
    }
    else{
        // Microseconds
        ticks_needed = (uint32_t)((timer_clock / 1000000.0f) * time);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800128c <Timer_Delay+0x1fc>
 80011a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b6:	ee17 3a90 	vmov	r3, s15
 80011ba:	61fb      	str	r3, [r7, #28]
    }

    // Find optimal prescaler and reload value
    // ARR max is 65535 (16-bit) or 0xFFFFFFFF (32-bit)
    user_pre = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]

    while(1){
        user_top = ticks_needed / user_pre;
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]

        if(user_top <= 65535){
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d0:	d311      	bcc.n	80011f6 <Timer_Delay+0x166>
            break;
        }

        if(user_pre >= 65535){
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011d8:	4293      	cmp	r3, r2
 80011da:	d908      	bls.n	80011ee <Timer_Delay+0x15e>
            user_pre = 65535;
 80011dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e0:	61bb      	str	r3, [r7, #24]
            user_top = ticks_needed / user_pre;
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
            break;
 80011ec:	e004      	b.n	80011f8 <Timer_Delay+0x168>
        }

        user_pre++;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
        user_top = ticks_needed / user_pre;
 80011f4:	e7e4      	b.n	80011c0 <Timer_Delay+0x130>
            break;
 80011f6:	bf00      	nop
    }

    // Clear update flag
    Timer->SR = 0;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

    // Only Counter Overflow generates Update
    Timer->CR1 |= (1<<2);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f043 0204 	orr.w	r2, r3, #4
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]

    // Update Interrupt Enabled
    Timer->DIER |= (1<<0);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	60da      	str	r2, [r3, #12]

    // Set reload value (period)
    Timer->ARR = user_top - 1; // -1 because counter is 0-indexed
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set Prescaler
    Timer->PSC = (user_pre - 1);
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1e5a      	subs	r2, r3, #1
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28

    // Generate update event to load prescaler
    Timer->EGR |= (1<<0);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	615a      	str	r2, [r3, #20]

    // Clear the update flag that was set by EGR
    Timer->SR = 0;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]

    // Set delay flag
    delay_flag = 1;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <Timer_Delay+0x200>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]

    // Enable The Timer
    Timer->CR1 |= (1<<0);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	601a      	str	r2, [r3, #0]

    // Wait for timer interrupt to clear flag
    while(delay_flag);
 800124a:	bf00      	nop
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <Timer_Delay+0x200>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1fa      	bne.n	800124c <Timer_Delay+0x1bc>
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3724      	adds	r7, #36	@ 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000150 	.word	0x20000150
 8001268:	40010000 	.word	0x40010000
 800126c:	40023800 	.word	0x40023800
 8001270:	e000e100 	.word	0xe000e100
 8001274:	40000400 	.word	0x40000400
 8001278:	40000800 	.word	0x40000800
 800127c:	40000c00 	.word	0x40000c00
 8001280:	e000e104 	.word	0xe000e104
 8001284:	017d7840 	.word	0x017d7840
 8001288:	447a0000 	.word	0x447a0000
 800128c:	49742400 	.word	0x49742400
 8001290:	20000154 	.word	0x20000154

08001294 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
    // Clear Update Interrupt Flag
    if(G_Timer->SR & (1<<0)){
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <TIM2_IRQHandler+0x50>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d018      	beq.n	80012d8 <TIM2_IRQHandler+0x44>
        G_Timer->SR &= ~(1<<0);
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <TIM2_IRQHandler+0x50>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <TIM2_IRQHandler+0x50>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	611a      	str	r2, [r3, #16]

        // Clear delay flag
        delay_flag = 0;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <TIM2_IRQHandler+0x54>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

        // Timer off
        G_Timer->CR1 &= ~(1<<0);
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <TIM2_IRQHandler+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <TIM2_IRQHandler+0x50>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

        // Disable Interrupt
        NVIC_IRQ_TIMER2_DIS();
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <TIM2_IRQHandler+0x58>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <TIM2_IRQHandler+0x58>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	6013      	str	r3, [r2, #0]
    }
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000150 	.word	0x20000150
 80012e8:	20000154 	.word	0x20000154
 80012ec:	e000e180 	.word	0xe000e180

080012f0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
    G_Timer->SR &= ~(1<<0);  // Clear interrupt flag
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <TIM3_IRQHandler+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <TIM3_IRQHandler+0x40>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	611a      	str	r2, [r3, #16]
    delay_flag = 0;
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <TIM3_IRQHandler+0x44>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
    NVIC_IRQ_TIMER3_DIS();
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <TIM3_IRQHandler+0x48>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <TIM3_IRQHandler+0x48>)
 8001310:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001314:	6013      	str	r3, [r2, #0]
    G_Timer->CR1 &= ~(1<<0); // Timer off
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <TIM3_IRQHandler+0x40>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <TIM3_IRQHandler+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	20000150 	.word	0x20000150
 8001334:	20000154 	.word	0x20000154
 8001338:	e000e180 	.word	0xe000e180

0800133c <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    G_Timer->SR &= ~(1<<0);
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <TIM4_IRQHandler+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <TIM4_IRQHandler+0x40>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	611a      	str	r2, [r3, #16]
    delay_flag = 0;
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <TIM4_IRQHandler+0x44>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
    NVIC_IRQ_TIMER4_DIS();
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <TIM4_IRQHandler+0x48>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <TIM4_IRQHandler+0x48>)
 800135c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001360:	6013      	str	r3, [r2, #0]
    G_Timer->CR1 &= ~(1<<0);
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <TIM4_IRQHandler+0x40>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <TIM4_IRQHandler+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000150 	.word	0x20000150
 8001380:	20000154 	.word	0x20000154
 8001384:	e000e180 	.word	0xe000e180

08001388 <TIM5_IRQHandler>:

void TIM5_IRQHandler(){
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
    G_Timer->SR &= ~(1<<0);
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <TIM5_IRQHandler+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <TIM5_IRQHandler+0x40>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	611a      	str	r2, [r3, #16]
    delay_flag = 0;
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <TIM5_IRQHandler+0x44>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
    NVIC_IRQ_TIMER5_DIS();
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <TIM5_IRQHandler+0x48>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <TIM5_IRQHandler+0x48>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
    G_Timer->CR1 &= ~(1<<0);
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <TIM5_IRQHandler+0x40>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <TIM5_IRQHandler+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20000150 	.word	0x20000150
 80013cc:	20000154 	.word	0x20000154
 80013d0:	e000e184 	.word	0xe000e184

080013d4 <USART1_IRQHandler>:
/*
 * ========================================================================
 * 				 				  ISR
 * ========================================================================
 */
void USART1_IRQHandler(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
    S_USART_IRQ_SRC irq_src;

    irq_src.TXE  = ((USART1->SR &  (1<<7)) >> 7);
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <USART1_IRQHandler+0x54>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	09db      	lsrs	r3, r3, #7
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	793b      	ldrb	r3, [r7, #4]
 80013e8:	f362 0300 	bfi	r3, r2, #0, #1
 80013ec:	713b      	strb	r3, [r7, #4]
    irq_src.RXNE = ((USART1->SR &  (1<<5)) >> 5);
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <USART1_IRQHandler+0x54>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	f362 0341 	bfi	r3, r2, #1, #1
 8001400:	713b      	strb	r3, [r7, #4]
    irq_src.TCE  = ((USART1->SR &  (1<<6)) >> 6);
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <USART1_IRQHandler+0x54>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	099b      	lsrs	r3, r3, #6
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	f362 0382 	bfi	r3, r2, #2, #1
 8001414:	713b      	strb	r3, [r7, #4]

    G_UART_config->P_IRQ_CallBack(irq_src);
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <USART1_IRQHandler+0x58>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	7938      	ldrb	r0, [r7, #4]
 800141e:	4798      	blx	r3
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40011000 	.word	0x40011000
 800142c:	20000158 	.word	0x20000158

08001430 <MCAL_UART_Init>:
/*
 * =====================================================
 * 		  APIs Supported by "MCAL USART DRIVER"
 * =====================================================
 */
void MCAL_UART_Init(USART_TypeDef *UARTx, USART_PinConfig_t *UART_config){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    G_UART_config = UART_config;
 800143a:	4a51      	ldr	r2, [pc, #324]	@ (8001580 <MCAL_UART_Init+0x150>)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6013      	str	r3, [r2, #0]

    // Enable USART Clock
    if(UARTx == USART1){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a50      	ldr	r2, [pc, #320]	@ (8001584 <MCAL_UART_Init+0x154>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d109      	bne.n	800145c <MCAL_UART_Init+0x2c>
	RCC_USART1_CLK_EN();
 8001448:	4b4f      	ldr	r3, [pc, #316]	@ (8001588 <MCAL_UART_Init+0x158>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144c:	4a4e      	ldr	r2, [pc, #312]	@ (8001588 <MCAL_UART_Init+0x158>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6453      	str	r3, [r2, #68]	@ 0x44
	MCAL_USART_SetPins(USART1);
 8001454:	484b      	ldr	r0, [pc, #300]	@ (8001584 <MCAL_UART_Init+0x154>)
 8001456:	f000 f919 	bl	800168c <MCAL_USART_SetPins>
 800145a:	e01a      	b.n	8001492 <MCAL_UART_Init+0x62>
    }
    else if(UARTx == USART2){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4b      	ldr	r2, [pc, #300]	@ (800158c <MCAL_UART_Init+0x15c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d109      	bne.n	8001478 <MCAL_UART_Init+0x48>
	RCC_USART2_CLK_EN();
 8001464:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <MCAL_UART_Init+0x158>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	4a47      	ldr	r2, [pc, #284]	@ (8001588 <MCAL_UART_Init+0x158>)
 800146a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146e:	6413      	str	r3, [r2, #64]	@ 0x40
	MCAL_USART_SetPins(USART2);
 8001470:	4846      	ldr	r0, [pc, #280]	@ (800158c <MCAL_UART_Init+0x15c>)
 8001472:	f000 f90b 	bl	800168c <MCAL_USART_SetPins>
 8001476:	e00c      	b.n	8001492 <MCAL_UART_Init+0x62>
    }
    else if(UARTx == USART6){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a45      	ldr	r2, [pc, #276]	@ (8001590 <MCAL_UART_Init+0x160>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d108      	bne.n	8001492 <MCAL_UART_Init+0x62>
	RCC_USART6_CLK_EN();
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <MCAL_UART_Init+0x158>)
 8001482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001484:	4a40      	ldr	r2, [pc, #256]	@ (8001588 <MCAL_UART_Init+0x158>)
 8001486:	f043 0320 	orr.w	r3, r3, #32
 800148a:	6453      	str	r3, [r2, #68]	@ 0x44
	MCAL_USART_SetPins(USART6);
 800148c:	4840      	ldr	r0, [pc, #256]	@ (8001590 <MCAL_UART_Init+0x160>)
 800148e:	f000 f8fd 	bl	800168c <MCAL_USART_SetPins>
    }

    UARTx->CR1 = 0;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    UARTx->CR2 = 0;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
    UARTx->CR3 = 0;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]

    // Enable UART
    UARTx->CR1 |= (1 << 13);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]

    // Choose Mode (TX/RX)
    UARTx->CR1 |= UART_config->USART_Mode;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60da      	str	r2, [r3, #12]

    // Select Word Length
    UARTx->CR1 |= UART_config->USART_PayLoad_Lenght;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	7852      	ldrb	r2, [r2, #1]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]

    // Choose Parity Mode
    UARTx->CR1 |= UART_config->USART_ParityMode;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	7892      	ldrb	r2, [r2, #2]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60da      	str	r2, [r3, #12]

    // Choose Number of Stop Bits
    UARTx->CR2 |= UART_config->USART_StopBits;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	78d2      	ldrb	r2, [r2, #3]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]

    // Set BaudRate
    UARTx->BRR |= (((162 & 0xFFFF) << 4) | 12);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f443 6322 	orr.w	r3, r3, #2592	@ 0xa20
 80014f0:	f043 030c 	orr.w	r3, r3, #12
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6093      	str	r3, [r2, #8]

    // Choose Sample Mode
    UARTx->CR1 |= UART_config->USART_Sampling;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	7a12      	ldrb	r2, [r2, #8]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60da      	str	r2, [r3, #12]

    // Configure Hardware Flow Control
    UARTx->CR3 |= UART_config->USART_HW_FlowCTRL;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	7a52      	ldrb	r2, [r2, #9]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	615a      	str	r2, [r3, #20]

    // Enable Interrupt
    if(UART_config->USART_IRQ_Enable != UART_IRQ_ENABLE_NONE){
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7a9b      	ldrb	r3, [r3, #10]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d027      	beq.n	800156c <MCAL_UART_Init+0x13c>
	UARTx->CR1 |= UART_config->USART_IRQ_Enable;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	7a92      	ldrb	r2, [r2, #10]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60da      	str	r2, [r3, #12]

	if(UARTx == USART1){
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a15      	ldr	r2, [pc, #84]	@ (8001584 <MCAL_UART_Init+0x154>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d106      	bne.n	8001540 <MCAL_UART_Init+0x110>
	    NVIC_IRQ_USART1_EN();
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MCAL_UART_Init+0x164>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <MCAL_UART_Init+0x164>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	6013      	str	r3, [r2, #0]
	}
    }
    else{
	UARTx->CR1 &= ~( (1<<5) | (1<<6) | (1<<7) | (1<<8) ); // clear RXNEIE,TCIE,TXEIE,PEIE
    }
}
 800153e:	e01b      	b.n	8001578 <MCAL_UART_Init+0x148>
	else if(UARTx == USART2){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <MCAL_UART_Init+0x15c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d106      	bne.n	8001556 <MCAL_UART_Init+0x126>
	    NVIC_IRQ_USART2_EN();
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MCAL_UART_Init+0x164>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <MCAL_UART_Init+0x164>)
 800154e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	e010      	b.n	8001578 <MCAL_UART_Init+0x148>
	else if(UARTx == USART6){
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <MCAL_UART_Init+0x160>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10c      	bne.n	8001578 <MCAL_UART_Init+0x148>
	    NVIC_IRQ_USART6_EN();
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MCAL_UART_Init+0x168>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <MCAL_UART_Init+0x168>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	e005      	b.n	8001578 <MCAL_UART_Init+0x148>
	UARTx->CR1 &= ~( (1<<5) | (1<<6) | (1<<7) | (1<<8) ); // clear RXNEIE,TCIE,TXEIE,PEIE
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000158 	.word	0x20000158
 8001584:	40011000 	.word	0x40011000
 8001588:	40023800 	.word	0x40023800
 800158c:	40004400 	.word	0x40004400
 8001590:	40011400 	.word	0x40011400
 8001594:	e000e104 	.word	0xe000e104
 8001598:	e000e108 	.word	0xe000e108

0800159c <MCAL_UART_SendData>:
	RCC_USART6_CLK_RST_SET();
	NVIC_IRQ_USART1_DIS();
    }
}

void MCAL_UART_SendData(USART_TypeDef *USARTx, uint8_t *PxBuffer, PollingMechanism_t polling_status){
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	71fb      	strb	r3, [r7, #7]
    if(Enable == polling_status){
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d11e      	bne.n	80015ee <MCAL_UART_SendData+0x52>
	while(!((USARTx->SR) & (1 << 7)));
 80015b0:	bf00      	nop
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f9      	beq.n	80015b2 <MCAL_UART_SendData+0x16>

	if((G_UART_config->USART_PayLoad_Lenght) == UART_PayLoad_Length_8Bits){
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MCAL_UART_SendData+0x8c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <MCAL_UART_SendData+0x38>
	    // This for Data sent 8-bit
	    USARTx->DR = (*PxBuffer & (uint16_t)0xFF);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]
	    USARTx->DR = (*PxBuffer & (uint16_t)0x01FF);
	}

	USARTx->CR1 |= (1 << 7);
    }
}
 80015d2:	e022      	b.n	800161a <MCAL_UART_SendData+0x7e>
	    USARTx->DR = (*PxBuffer & (uint16_t)0x01FF);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]
	    while(!((USARTx->SR) & (1 << 6)));
 80015de:	bf00      	nop
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f9      	beq.n	80015e0 <MCAL_UART_SendData+0x44>
}
 80015ec:	e015      	b.n	800161a <MCAL_UART_SendData+0x7e>
	if((G_UART_config->USART_PayLoad_Lenght) == UART_PayLoad_Length_8Bits){
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MCAL_UART_SendData+0x8c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <MCAL_UART_SendData+0x68>
	    USARTx->DR = (*PxBuffer & (uint16_t)0xFF);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	e004      	b.n	800160e <MCAL_UART_SendData+0x72>
	    USARTx->DR = (*PxBuffer & (uint16_t)0x01FF);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	605a      	str	r2, [r3, #4]
	USARTx->CR1 |= (1 << 7);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	60da      	str	r2, [r3, #12]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000158 	.word	0x20000158

0800162c <MCAL_UART_SendString>:
 * @brief Sends a string via UART
 * @param USARTx: UART peripheral (USART1, USART2, or USART6)
 * @param str: Pointer to null-terminated string
 * @param polling_status: Enable for blocking mode, Disable for non-blocking
 */
void MCAL_UART_SendString(USART_TypeDef *USARTx, uint8_t *str, PollingMechanism_t polling_status){
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
    uint16_t i = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	82fb      	strh	r3, [r7, #22]

    while(str[i] != '\0'){
 800163e:	e017      	b.n	8001670 <MCAL_UART_SendString+0x44>
        // Wait for TXE (Transmit Data Register Empty)
        while(!(USARTx->SR & (1 << 7)));
 8001640:	bf00      	nop
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f9      	beq.n	8001642 <MCAL_UART_SendString+0x16>

        // Write data to DR
        USARTx->DR = (str[i] & 0xFF);
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]

        // Wait for TC (Transmission Complete) before next character
        while(!(USARTx->SR & (1 << 6)));
 800165c:	bf00      	nop
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f9      	beq.n	800165e <MCAL_UART_SendString+0x32>

        i++;
 800166a:	8afb      	ldrh	r3, [r7, #22]
 800166c:	3301      	adds	r3, #1
 800166e:	82fb      	strh	r3, [r7, #22]
    while(str[i] != '\0'){
 8001670:	8afb      	ldrh	r3, [r7, #22]
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e1      	bne.n	8001640 <MCAL_UART_SendString+0x14>
    }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <MCAL_USART_SetPins>:

static void MCAL_USART_SetPins(USART_TypeDef *USARTx){
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    GPIO_PinConfig_t USART_PinConfig;

    if(USARTx == USART1){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a38      	ldr	r2, [pc, #224]	@ (8001778 <MCAL_USART_SetPins+0xec>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d124      	bne.n	80016e6 <MCAL_USART_SetPins+0x5a>
	// CLK ===> PA8
	// CTS ===> PA11
	// RTS ===> PA12

	// TX  ===> PA9
	USART_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800169c:	2309      	movs	r3, #9
 800169e:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 80016a0:	2302      	movs	r3, #2
 80016a2:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF7;
 80016a4:	2307      	movs	r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	4619      	mov	r1, r3
 80016ae:	4833      	ldr	r0, [pc, #204]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 80016b0:	f000 f86a 	bl	8001788 <MCAL_GPIO_Init>

	// RX  ===> PA10
	USART_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80016b4:	230a      	movs	r3, #10
 80016b6:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 80016b8:	2302      	movs	r3, #2
 80016ba:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF7;
 80016bc:	2307      	movs	r3, #7
 80016be:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4619      	mov	r1, r3
 80016c6:	482d      	ldr	r0, [pc, #180]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 80016c8:	f000 f85e 	bl	8001788 <MCAL_GPIO_Init>

	// CLK ===> PA8
	USART_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 80016d0:	2302      	movs	r3, #2
 80016d2:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF7;
 80016d4:	2307      	movs	r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4619      	mov	r1, r3
 80016de:	4827      	ldr	r0, [pc, #156]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 80016e0:	f000 f852 	bl	8001788 <MCAL_GPIO_Init>
	USART_PinConfig.GPIO_PinNumber = 12;
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
	USART_PinConfig.GPIO_AFx = GPIO_AF8;
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
    }
}
 80016e4:	e044      	b.n	8001770 <MCAL_USART_SetPins+0xe4>
    else if(USARTx == USART2){
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <MCAL_USART_SetPins+0xf4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d124      	bne.n	8001738 <MCAL_USART_SetPins+0xac>
	USART_PinConfig.GPIO_PinNumber = 2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 80016f2:	2302      	movs	r3, #2
 80016f4:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF7;
 80016f6:	2307      	movs	r3, #7
 80016f8:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	4619      	mov	r1, r3
 8001700:	481e      	ldr	r0, [pc, #120]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 8001702:	f000 f841 	bl	8001788 <MCAL_GPIO_Init>
	USART_PinConfig.GPIO_PinNumber = 3;
 8001706:	2303      	movs	r3, #3
 8001708:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 800170a:	2302      	movs	r3, #2
 800170c:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF7;
 800170e:	2307      	movs	r3, #7
 8001710:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4619      	mov	r1, r3
 8001718:	4818      	ldr	r0, [pc, #96]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 800171a:	f000 f835 	bl	8001788 <MCAL_GPIO_Init>
	USART_PinConfig.GPIO_PinNumber = 4;
 800171e:	2304      	movs	r3, #4
 8001720:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 8001722:	2302      	movs	r3, #2
 8001724:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF7;
 8001726:	2307      	movs	r3, #7
 8001728:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	4812      	ldr	r0, [pc, #72]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 8001732:	f000 f829 	bl	8001788 <MCAL_GPIO_Init>
}
 8001736:	e01b      	b.n	8001770 <MCAL_USART_SetPins+0xe4>
    else if(USARTx == USART6){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <MCAL_USART_SetPins+0xf8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d117      	bne.n	8001770 <MCAL_USART_SetPins+0xe4>
	USART_PinConfig.GPIO_PinNumber = 11;
 8001740:	230b      	movs	r3, #11
 8001742:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 8001744:	2302      	movs	r3, #2
 8001746:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF8;
 8001748:	2308      	movs	r3, #8
 800174a:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	480a      	ldr	r0, [pc, #40]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 8001754:	f000 f818 	bl	8001788 <MCAL_GPIO_Init>
	USART_PinConfig.GPIO_PinNumber = 12;
 8001758:	230c      	movs	r3, #12
 800175a:	813b      	strh	r3, [r7, #8]
	USART_PinConfig.GPIO_MODE = GPIO_MODE_AF;
 800175c:	2302      	movs	r3, #2
 800175e:	817b      	strh	r3, [r7, #10]
	USART_PinConfig.GPIO_AFx = GPIO_AF8;
 8001760:	2308      	movs	r3, #8
 8001762:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &USART_PinConfig);
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4619      	mov	r1, r3
 800176a:	4804      	ldr	r0, [pc, #16]	@ (800177c <MCAL_USART_SetPins+0xf0>)
 800176c:	f000 f80c 	bl	8001788 <MCAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40011000 	.word	0x40011000
 800177c:	40020000 	.word	0x40020000
 8001780:	40004400 	.word	0x40004400
 8001784:	40011400 	.word	0x40011400

08001788 <MCAL_GPIO_Init>:
  * @param [in]  	- GPIOx: x can be (A....E depends on device) to select GPIO Peripherals
  * @param [in] 	- pinConfig: pointer to GPIO_PinConfig_t structure that contains the config info for pin
  * @retval 		- none
  * Note 			- stm32f103xx have GPIO A,B,C,D,E but this package has only A and B fully and some of C and D
  */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
    uint32_t pin = PinConfig->GPIO_PinNumber;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

    // Clear old data from registers
    GPIOx->MODER   &= ~(0x3 << (2 * pin));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	2103      	movs	r1, #3
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	43d2      	mvns	r2, r2
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
    GPIOx->OTYPER  &= ~(1   << pin);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2101      	movs	r1, #1
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	43d2      	mvns	r2, r2
 80017bc:	401a      	ands	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
    GPIOx->OSPEEDR &= ~(0x3 << (2 * pin));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	0052      	lsls	r2, r2, #1
 80017ca:	2103      	movs	r1, #3
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	43d2      	mvns	r2, r2
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
    GPIOx->PUPDR   &= ~(0x3 << (2 * pin));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	0052      	lsls	r2, r2, #1
 80017e0:	2103      	movs	r1, #3
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	43d2      	mvns	r2, r2
 80017e8:	401a      	ands	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60da      	str	r2, [r3, #12]

    // Set new config
    switch (PinConfig->GPIO_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	885b      	ldrh	r3, [r3, #2]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	f000 809c 	beq.w	8001930 <MCAL_GPIO_Init+0x1a8>
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	f300 80b0 	bgt.w	800195e <MCAL_GPIO_Init+0x1d6>
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d002      	beq.n	8001808 <MCAL_GPIO_Init+0x80>
 8001802:	2b02      	cmp	r3, #2
 8001804:	d02e      	beq.n	8001864 <MCAL_GPIO_Init+0xdc>
 8001806:	e0aa      	b.n	800195e <MCAL_GPIO_Init+0x1d6>
    {
    case GPIO_MODE_OP:   // General purpose output
        GPIOx->MODER   |= (0x1 << (2 * pin));   // 01
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	0052      	lsls	r2, r2, #1
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	8912      	ldrh	r2, [r2, #8]
 8001824:	4611      	mov	r1, r2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	8992      	ldrh	r2, [r2, #12]
 800183a:	4611      	mov	r1, r2
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	0052      	lsls	r2, r2, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	8952      	ldrh	r2, [r2, #10]
 8001852:	4611      	mov	r1, r2
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	0052      	lsls	r2, r2, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60da      	str	r2, [r3, #12]
        break;
 8001862:	e08a      	b.n	800197a <MCAL_GPIO_Init+0x1f2>

    case GPIO_MODE_AF:   // Alternate function
        GPIOx->MODER   |= (0x2 << (2 * pin));   // 10
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	0052      	lsls	r2, r2, #1
 800186c:	2102      	movs	r1, #2
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
        GPIOx->OTYPER  |= (PinConfig->GPIO_TYPE << pin);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	8912      	ldrh	r2, [r2, #8]
 8001880:	4611      	mov	r1, r2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	fa01 f202 	lsl.w	r2, r1, r2
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_Output_Speed << (2 * pin));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	8992      	ldrh	r2, [r2, #12]
 8001896:	4611      	mov	r1, r2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	0052      	lsls	r2, r2, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	8952      	ldrh	r2, [r2, #10]
 80018ae:	4611      	mov	r1, r2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	0052      	lsls	r2, r2, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60da      	str	r2, [r3, #12]

        // Configure AF (AFRL [0..7], AFRH [8..15])
        if (pin < 8) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b07      	cmp	r3, #7
 80018c2:	d816      	bhi.n	80018f2 <MCAL_GPIO_Init+0x16a>
            GPIOx->AFR[0] &= ~(0xF << (4 * pin));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	210f      	movs	r1, #15
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	43d2      	mvns	r2, r2
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	621a      	str	r2, [r3, #32]
            GPIOx->AFR[0] |= (PinConfig->GPIO_AFx << (4 * pin));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6859      	ldr	r1, [r3, #4]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	621a      	str	r2, [r3, #32]
        }
        else if((pin >= 8) && (pin < 16)){
            GPIOx->AFR[1] &= ~(0xF << (4 * (pin - 8)));
            GPIOx->AFR[1] |= (PinConfig->GPIO_AFx << (4 * (pin - 8)));
        }
        break;
 80018f0:	e042      	b.n	8001978 <MCAL_GPIO_Init+0x1f0>
        else if((pin >= 8) && (pin < 16)){
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b07      	cmp	r3, #7
 80018f6:	d93f      	bls.n	8001978 <MCAL_GPIO_Init+0x1f0>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	d83c      	bhi.n	8001978 <MCAL_GPIO_Init+0x1f0>
            GPIOx->AFR[1] &= ~(0xF << (4 * (pin - 8)));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	3a08      	subs	r2, #8
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	210f      	movs	r1, #15
 800190a:	fa01 f202 	lsl.w	r2, r1, r2
 800190e:	43d2      	mvns	r2, r2
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
            GPIOx->AFR[1] |= (PinConfig->GPIO_AFx << (4 * (pin - 8)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3b08      	subs	r3, #8
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 800192e:	e023      	b.n	8001978 <MCAL_GPIO_Init+0x1f0>

    case GPIO_MODE_Analog:   // Analog
        GPIOx->MODER   |= (0x3 << (2 * pin));   // 11
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	0052      	lsls	r2, r2, #1
 8001938:	2103      	movs	r1, #3
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	8952      	ldrh	r2, [r2, #10]
 800194c:	4611      	mov	r1, r2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
        break;
 800195c:	e00d      	b.n	800197a <MCAL_GPIO_Init+0x1f2>

    case GPIO_MODE_IP:   // Input
    default:
        // Input mode (00)
        GPIOx->PUPDR   |= (PinConfig->GPIO_PU_PD << (2 * pin));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	8952      	ldrh	r2, [r2, #10]
 8001966:	4611      	mov	r1, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	0052      	lsls	r2, r2, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60da      	str	r2, [r3, #12]
        break;
 8001976:	e000      	b.n	800197a <MCAL_GPIO_Init+0x1f2>
        break;
 8001978:	bf00      	nop
    }
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <MCAL_GPIO_WritePin>:
  * @param [in]  	- pinNo: can be (0...15 depends on GPIOx) to select pin number
  * @param [in]  	- Value: the sate of the pin (can be two values based on @ref GPIO_PIN_state)
  * @retval 		- None
  * Note 			- None
  */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint16_t value){
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	807b      	strh	r3, [r7, #2]
 8001992:	4613      	mov	r3, r2
 8001994:	803b      	strh	r3, [r7, #0]
	if(value == GPIO_PIN_SET){
 8001996:	883b      	ldrh	r3, [r7, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d109      	bne.n	80019b0 <MCAL_GPIO_WritePin+0x2a>
		// BSy: Port x Set bit y (y= 0 .. 15)
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
        GPIOx->ODR |= (1 << PinNumber);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	615a      	str	r2, [r3, #20]
		// These bits are write-only and can be accessed in Word mode only.
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bit
        GPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80019ae:	e009      	b.n	80019c4 <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1 << PinNumber);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	43d2      	mvns	r2, r2
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	615a      	str	r2, [r3, #20]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <siprintf>:
 80019d0:	b40e      	push	{r1, r2, r3}
 80019d2:	b510      	push	{r4, lr}
 80019d4:	b09d      	sub	sp, #116	@ 0x74
 80019d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80019d8:	9002      	str	r0, [sp, #8]
 80019da:	9006      	str	r0, [sp, #24]
 80019dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80019e0:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <siprintf+0x3c>)
 80019e2:	9107      	str	r1, [sp, #28]
 80019e4:	9104      	str	r1, [sp, #16]
 80019e6:	490a      	ldr	r1, [pc, #40]	@ (8001a10 <siprintf+0x40>)
 80019e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80019ec:	9105      	str	r1, [sp, #20]
 80019ee:	2400      	movs	r4, #0
 80019f0:	a902      	add	r1, sp, #8
 80019f2:	6800      	ldr	r0, [r0, #0]
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80019f8:	f000 f98c 	bl	8001d14 <_svfiprintf_r>
 80019fc:	9b02      	ldr	r3, [sp, #8]
 80019fe:	701c      	strb	r4, [r3, #0]
 8001a00:	b01d      	add	sp, #116	@ 0x74
 8001a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a06:	b003      	add	sp, #12
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	ffff0208 	.word	0xffff0208

08001a14 <__errno>:
 8001a14:	4b01      	ldr	r3, [pc, #4]	@ (8001a1c <__errno+0x8>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000

08001a20 <__libc_init_array>:
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	4d0d      	ldr	r5, [pc, #52]	@ (8001a58 <__libc_init_array+0x38>)
 8001a24:	4c0d      	ldr	r4, [pc, #52]	@ (8001a5c <__libc_init_array+0x3c>)
 8001a26:	1b64      	subs	r4, r4, r5
 8001a28:	10a4      	asrs	r4, r4, #2
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	42a6      	cmp	r6, r4
 8001a2e:	d109      	bne.n	8001a44 <__libc_init_array+0x24>
 8001a30:	4d0b      	ldr	r5, [pc, #44]	@ (8001a60 <__libc_init_array+0x40>)
 8001a32:	4c0c      	ldr	r4, [pc, #48]	@ (8001a64 <__libc_init_array+0x44>)
 8001a34:	f000 fc64 	bl	8002300 <_init>
 8001a38:	1b64      	subs	r4, r4, r5
 8001a3a:	10a4      	asrs	r4, r4, #2
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	42a6      	cmp	r6, r4
 8001a40:	d105      	bne.n	8001a4e <__libc_init_array+0x2e>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a48:	4798      	blx	r3
 8001a4a:	3601      	adds	r6, #1
 8001a4c:	e7ee      	b.n	8001a2c <__libc_init_array+0xc>
 8001a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a52:	4798      	blx	r3
 8001a54:	3601      	adds	r6, #1
 8001a56:	e7f2      	b.n	8001a3e <__libc_init_array+0x1e>
 8001a58:	08002384 	.word	0x08002384
 8001a5c:	08002384 	.word	0x08002384
 8001a60:	08002384 	.word	0x08002384
 8001a64:	08002388 	.word	0x08002388

08001a68 <__retarget_lock_acquire_recursive>:
 8001a68:	4770      	bx	lr

08001a6a <__retarget_lock_release_recursive>:
 8001a6a:	4770      	bx	lr

08001a6c <_free_r>:
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	4605      	mov	r5, r0
 8001a70:	2900      	cmp	r1, #0
 8001a72:	d041      	beq.n	8001af8 <_free_r+0x8c>
 8001a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a78:	1f0c      	subs	r4, r1, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bfb8      	it	lt
 8001a7e:	18e4      	addlt	r4, r4, r3
 8001a80:	f000 f8e0 	bl	8001c44 <__malloc_lock>
 8001a84:	4a1d      	ldr	r2, [pc, #116]	@ (8001afc <_free_r+0x90>)
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	b933      	cbnz	r3, 8001a98 <_free_r+0x2c>
 8001a8a:	6063      	str	r3, [r4, #4]
 8001a8c:	6014      	str	r4, [r2, #0]
 8001a8e:	4628      	mov	r0, r5
 8001a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a94:	f000 b8dc 	b.w	8001c50 <__malloc_unlock>
 8001a98:	42a3      	cmp	r3, r4
 8001a9a:	d908      	bls.n	8001aae <_free_r+0x42>
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	1821      	adds	r1, r4, r0
 8001aa0:	428b      	cmp	r3, r1
 8001aa2:	bf01      	itttt	eq
 8001aa4:	6819      	ldreq	r1, [r3, #0]
 8001aa6:	685b      	ldreq	r3, [r3, #4]
 8001aa8:	1809      	addeq	r1, r1, r0
 8001aaa:	6021      	streq	r1, [r4, #0]
 8001aac:	e7ed      	b.n	8001a8a <_free_r+0x1e>
 8001aae:	461a      	mov	r2, r3
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	b10b      	cbz	r3, 8001ab8 <_free_r+0x4c>
 8001ab4:	42a3      	cmp	r3, r4
 8001ab6:	d9fa      	bls.n	8001aae <_free_r+0x42>
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	1850      	adds	r0, r2, r1
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	d10b      	bne.n	8001ad8 <_free_r+0x6c>
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	4401      	add	r1, r0
 8001ac4:	1850      	adds	r0, r2, r1
 8001ac6:	4283      	cmp	r3, r0
 8001ac8:	6011      	str	r1, [r2, #0]
 8001aca:	d1e0      	bne.n	8001a8e <_free_r+0x22>
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	6053      	str	r3, [r2, #4]
 8001ad2:	4408      	add	r0, r1
 8001ad4:	6010      	str	r0, [r2, #0]
 8001ad6:	e7da      	b.n	8001a8e <_free_r+0x22>
 8001ad8:	d902      	bls.n	8001ae0 <_free_r+0x74>
 8001ada:	230c      	movs	r3, #12
 8001adc:	602b      	str	r3, [r5, #0]
 8001ade:	e7d6      	b.n	8001a8e <_free_r+0x22>
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	1821      	adds	r1, r4, r0
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	bf04      	itt	eq
 8001ae8:	6819      	ldreq	r1, [r3, #0]
 8001aea:	685b      	ldreq	r3, [r3, #4]
 8001aec:	6063      	str	r3, [r4, #4]
 8001aee:	bf04      	itt	eq
 8001af0:	1809      	addeq	r1, r1, r0
 8001af2:	6021      	streq	r1, [r4, #0]
 8001af4:	6054      	str	r4, [r2, #4]
 8001af6:	e7ca      	b.n	8001a8e <_free_r+0x22>
 8001af8:	bd38      	pop	{r3, r4, r5, pc}
 8001afa:	bf00      	nop
 8001afc:	200002a0 	.word	0x200002a0

08001b00 <sbrk_aligned>:
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	4e0f      	ldr	r6, [pc, #60]	@ (8001b40 <sbrk_aligned+0x40>)
 8001b04:	460c      	mov	r4, r1
 8001b06:	6831      	ldr	r1, [r6, #0]
 8001b08:	4605      	mov	r5, r0
 8001b0a:	b911      	cbnz	r1, 8001b12 <sbrk_aligned+0x12>
 8001b0c:	f000 fba4 	bl	8002258 <_sbrk_r>
 8001b10:	6030      	str	r0, [r6, #0]
 8001b12:	4621      	mov	r1, r4
 8001b14:	4628      	mov	r0, r5
 8001b16:	f000 fb9f 	bl	8002258 <_sbrk_r>
 8001b1a:	1c43      	adds	r3, r0, #1
 8001b1c:	d103      	bne.n	8001b26 <sbrk_aligned+0x26>
 8001b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8001b22:	4620      	mov	r0, r4
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
 8001b26:	1cc4      	adds	r4, r0, #3
 8001b28:	f024 0403 	bic.w	r4, r4, #3
 8001b2c:	42a0      	cmp	r0, r4
 8001b2e:	d0f8      	beq.n	8001b22 <sbrk_aligned+0x22>
 8001b30:	1a21      	subs	r1, r4, r0
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 fb90 	bl	8002258 <_sbrk_r>
 8001b38:	3001      	adds	r0, #1
 8001b3a:	d1f2      	bne.n	8001b22 <sbrk_aligned+0x22>
 8001b3c:	e7ef      	b.n	8001b1e <sbrk_aligned+0x1e>
 8001b3e:	bf00      	nop
 8001b40:	2000029c 	.word	0x2000029c

08001b44 <_malloc_r>:
 8001b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b48:	1ccd      	adds	r5, r1, #3
 8001b4a:	f025 0503 	bic.w	r5, r5, #3
 8001b4e:	3508      	adds	r5, #8
 8001b50:	2d0c      	cmp	r5, #12
 8001b52:	bf38      	it	cc
 8001b54:	250c      	movcc	r5, #12
 8001b56:	2d00      	cmp	r5, #0
 8001b58:	4606      	mov	r6, r0
 8001b5a:	db01      	blt.n	8001b60 <_malloc_r+0x1c>
 8001b5c:	42a9      	cmp	r1, r5
 8001b5e:	d904      	bls.n	8001b6a <_malloc_r+0x26>
 8001b60:	230c      	movs	r3, #12
 8001b62:	6033      	str	r3, [r6, #0]
 8001b64:	2000      	movs	r0, #0
 8001b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c40 <_malloc_r+0xfc>
 8001b6e:	f000 f869 	bl	8001c44 <__malloc_lock>
 8001b72:	f8d8 3000 	ldr.w	r3, [r8]
 8001b76:	461c      	mov	r4, r3
 8001b78:	bb44      	cbnz	r4, 8001bcc <_malloc_r+0x88>
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	f7ff ffbf 	bl	8001b00 <sbrk_aligned>
 8001b82:	1c43      	adds	r3, r0, #1
 8001b84:	4604      	mov	r4, r0
 8001b86:	d158      	bne.n	8001c3a <_malloc_r+0xf6>
 8001b88:	f8d8 4000 	ldr.w	r4, [r8]
 8001b8c:	4627      	mov	r7, r4
 8001b8e:	2f00      	cmp	r7, #0
 8001b90:	d143      	bne.n	8001c1a <_malloc_r+0xd6>
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d04b      	beq.n	8001c2e <_malloc_r+0xea>
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	4639      	mov	r1, r7
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	eb04 0903 	add.w	r9, r4, r3
 8001ba0:	f000 fb5a 	bl	8002258 <_sbrk_r>
 8001ba4:	4581      	cmp	r9, r0
 8001ba6:	d142      	bne.n	8001c2e <_malloc_r+0xea>
 8001ba8:	6821      	ldr	r1, [r4, #0]
 8001baa:	1a6d      	subs	r5, r5, r1
 8001bac:	4629      	mov	r1, r5
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f7ff ffa6 	bl	8001b00 <sbrk_aligned>
 8001bb4:	3001      	adds	r0, #1
 8001bb6:	d03a      	beq.n	8001c2e <_malloc_r+0xea>
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	442b      	add	r3, r5
 8001bbc:	6023      	str	r3, [r4, #0]
 8001bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	bb62      	cbnz	r2, 8001c20 <_malloc_r+0xdc>
 8001bc6:	f8c8 7000 	str.w	r7, [r8]
 8001bca:	e00f      	b.n	8001bec <_malloc_r+0xa8>
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	1b52      	subs	r2, r2, r5
 8001bd0:	d420      	bmi.n	8001c14 <_malloc_r+0xd0>
 8001bd2:	2a0b      	cmp	r2, #11
 8001bd4:	d917      	bls.n	8001c06 <_malloc_r+0xc2>
 8001bd6:	1961      	adds	r1, r4, r5
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	6025      	str	r5, [r4, #0]
 8001bdc:	bf18      	it	ne
 8001bde:	6059      	strne	r1, [r3, #4]
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	bf08      	it	eq
 8001be4:	f8c8 1000 	streq.w	r1, [r8]
 8001be8:	5162      	str	r2, [r4, r5]
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	4630      	mov	r0, r6
 8001bee:	f000 f82f 	bl	8001c50 <__malloc_unlock>
 8001bf2:	f104 000b 	add.w	r0, r4, #11
 8001bf6:	1d23      	adds	r3, r4, #4
 8001bf8:	f020 0007 	bic.w	r0, r0, #7
 8001bfc:	1ac2      	subs	r2, r0, r3
 8001bfe:	bf1c      	itt	ne
 8001c00:	1a1b      	subne	r3, r3, r0
 8001c02:	50a3      	strne	r3, [r4, r2]
 8001c04:	e7af      	b.n	8001b66 <_malloc_r+0x22>
 8001c06:	6862      	ldr	r2, [r4, #4]
 8001c08:	42a3      	cmp	r3, r4
 8001c0a:	bf0c      	ite	eq
 8001c0c:	f8c8 2000 	streq.w	r2, [r8]
 8001c10:	605a      	strne	r2, [r3, #4]
 8001c12:	e7eb      	b.n	8001bec <_malloc_r+0xa8>
 8001c14:	4623      	mov	r3, r4
 8001c16:	6864      	ldr	r4, [r4, #4]
 8001c18:	e7ae      	b.n	8001b78 <_malloc_r+0x34>
 8001c1a:	463c      	mov	r4, r7
 8001c1c:	687f      	ldr	r7, [r7, #4]
 8001c1e:	e7b6      	b.n	8001b8e <_malloc_r+0x4a>
 8001c20:	461a      	mov	r2, r3
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	42a3      	cmp	r3, r4
 8001c26:	d1fb      	bne.n	8001c20 <_malloc_r+0xdc>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6053      	str	r3, [r2, #4]
 8001c2c:	e7de      	b.n	8001bec <_malloc_r+0xa8>
 8001c2e:	230c      	movs	r3, #12
 8001c30:	6033      	str	r3, [r6, #0]
 8001c32:	4630      	mov	r0, r6
 8001c34:	f000 f80c 	bl	8001c50 <__malloc_unlock>
 8001c38:	e794      	b.n	8001b64 <_malloc_r+0x20>
 8001c3a:	6005      	str	r5, [r0, #0]
 8001c3c:	e7d6      	b.n	8001bec <_malloc_r+0xa8>
 8001c3e:	bf00      	nop
 8001c40:	200002a0 	.word	0x200002a0

08001c44 <__malloc_lock>:
 8001c44:	4801      	ldr	r0, [pc, #4]	@ (8001c4c <__malloc_lock+0x8>)
 8001c46:	f7ff bf0f 	b.w	8001a68 <__retarget_lock_acquire_recursive>
 8001c4a:	bf00      	nop
 8001c4c:	20000298 	.word	0x20000298

08001c50 <__malloc_unlock>:
 8001c50:	4801      	ldr	r0, [pc, #4]	@ (8001c58 <__malloc_unlock+0x8>)
 8001c52:	f7ff bf0a 	b.w	8001a6a <__retarget_lock_release_recursive>
 8001c56:	bf00      	nop
 8001c58:	20000298 	.word	0x20000298

08001c5c <__ssputs_r>:
 8001c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c60:	688e      	ldr	r6, [r1, #8]
 8001c62:	461f      	mov	r7, r3
 8001c64:	42be      	cmp	r6, r7
 8001c66:	680b      	ldr	r3, [r1, #0]
 8001c68:	4682      	mov	sl, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4690      	mov	r8, r2
 8001c6e:	d82d      	bhi.n	8001ccc <__ssputs_r+0x70>
 8001c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001c78:	d026      	beq.n	8001cc8 <__ssputs_r+0x6c>
 8001c7a:	6965      	ldr	r5, [r4, #20]
 8001c7c:	6909      	ldr	r1, [r1, #16]
 8001c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c82:	eba3 0901 	sub.w	r9, r3, r1
 8001c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c8a:	1c7b      	adds	r3, r7, #1
 8001c8c:	444b      	add	r3, r9
 8001c8e:	106d      	asrs	r5, r5, #1
 8001c90:	429d      	cmp	r5, r3
 8001c92:	bf38      	it	cc
 8001c94:	461d      	movcc	r5, r3
 8001c96:	0553      	lsls	r3, r2, #21
 8001c98:	d527      	bpl.n	8001cea <__ssputs_r+0x8e>
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7ff ff52 	bl	8001b44 <_malloc_r>
 8001ca0:	4606      	mov	r6, r0
 8001ca2:	b360      	cbz	r0, 8001cfe <__ssputs_r+0xa2>
 8001ca4:	6921      	ldr	r1, [r4, #16]
 8001ca6:	464a      	mov	r2, r9
 8001ca8:	f000 fae6 	bl	8002278 <memcpy>
 8001cac:	89a3      	ldrh	r3, [r4, #12]
 8001cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb6:	81a3      	strh	r3, [r4, #12]
 8001cb8:	6126      	str	r6, [r4, #16]
 8001cba:	6165      	str	r5, [r4, #20]
 8001cbc:	444e      	add	r6, r9
 8001cbe:	eba5 0509 	sub.w	r5, r5, r9
 8001cc2:	6026      	str	r6, [r4, #0]
 8001cc4:	60a5      	str	r5, [r4, #8]
 8001cc6:	463e      	mov	r6, r7
 8001cc8:	42be      	cmp	r6, r7
 8001cca:	d900      	bls.n	8001cce <__ssputs_r+0x72>
 8001ccc:	463e      	mov	r6, r7
 8001cce:	6820      	ldr	r0, [r4, #0]
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	4641      	mov	r1, r8
 8001cd4:	f000 faa6 	bl	8002224 <memmove>
 8001cd8:	68a3      	ldr	r3, [r4, #8]
 8001cda:	1b9b      	subs	r3, r3, r6
 8001cdc:	60a3      	str	r3, [r4, #8]
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	4433      	add	r3, r6
 8001ce2:	6023      	str	r3, [r4, #0]
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cea:	462a      	mov	r2, r5
 8001cec:	f000 fad2 	bl	8002294 <_realloc_r>
 8001cf0:	4606      	mov	r6, r0
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d1e0      	bne.n	8001cb8 <__ssputs_r+0x5c>
 8001cf6:	6921      	ldr	r1, [r4, #16]
 8001cf8:	4650      	mov	r0, sl
 8001cfa:	f7ff feb7 	bl	8001a6c <_free_r>
 8001cfe:	230c      	movs	r3, #12
 8001d00:	f8ca 3000 	str.w	r3, [sl]
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0a:	81a3      	strh	r3, [r4, #12]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	e7e9      	b.n	8001ce6 <__ssputs_r+0x8a>
	...

08001d14 <_svfiprintf_r>:
 8001d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d18:	4698      	mov	r8, r3
 8001d1a:	898b      	ldrh	r3, [r1, #12]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	b09d      	sub	sp, #116	@ 0x74
 8001d20:	4607      	mov	r7, r0
 8001d22:	460d      	mov	r5, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	d510      	bpl.n	8001d4a <_svfiprintf_r+0x36>
 8001d28:	690b      	ldr	r3, [r1, #16]
 8001d2a:	b973      	cbnz	r3, 8001d4a <_svfiprintf_r+0x36>
 8001d2c:	2140      	movs	r1, #64	@ 0x40
 8001d2e:	f7ff ff09 	bl	8001b44 <_malloc_r>
 8001d32:	6028      	str	r0, [r5, #0]
 8001d34:	6128      	str	r0, [r5, #16]
 8001d36:	b930      	cbnz	r0, 8001d46 <_svfiprintf_r+0x32>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	b01d      	add	sp, #116	@ 0x74
 8001d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d46:	2340      	movs	r3, #64	@ 0x40
 8001d48:	616b      	str	r3, [r5, #20]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d4e:	2320      	movs	r3, #32
 8001d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d58:	2330      	movs	r3, #48	@ 0x30
 8001d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001ef8 <_svfiprintf_r+0x1e4>
 8001d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d62:	f04f 0901 	mov.w	r9, #1
 8001d66:	4623      	mov	r3, r4
 8001d68:	469a      	mov	sl, r3
 8001d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d6e:	b10a      	cbz	r2, 8001d74 <_svfiprintf_r+0x60>
 8001d70:	2a25      	cmp	r2, #37	@ 0x25
 8001d72:	d1f9      	bne.n	8001d68 <_svfiprintf_r+0x54>
 8001d74:	ebba 0b04 	subs.w	fp, sl, r4
 8001d78:	d00b      	beq.n	8001d92 <_svfiprintf_r+0x7e>
 8001d7a:	465b      	mov	r3, fp
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	4638      	mov	r0, r7
 8001d82:	f7ff ff6b 	bl	8001c5c <__ssputs_r>
 8001d86:	3001      	adds	r0, #1
 8001d88:	f000 80a7 	beq.w	8001eda <_svfiprintf_r+0x1c6>
 8001d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d8e:	445a      	add	r2, fp
 8001d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d92:	f89a 3000 	ldrb.w	r3, [sl]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 809f 	beq.w	8001eda <_svfiprintf_r+0x1c6>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001da6:	f10a 0a01 	add.w	sl, sl, #1
 8001daa:	9304      	str	r3, [sp, #16]
 8001dac:	9307      	str	r3, [sp, #28]
 8001dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8001db4:	4654      	mov	r4, sl
 8001db6:	2205      	movs	r2, #5
 8001db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dbc:	484e      	ldr	r0, [pc, #312]	@ (8001ef8 <_svfiprintf_r+0x1e4>)
 8001dbe:	f7fe fa0f 	bl	80001e0 <memchr>
 8001dc2:	9a04      	ldr	r2, [sp, #16]
 8001dc4:	b9d8      	cbnz	r0, 8001dfe <_svfiprintf_r+0xea>
 8001dc6:	06d0      	lsls	r0, r2, #27
 8001dc8:	bf44      	itt	mi
 8001dca:	2320      	movmi	r3, #32
 8001dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001dd0:	0711      	lsls	r1, r2, #28
 8001dd2:	bf44      	itt	mi
 8001dd4:	232b      	movmi	r3, #43	@ 0x2b
 8001dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001dda:	f89a 3000 	ldrb.w	r3, [sl]
 8001dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8001de0:	d015      	beq.n	8001e0e <_svfiprintf_r+0xfa>
 8001de2:	9a07      	ldr	r2, [sp, #28]
 8001de4:	4654      	mov	r4, sl
 8001de6:	2000      	movs	r0, #0
 8001de8:	f04f 0c0a 	mov.w	ip, #10
 8001dec:	4621      	mov	r1, r4
 8001dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001df2:	3b30      	subs	r3, #48	@ 0x30
 8001df4:	2b09      	cmp	r3, #9
 8001df6:	d94b      	bls.n	8001e90 <_svfiprintf_r+0x17c>
 8001df8:	b1b0      	cbz	r0, 8001e28 <_svfiprintf_r+0x114>
 8001dfa:	9207      	str	r2, [sp, #28]
 8001dfc:	e014      	b.n	8001e28 <_svfiprintf_r+0x114>
 8001dfe:	eba0 0308 	sub.w	r3, r0, r8
 8001e02:	fa09 f303 	lsl.w	r3, r9, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	9304      	str	r3, [sp, #16]
 8001e0a:	46a2      	mov	sl, r4
 8001e0c:	e7d2      	b.n	8001db4 <_svfiprintf_r+0xa0>
 8001e0e:	9b03      	ldr	r3, [sp, #12]
 8001e10:	1d19      	adds	r1, r3, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	9103      	str	r1, [sp, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bfbb      	ittet	lt
 8001e1a:	425b      	neglt	r3, r3
 8001e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8001e20:	9307      	strge	r3, [sp, #28]
 8001e22:	9307      	strlt	r3, [sp, #28]
 8001e24:	bfb8      	it	lt
 8001e26:	9204      	strlt	r2, [sp, #16]
 8001e28:	7823      	ldrb	r3, [r4, #0]
 8001e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e2c:	d10a      	bne.n	8001e44 <_svfiprintf_r+0x130>
 8001e2e:	7863      	ldrb	r3, [r4, #1]
 8001e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e32:	d132      	bne.n	8001e9a <_svfiprintf_r+0x186>
 8001e34:	9b03      	ldr	r3, [sp, #12]
 8001e36:	1d1a      	adds	r2, r3, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	9203      	str	r2, [sp, #12]
 8001e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e40:	3402      	adds	r4, #2
 8001e42:	9305      	str	r3, [sp, #20]
 8001e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001f08 <_svfiprintf_r+0x1f4>
 8001e48:	7821      	ldrb	r1, [r4, #0]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	4650      	mov	r0, sl
 8001e4e:	f7fe f9c7 	bl	80001e0 <memchr>
 8001e52:	b138      	cbz	r0, 8001e64 <_svfiprintf_r+0x150>
 8001e54:	9b04      	ldr	r3, [sp, #16]
 8001e56:	eba0 000a 	sub.w	r0, r0, sl
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	4082      	lsls	r2, r0
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	3401      	adds	r4, #1
 8001e62:	9304      	str	r3, [sp, #16]
 8001e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e68:	4824      	ldr	r0, [pc, #144]	@ (8001efc <_svfiprintf_r+0x1e8>)
 8001e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e6e:	2206      	movs	r2, #6
 8001e70:	f7fe f9b6 	bl	80001e0 <memchr>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d036      	beq.n	8001ee6 <_svfiprintf_r+0x1d2>
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <_svfiprintf_r+0x1ec>)
 8001e7a:	bb1b      	cbnz	r3, 8001ec4 <_svfiprintf_r+0x1b0>
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	3307      	adds	r3, #7
 8001e80:	f023 0307 	bic.w	r3, r3, #7
 8001e84:	3308      	adds	r3, #8
 8001e86:	9303      	str	r3, [sp, #12]
 8001e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e8a:	4433      	add	r3, r6
 8001e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e8e:	e76a      	b.n	8001d66 <_svfiprintf_r+0x52>
 8001e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e94:	460c      	mov	r4, r1
 8001e96:	2001      	movs	r0, #1
 8001e98:	e7a8      	b.n	8001dec <_svfiprintf_r+0xd8>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	3401      	adds	r4, #1
 8001e9e:	9305      	str	r3, [sp, #20]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 0c0a 	mov.w	ip, #10
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eac:	3a30      	subs	r2, #48	@ 0x30
 8001eae:	2a09      	cmp	r2, #9
 8001eb0:	d903      	bls.n	8001eba <_svfiprintf_r+0x1a6>
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0c6      	beq.n	8001e44 <_svfiprintf_r+0x130>
 8001eb6:	9105      	str	r1, [sp, #20]
 8001eb8:	e7c4      	b.n	8001e44 <_svfiprintf_r+0x130>
 8001eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e7f0      	b.n	8001ea6 <_svfiprintf_r+0x192>
 8001ec4:	ab03      	add	r3, sp, #12
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	462a      	mov	r2, r5
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <_svfiprintf_r+0x1f0>)
 8001ecc:	a904      	add	r1, sp, #16
 8001ece:	4638      	mov	r0, r7
 8001ed0:	f3af 8000 	nop.w
 8001ed4:	1c42      	adds	r2, r0, #1
 8001ed6:	4606      	mov	r6, r0
 8001ed8:	d1d6      	bne.n	8001e88 <_svfiprintf_r+0x174>
 8001eda:	89ab      	ldrh	r3, [r5, #12]
 8001edc:	065b      	lsls	r3, r3, #25
 8001ede:	f53f af2d 	bmi.w	8001d3c <_svfiprintf_r+0x28>
 8001ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ee4:	e72c      	b.n	8001d40 <_svfiprintf_r+0x2c>
 8001ee6:	ab03      	add	r3, sp, #12
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	462a      	mov	r2, r5
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <_svfiprintf_r+0x1f0>)
 8001eee:	a904      	add	r1, sp, #16
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	f000 f879 	bl	8001fe8 <_printf_i>
 8001ef6:	e7ed      	b.n	8001ed4 <_svfiprintf_r+0x1c0>
 8001ef8:	08002348 	.word	0x08002348
 8001efc:	08002352 	.word	0x08002352
 8001f00:	00000000 	.word	0x00000000
 8001f04:	08001c5d 	.word	0x08001c5d
 8001f08:	0800234e 	.word	0x0800234e

08001f0c <_printf_common>:
 8001f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f10:	4616      	mov	r6, r2
 8001f12:	4698      	mov	r8, r3
 8001f14:	688a      	ldr	r2, [r1, #8]
 8001f16:	690b      	ldr	r3, [r1, #16]
 8001f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	bfb8      	it	lt
 8001f20:	4613      	movlt	r3, r2
 8001f22:	6033      	str	r3, [r6, #0]
 8001f24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f28:	4607      	mov	r7, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	b10a      	cbz	r2, 8001f32 <_printf_common+0x26>
 8001f2e:	3301      	adds	r3, #1
 8001f30:	6033      	str	r3, [r6, #0]
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	0699      	lsls	r1, r3, #26
 8001f36:	bf42      	ittt	mi
 8001f38:	6833      	ldrmi	r3, [r6, #0]
 8001f3a:	3302      	addmi	r3, #2
 8001f3c:	6033      	strmi	r3, [r6, #0]
 8001f3e:	6825      	ldr	r5, [r4, #0]
 8001f40:	f015 0506 	ands.w	r5, r5, #6
 8001f44:	d106      	bne.n	8001f54 <_printf_common+0x48>
 8001f46:	f104 0a19 	add.w	sl, r4, #25
 8001f4a:	68e3      	ldr	r3, [r4, #12]
 8001f4c:	6832      	ldr	r2, [r6, #0]
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	42ab      	cmp	r3, r5
 8001f52:	dc26      	bgt.n	8001fa2 <_printf_common+0x96>
 8001f54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	3b00      	subs	r3, #0
 8001f5c:	bf18      	it	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	0692      	lsls	r2, r2, #26
 8001f62:	d42b      	bmi.n	8001fbc <_printf_common+0xb0>
 8001f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f68:	4641      	mov	r1, r8
 8001f6a:	4638      	mov	r0, r7
 8001f6c:	47c8      	blx	r9
 8001f6e:	3001      	adds	r0, #1
 8001f70:	d01e      	beq.n	8001fb0 <_printf_common+0xa4>
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	6922      	ldr	r2, [r4, #16]
 8001f76:	f003 0306 	and.w	r3, r3, #6
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf02      	ittt	eq
 8001f7e:	68e5      	ldreq	r5, [r4, #12]
 8001f80:	6833      	ldreq	r3, [r6, #0]
 8001f82:	1aed      	subeq	r5, r5, r3
 8001f84:	68a3      	ldr	r3, [r4, #8]
 8001f86:	bf0c      	ite	eq
 8001f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f8c:	2500      	movne	r5, #0
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	bfc4      	itt	gt
 8001f92:	1a9b      	subgt	r3, r3, r2
 8001f94:	18ed      	addgt	r5, r5, r3
 8001f96:	2600      	movs	r6, #0
 8001f98:	341a      	adds	r4, #26
 8001f9a:	42b5      	cmp	r5, r6
 8001f9c:	d11a      	bne.n	8001fd4 <_printf_common+0xc8>
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	e008      	b.n	8001fb4 <_printf_common+0xa8>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4652      	mov	r2, sl
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	4638      	mov	r0, r7
 8001faa:	47c8      	blx	r9
 8001fac:	3001      	adds	r0, #1
 8001fae:	d103      	bne.n	8001fb8 <_printf_common+0xac>
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fb8:	3501      	adds	r5, #1
 8001fba:	e7c6      	b.n	8001f4a <_printf_common+0x3e>
 8001fbc:	18e1      	adds	r1, r4, r3
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	2030      	movs	r0, #48	@ 0x30
 8001fc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001fc6:	4422      	add	r2, r4
 8001fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	e7c7      	b.n	8001f64 <_printf_common+0x58>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4622      	mov	r2, r4
 8001fd8:	4641      	mov	r1, r8
 8001fda:	4638      	mov	r0, r7
 8001fdc:	47c8      	blx	r9
 8001fde:	3001      	adds	r0, #1
 8001fe0:	d0e6      	beq.n	8001fb0 <_printf_common+0xa4>
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7d9      	b.n	8001f9a <_printf_common+0x8e>
	...

08001fe8 <_printf_i>:
 8001fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fec:	7e0f      	ldrb	r7, [r1, #24]
 8001fee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ff0:	2f78      	cmp	r7, #120	@ 0x78
 8001ff2:	4691      	mov	r9, r2
 8001ff4:	4680      	mov	r8, r0
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ffe:	d807      	bhi.n	8002010 <_printf_i+0x28>
 8002000:	2f62      	cmp	r7, #98	@ 0x62
 8002002:	d80a      	bhi.n	800201a <_printf_i+0x32>
 8002004:	2f00      	cmp	r7, #0
 8002006:	f000 80d1 	beq.w	80021ac <_printf_i+0x1c4>
 800200a:	2f58      	cmp	r7, #88	@ 0x58
 800200c:	f000 80b8 	beq.w	8002180 <_printf_i+0x198>
 8002010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002018:	e03a      	b.n	8002090 <_printf_i+0xa8>
 800201a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800201e:	2b15      	cmp	r3, #21
 8002020:	d8f6      	bhi.n	8002010 <_printf_i+0x28>
 8002022:	a101      	add	r1, pc, #4	@ (adr r1, 8002028 <_printf_i+0x40>)
 8002024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002028:	08002081 	.word	0x08002081
 800202c:	08002095 	.word	0x08002095
 8002030:	08002011 	.word	0x08002011
 8002034:	08002011 	.word	0x08002011
 8002038:	08002011 	.word	0x08002011
 800203c:	08002011 	.word	0x08002011
 8002040:	08002095 	.word	0x08002095
 8002044:	08002011 	.word	0x08002011
 8002048:	08002011 	.word	0x08002011
 800204c:	08002011 	.word	0x08002011
 8002050:	08002011 	.word	0x08002011
 8002054:	08002193 	.word	0x08002193
 8002058:	080020bf 	.word	0x080020bf
 800205c:	0800214d 	.word	0x0800214d
 8002060:	08002011 	.word	0x08002011
 8002064:	08002011 	.word	0x08002011
 8002068:	080021b5 	.word	0x080021b5
 800206c:	08002011 	.word	0x08002011
 8002070:	080020bf 	.word	0x080020bf
 8002074:	08002011 	.word	0x08002011
 8002078:	08002011 	.word	0x08002011
 800207c:	08002155 	.word	0x08002155
 8002080:	6833      	ldr	r3, [r6, #0]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6032      	str	r2, [r6, #0]
 8002088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800208c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002090:	2301      	movs	r3, #1
 8002092:	e09c      	b.n	80021ce <_printf_i+0x1e6>
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	1d19      	adds	r1, r3, #4
 800209a:	6031      	str	r1, [r6, #0]
 800209c:	0606      	lsls	r6, r0, #24
 800209e:	d501      	bpl.n	80020a4 <_printf_i+0xbc>
 80020a0:	681d      	ldr	r5, [r3, #0]
 80020a2:	e003      	b.n	80020ac <_printf_i+0xc4>
 80020a4:	0645      	lsls	r5, r0, #25
 80020a6:	d5fb      	bpl.n	80020a0 <_printf_i+0xb8>
 80020a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	da03      	bge.n	80020b8 <_printf_i+0xd0>
 80020b0:	232d      	movs	r3, #45	@ 0x2d
 80020b2:	426d      	negs	r5, r5
 80020b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020b8:	4858      	ldr	r0, [pc, #352]	@ (800221c <_printf_i+0x234>)
 80020ba:	230a      	movs	r3, #10
 80020bc:	e011      	b.n	80020e2 <_printf_i+0xfa>
 80020be:	6821      	ldr	r1, [r4, #0]
 80020c0:	6833      	ldr	r3, [r6, #0]
 80020c2:	0608      	lsls	r0, r1, #24
 80020c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80020c8:	d402      	bmi.n	80020d0 <_printf_i+0xe8>
 80020ca:	0649      	lsls	r1, r1, #25
 80020cc:	bf48      	it	mi
 80020ce:	b2ad      	uxthmi	r5, r5
 80020d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80020d2:	4852      	ldr	r0, [pc, #328]	@ (800221c <_printf_i+0x234>)
 80020d4:	6033      	str	r3, [r6, #0]
 80020d6:	bf14      	ite	ne
 80020d8:	230a      	movne	r3, #10
 80020da:	2308      	moveq	r3, #8
 80020dc:	2100      	movs	r1, #0
 80020de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020e2:	6866      	ldr	r6, [r4, #4]
 80020e4:	60a6      	str	r6, [r4, #8]
 80020e6:	2e00      	cmp	r6, #0
 80020e8:	db05      	blt.n	80020f6 <_printf_i+0x10e>
 80020ea:	6821      	ldr	r1, [r4, #0]
 80020ec:	432e      	orrs	r6, r5
 80020ee:	f021 0104 	bic.w	r1, r1, #4
 80020f2:	6021      	str	r1, [r4, #0]
 80020f4:	d04b      	beq.n	800218e <_printf_i+0x1a6>
 80020f6:	4616      	mov	r6, r2
 80020f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80020fc:	fb03 5711 	mls	r7, r3, r1, r5
 8002100:	5dc7      	ldrb	r7, [r0, r7]
 8002102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002106:	462f      	mov	r7, r5
 8002108:	42bb      	cmp	r3, r7
 800210a:	460d      	mov	r5, r1
 800210c:	d9f4      	bls.n	80020f8 <_printf_i+0x110>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d10b      	bne.n	800212a <_printf_i+0x142>
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	07df      	lsls	r7, r3, #31
 8002116:	d508      	bpl.n	800212a <_printf_i+0x142>
 8002118:	6923      	ldr	r3, [r4, #16]
 800211a:	6861      	ldr	r1, [r4, #4]
 800211c:	4299      	cmp	r1, r3
 800211e:	bfde      	ittt	le
 8002120:	2330      	movle	r3, #48	@ 0x30
 8002122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002126:	f106 36ff 	addle.w	r6, r6, #4294967295
 800212a:	1b92      	subs	r2, r2, r6
 800212c:	6122      	str	r2, [r4, #16]
 800212e:	f8cd a000 	str.w	sl, [sp]
 8002132:	464b      	mov	r3, r9
 8002134:	aa03      	add	r2, sp, #12
 8002136:	4621      	mov	r1, r4
 8002138:	4640      	mov	r0, r8
 800213a:	f7ff fee7 	bl	8001f0c <_printf_common>
 800213e:	3001      	adds	r0, #1
 8002140:	d14a      	bne.n	80021d8 <_printf_i+0x1f0>
 8002142:	f04f 30ff 	mov.w	r0, #4294967295
 8002146:	b004      	add	sp, #16
 8002148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	f043 0320 	orr.w	r3, r3, #32
 8002152:	6023      	str	r3, [r4, #0]
 8002154:	4832      	ldr	r0, [pc, #200]	@ (8002220 <_printf_i+0x238>)
 8002156:	2778      	movs	r7, #120	@ 0x78
 8002158:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	6831      	ldr	r1, [r6, #0]
 8002160:	061f      	lsls	r7, r3, #24
 8002162:	f851 5b04 	ldr.w	r5, [r1], #4
 8002166:	d402      	bmi.n	800216e <_printf_i+0x186>
 8002168:	065f      	lsls	r7, r3, #25
 800216a:	bf48      	it	mi
 800216c:	b2ad      	uxthmi	r5, r5
 800216e:	6031      	str	r1, [r6, #0]
 8002170:	07d9      	lsls	r1, r3, #31
 8002172:	bf44      	itt	mi
 8002174:	f043 0320 	orrmi.w	r3, r3, #32
 8002178:	6023      	strmi	r3, [r4, #0]
 800217a:	b11d      	cbz	r5, 8002184 <_printf_i+0x19c>
 800217c:	2310      	movs	r3, #16
 800217e:	e7ad      	b.n	80020dc <_printf_i+0xf4>
 8002180:	4826      	ldr	r0, [pc, #152]	@ (800221c <_printf_i+0x234>)
 8002182:	e7e9      	b.n	8002158 <_printf_i+0x170>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	f023 0320 	bic.w	r3, r3, #32
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	e7f6      	b.n	800217c <_printf_i+0x194>
 800218e:	4616      	mov	r6, r2
 8002190:	e7bd      	b.n	800210e <_printf_i+0x126>
 8002192:	6833      	ldr	r3, [r6, #0]
 8002194:	6825      	ldr	r5, [r4, #0]
 8002196:	6961      	ldr	r1, [r4, #20]
 8002198:	1d18      	adds	r0, r3, #4
 800219a:	6030      	str	r0, [r6, #0]
 800219c:	062e      	lsls	r6, r5, #24
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	d501      	bpl.n	80021a6 <_printf_i+0x1be>
 80021a2:	6019      	str	r1, [r3, #0]
 80021a4:	e002      	b.n	80021ac <_printf_i+0x1c4>
 80021a6:	0668      	lsls	r0, r5, #25
 80021a8:	d5fb      	bpl.n	80021a2 <_printf_i+0x1ba>
 80021aa:	8019      	strh	r1, [r3, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	6123      	str	r3, [r4, #16]
 80021b0:	4616      	mov	r6, r2
 80021b2:	e7bc      	b.n	800212e <_printf_i+0x146>
 80021b4:	6833      	ldr	r3, [r6, #0]
 80021b6:	1d1a      	adds	r2, r3, #4
 80021b8:	6032      	str	r2, [r6, #0]
 80021ba:	681e      	ldr	r6, [r3, #0]
 80021bc:	6862      	ldr	r2, [r4, #4]
 80021be:	2100      	movs	r1, #0
 80021c0:	4630      	mov	r0, r6
 80021c2:	f7fe f80d 	bl	80001e0 <memchr>
 80021c6:	b108      	cbz	r0, 80021cc <_printf_i+0x1e4>
 80021c8:	1b80      	subs	r0, r0, r6
 80021ca:	6060      	str	r0, [r4, #4]
 80021cc:	6863      	ldr	r3, [r4, #4]
 80021ce:	6123      	str	r3, [r4, #16]
 80021d0:	2300      	movs	r3, #0
 80021d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021d6:	e7aa      	b.n	800212e <_printf_i+0x146>
 80021d8:	6923      	ldr	r3, [r4, #16]
 80021da:	4632      	mov	r2, r6
 80021dc:	4649      	mov	r1, r9
 80021de:	4640      	mov	r0, r8
 80021e0:	47d0      	blx	sl
 80021e2:	3001      	adds	r0, #1
 80021e4:	d0ad      	beq.n	8002142 <_printf_i+0x15a>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	079b      	lsls	r3, r3, #30
 80021ea:	d413      	bmi.n	8002214 <_printf_i+0x22c>
 80021ec:	68e0      	ldr	r0, [r4, #12]
 80021ee:	9b03      	ldr	r3, [sp, #12]
 80021f0:	4298      	cmp	r0, r3
 80021f2:	bfb8      	it	lt
 80021f4:	4618      	movlt	r0, r3
 80021f6:	e7a6      	b.n	8002146 <_printf_i+0x15e>
 80021f8:	2301      	movs	r3, #1
 80021fa:	4632      	mov	r2, r6
 80021fc:	4649      	mov	r1, r9
 80021fe:	4640      	mov	r0, r8
 8002200:	47d0      	blx	sl
 8002202:	3001      	adds	r0, #1
 8002204:	d09d      	beq.n	8002142 <_printf_i+0x15a>
 8002206:	3501      	adds	r5, #1
 8002208:	68e3      	ldr	r3, [r4, #12]
 800220a:	9903      	ldr	r1, [sp, #12]
 800220c:	1a5b      	subs	r3, r3, r1
 800220e:	42ab      	cmp	r3, r5
 8002210:	dcf2      	bgt.n	80021f8 <_printf_i+0x210>
 8002212:	e7eb      	b.n	80021ec <_printf_i+0x204>
 8002214:	2500      	movs	r5, #0
 8002216:	f104 0619 	add.w	r6, r4, #25
 800221a:	e7f5      	b.n	8002208 <_printf_i+0x220>
 800221c:	08002359 	.word	0x08002359
 8002220:	0800236a 	.word	0x0800236a

08002224 <memmove>:
 8002224:	4288      	cmp	r0, r1
 8002226:	b510      	push	{r4, lr}
 8002228:	eb01 0402 	add.w	r4, r1, r2
 800222c:	d902      	bls.n	8002234 <memmove+0x10>
 800222e:	4284      	cmp	r4, r0
 8002230:	4623      	mov	r3, r4
 8002232:	d807      	bhi.n	8002244 <memmove+0x20>
 8002234:	1e43      	subs	r3, r0, #1
 8002236:	42a1      	cmp	r1, r4
 8002238:	d008      	beq.n	800224c <memmove+0x28>
 800223a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800223e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002242:	e7f8      	b.n	8002236 <memmove+0x12>
 8002244:	4402      	add	r2, r0
 8002246:	4601      	mov	r1, r0
 8002248:	428a      	cmp	r2, r1
 800224a:	d100      	bne.n	800224e <memmove+0x2a>
 800224c:	bd10      	pop	{r4, pc}
 800224e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002256:	e7f7      	b.n	8002248 <memmove+0x24>

08002258 <_sbrk_r>:
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	4d06      	ldr	r5, [pc, #24]	@ (8002274 <_sbrk_r+0x1c>)
 800225c:	2300      	movs	r3, #0
 800225e:	4604      	mov	r4, r0
 8002260:	4608      	mov	r0, r1
 8002262:	602b      	str	r3, [r5, #0]
 8002264:	f7fe f8a6 	bl	80003b4 <_sbrk>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d102      	bne.n	8002272 <_sbrk_r+0x1a>
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	b103      	cbz	r3, 8002272 <_sbrk_r+0x1a>
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	20000294 	.word	0x20000294

08002278 <memcpy>:
 8002278:	440a      	add	r2, r1
 800227a:	4291      	cmp	r1, r2
 800227c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002280:	d100      	bne.n	8002284 <memcpy+0xc>
 8002282:	4770      	bx	lr
 8002284:	b510      	push	{r4, lr}
 8002286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800228a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800228e:	4291      	cmp	r1, r2
 8002290:	d1f9      	bne.n	8002286 <memcpy+0xe>
 8002292:	bd10      	pop	{r4, pc}

08002294 <_realloc_r>:
 8002294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002298:	4607      	mov	r7, r0
 800229a:	4614      	mov	r4, r2
 800229c:	460d      	mov	r5, r1
 800229e:	b921      	cbnz	r1, 80022aa <_realloc_r+0x16>
 80022a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022a4:	4611      	mov	r1, r2
 80022a6:	f7ff bc4d 	b.w	8001b44 <_malloc_r>
 80022aa:	b92a      	cbnz	r2, 80022b8 <_realloc_r+0x24>
 80022ac:	f7ff fbde 	bl	8001a6c <_free_r>
 80022b0:	4625      	mov	r5, r4
 80022b2:	4628      	mov	r0, r5
 80022b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022b8:	f000 f81a 	bl	80022f0 <_malloc_usable_size_r>
 80022bc:	4284      	cmp	r4, r0
 80022be:	4606      	mov	r6, r0
 80022c0:	d802      	bhi.n	80022c8 <_realloc_r+0x34>
 80022c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80022c6:	d8f4      	bhi.n	80022b2 <_realloc_r+0x1e>
 80022c8:	4621      	mov	r1, r4
 80022ca:	4638      	mov	r0, r7
 80022cc:	f7ff fc3a 	bl	8001b44 <_malloc_r>
 80022d0:	4680      	mov	r8, r0
 80022d2:	b908      	cbnz	r0, 80022d8 <_realloc_r+0x44>
 80022d4:	4645      	mov	r5, r8
 80022d6:	e7ec      	b.n	80022b2 <_realloc_r+0x1e>
 80022d8:	42b4      	cmp	r4, r6
 80022da:	4622      	mov	r2, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	bf28      	it	cs
 80022e0:	4632      	movcs	r2, r6
 80022e2:	f7ff ffc9 	bl	8002278 <memcpy>
 80022e6:	4629      	mov	r1, r5
 80022e8:	4638      	mov	r0, r7
 80022ea:	f7ff fbbf 	bl	8001a6c <_free_r>
 80022ee:	e7f1      	b.n	80022d4 <_realloc_r+0x40>

080022f0 <_malloc_usable_size_r>:
 80022f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022f4:	1f18      	subs	r0, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfbc      	itt	lt
 80022fa:	580b      	ldrlt	r3, [r1, r0]
 80022fc:	18c0      	addlt	r0, r0, r3
 80022fe:	4770      	bx	lr

08002300 <_init>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr

0800230c <_fini>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr
